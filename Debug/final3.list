
final3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000614c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  080062f0  080062f0  000162f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e4  080065e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065ec  080065ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ec  080065ec  000165ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065f0  080065f0  000165f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08006664  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08006664  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afa5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6c  00000000  00000000  0002b045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173dd  00000000  00000000  0002db80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fbb  00000000  00000000  00044f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000922b1  00000000  00000000  0004ef18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e11c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  000e121c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062d4 	.word	0x080062d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080062d4 	.word	0x080062d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96e 	b.w	8000e70 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8083 	bne.w	8000cc2 <__udivmoddi4+0x116>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4617      	mov	r7, r2
 8000bc0:	d947      	bls.n	8000c52 <__udivmoddi4+0xa6>
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	b142      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	f1c2 0020 	rsb	r0, r2, #32
 8000bcc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	4097      	lsls	r7, r2
 8000bd4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbbc f6f8 	udiv	r6, ip, r8
 8000be4:	fa1f fe87 	uxth.w	lr, r7
 8000be8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 8119 	bcs.w	8000e34 <__udivmoddi4+0x288>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8116 	bls.w	8000e34 <__udivmoddi4+0x288>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	443b      	add	r3, r7
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8105 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8102 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xaa>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d150      	bne.n	8000d00 <__udivmoddi4+0x154>
 8000c5e:	1bcb      	subs	r3, r1, r7
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	fa1f f887 	uxth.w	r8, r7
 8000c68:	2601      	movs	r6, #1
 8000c6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6e:	0c21      	lsrs	r1, r4, #16
 8000c70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb08 f30c 	mul.w	r3, r8, ip
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0xe2>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	f200 80e9 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1ac9      	subs	r1, r1, r3
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x10c>
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x10a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80d9 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e7bf      	b.n	8000c42 <__udivmoddi4+0x96>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x12e>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80b1 	beq.w	8000e2e <__udivmoddi4+0x282>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x1cc>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0x140>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80b8 	bhi.w	8000e5c <__udivmoddi4+0x2b0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0a8      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000cfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f603 	lsr.w	r6, r0, r3
 8000d08:	4097      	lsls	r7, r2
 8000d0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d12:	40d9      	lsrs	r1, r3
 8000d14:	4330      	orrs	r0, r6
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d1c:	fa1f f887 	uxth.w	r8, r7
 8000d20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d28:	fb06 f108 	mul.w	r1, r6, r8
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x19c>
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3a:	f080 808d 	bcs.w	8000e58 <__udivmoddi4+0x2ac>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 808a 	bls.w	8000e58 <__udivmoddi4+0x2ac>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b281      	uxth	r1, r0
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb00 f308 	mul.w	r3, r0, r8
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x1c4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d66:	d273      	bcs.n	8000e50 <__udivmoddi4+0x2a4>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d971      	bls.n	8000e50 <__udivmoddi4+0x2a4>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4439      	add	r1, r7
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d76:	e778      	b.n	8000c6a <__udivmoddi4+0xbe>
 8000d78:	f1c6 0c20 	rsb	ip, r6, #32
 8000d7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d84:	431c      	orrs	r4, r3
 8000d86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d96:	431f      	orrs	r7, r3
 8000d98:	0c3b      	lsrs	r3, r7, #16
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fa1f f884 	uxth.w	r8, r4
 8000da2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000daa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dae:	458a      	cmp	sl, r1
 8000db0:	fa02 f206 	lsl.w	r2, r2, r6
 8000db4:	fa00 f306 	lsl.w	r3, r0, r6
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x220>
 8000dba:	1861      	adds	r1, r4, r1
 8000dbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc0:	d248      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	d946      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dca:	4421      	add	r1, r4
 8000dcc:	eba1 010a 	sub.w	r1, r1, sl
 8000dd0:	b2bf      	uxth	r7, r7
 8000dd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dde:	fb00 f808 	mul.w	r8, r0, r8
 8000de2:	45b8      	cmp	r8, r7
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x24a>
 8000de6:	19e7      	adds	r7, r4, r7
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d22e      	bcs.n	8000e4c <__udivmoddi4+0x2a0>
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d92c      	bls.n	8000e4c <__udivmoddi4+0x2a0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4427      	add	r7, r4
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	eba7 0708 	sub.w	r7, r7, r8
 8000dfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000e02:	454f      	cmp	r7, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	4649      	mov	r1, r9
 8000e08:	d31a      	bcc.n	8000e40 <__udivmoddi4+0x294>
 8000e0a:	d017      	beq.n	8000e3c <__udivmoddi4+0x290>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x27a>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb67 0701 	sbc.w	r7, r7, r1
 8000e16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1a:	40f2      	lsrs	r2, r6
 8000e1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e20:	40f7      	lsrs	r7, r6
 8000e22:	e9c5 2700 	strd	r2, r7, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e70b      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fd      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e3c:	4543      	cmp	r3, r8
 8000e3e:	d2e5      	bcs.n	8000e0c <__udivmoddi4+0x260>
 8000e40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e44:	eb69 0104 	sbc.w	r1, r9, r4
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7df      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e7d2      	b.n	8000df6 <__udivmoddi4+0x24a>
 8000e50:	4660      	mov	r0, ip
 8000e52:	e78d      	b.n	8000d70 <__udivmoddi4+0x1c4>
 8000e54:	4681      	mov	r9, r0
 8000e56:	e7b9      	b.n	8000dcc <__udivmoddi4+0x220>
 8000e58:	4666      	mov	r6, ip
 8000e5a:	e775      	b.n	8000d48 <__udivmoddi4+0x19c>
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e74a      	b.n	8000cf6 <__udivmoddi4+0x14a>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	4439      	add	r1, r7
 8000e66:	e713      	b.n	8000c90 <__udivmoddi4+0xe4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	443c      	add	r4, r7
 8000e6c:	e724      	b.n	8000cb8 <__udivmoddi4+0x10c>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <DWT_Delay_Init+0x58>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <DWT_Delay_Init+0x58>)
 8000e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e82:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <DWT_Delay_Init+0x58>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <DWT_Delay_Init+0x58>)
 8000e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e8e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <DWT_Delay_Init+0x5c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <DWT_Delay_Init+0x5c>)
 8000e96:	f023 0301 	bic.w	r3, r3, #1
 8000e9a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <DWT_Delay_Init+0x5c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <DWT_Delay_Init+0x5c>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <DWT_Delay_Init+0x5c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000eae:	bf00      	nop
     __ASM volatile ("NOP");
 8000eb0:	bf00      	nop
  __ASM volatile ("NOP");
 8000eb2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <DWT_Delay_Init+0x5c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	e000      	b.n	8000ec2 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ec0:	2301      	movs	r3, #1
  }
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000edf0 	.word	0xe000edf0
 8000ed0:	e0001000 	.word	0xe0001000

08000ed4 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <delay+0x40>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000ee2:	f002 f8b9 	bl	8003058 <HAL_RCC_GetHCLKFreq>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <delay+0x44>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0c9b      	lsrs	r3, r3, #18
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	fb02 f303 	mul.w	r3, r2, r3
 8000ef6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000ef8:	bf00      	nop
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <delay+0x40>)
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1ad2      	subs	r2, r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d3f8      	bcc.n	8000efa <delay+0x26>
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e0001000 	.word	0xe0001000
 8000f18:	431bde83 	.word	0x431bde83

08000f1c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f001 fa8e 	bl	800246c <HAL_GPIO_Init>
}
 8000f50:	bf00      	nop
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f001 fa70 	bl	800246c <HAL_GPIO_Init>
}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <DHT_Start>:


void DHT_Start (void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000f98:	f7ff ff6c 	bl	8000e74 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <DHT_Start+0x40>)
 8000fa0:	f7ff ffbc 	bl	8000f1c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <DHT_Start+0x40>)
 8000faa:	f001 fbfb 	bl	80027a4 <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
 8000fae:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000fb2:	f7ff ff8f 	bl	8000ed4 <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <DHT_Start+0x40>)
 8000fbc:	f001 fbf2 	bl	80027a4 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000fc0:	2014      	movs	r0, #20
 8000fc2:	f7ff ff87 	bl	8000ed4 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <DHT_Start+0x40>)
 8000fca:	f7ff ffc5 	bl	8000f58 <Set_Pin_Input>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000fe2:	2028      	movs	r0, #40	; 0x28
 8000fe4:	f7ff ff76 	bl	8000ed4 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4811      	ldr	r0, [pc, #68]	; (8001030 <DHT_Check_Response+0x58>)
 8000fec:	f001 fbc2 	bl	8002774 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10e      	bne.n	8001014 <DHT_Check_Response+0x3c>
	{
		delay (80);
 8000ff6:	2050      	movs	r0, #80	; 0x50
 8000ff8:	f7ff ff6c 	bl	8000ed4 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <DHT_Check_Response+0x58>)
 8001000:	f001 fbb8 	bl	8002774 <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <DHT_Check_Response+0x38>
 800100a:	2301      	movs	r3, #1
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e001      	b.n	8001014 <DHT_Check_Response+0x3c>
		else Response = -1;
 8001010:	23ff      	movs	r3, #255	; 0xff
 8001012:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001014:	bf00      	nop
 8001016:	2102      	movs	r1, #2
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <DHT_Check_Response+0x58>)
 800101a:	f001 fbab 	bl	8002774 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f8      	bne.n	8001016 <DHT_Check_Response+0x3e>

	return Response;
 8001024:	79fb      	ldrb	r3, [r7, #7]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020000 	.word	0x40020000

08001034 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800103a:	2300      	movs	r3, #0
 800103c:	71bb      	strb	r3, [r7, #6]
 800103e:	e037      	b.n	80010b0 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001040:	bf00      	nop
 8001042:	2102      	movs	r1, #2
 8001044:	481e      	ldr	r0, [pc, #120]	; (80010c0 <DHT_Read+0x8c>)
 8001046:	f001 fb95 	bl	8002774 <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f8      	beq.n	8001042 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001050:	2028      	movs	r0, #40	; 0x28
 8001052:	f7ff ff3f 	bl	8000ed4 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001056:	2102      	movs	r1, #2
 8001058:	4819      	ldr	r0, [pc, #100]	; (80010c0 <DHT_Read+0x8c>)
 800105a:	f001 fb8b 	bl	8002774 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10e      	bne.n	8001082 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2201      	movs	r2, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	b25b      	sxtb	r3, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	b25a      	sxtb	r2, r3
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	4013      	ands	r3, r2
 800107c:	b25b      	sxtb	r3, r3
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	e00b      	b.n	800109a <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	f1c3 0307 	rsb	r3, r3, #7
 8001088:	2201      	movs	r2, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	b25a      	sxtb	r2, r3
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	4313      	orrs	r3, r2
 8001096:	b25b      	sxtb	r3, r3
 8001098:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 800109a:	bf00      	nop
 800109c:	2102      	movs	r1, #2
 800109e:	4808      	ldr	r0, [pc, #32]	; (80010c0 <DHT_Read+0x8c>)
 80010a0:	f001 fb68 	bl	8002774 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f8      	bne.n	800109c <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	3301      	adds	r3, #1
 80010ae:	71bb      	strb	r3, [r7, #6]
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	d9c4      	bls.n	8001040 <DHT_Read+0xc>
	}
	return i;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40020000 	.word	0x40020000

080010c4 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 80010cc:	f7ff ff62 	bl	8000f94 <DHT_Start>
	Presence = DHT_Check_Response ();
 80010d0:	f7ff ff82 	bl	8000fd8 <DHT_Check_Response>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <DHT_GetData+0xb4>)
 80010da:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80010dc:	f7ff ffaa 	bl	8001034 <DHT_Read>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <DHT_GetData+0xb8>)
 80010e6:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80010e8:	f7ff ffa4 	bl	8001034 <DHT_Read>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <DHT_GetData+0xbc>)
 80010f2:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80010f4:	f7ff ff9e 	bl	8001034 <DHT_Read>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b21      	ldr	r3, [pc, #132]	; (8001184 <DHT_GetData+0xc0>)
 80010fe:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001100:	f7ff ff98 	bl	8001034 <DHT_Read>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <DHT_GetData+0xc4>)
 800110a:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 800110c:	f7ff ff92 	bl	8001034 <DHT_Read>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <DHT_GetData+0xc8>)
 8001116:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <DHT_GetData+0xc8>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <DHT_GetData+0xb8>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <DHT_GetData+0xbc>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4413      	add	r3, r2
 800112a:	4a16      	ldr	r2, [pc, #88]	; (8001184 <DHT_GetData+0xc0>)
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <DHT_GetData+0xc4>)
 8001132:	7812      	ldrb	r2, [r2, #0]
 8001134:	4413      	add	r3, r2
 8001136:	4299      	cmp	r1, r3
 8001138:	d119      	bne.n	800116e <DHT_GetData+0xaa>
			DHT_Data->Temperature = Temp_byte1;
			DHT_Data->Humidity = Rh_byte1;
		#endif

		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <DHT_GetData+0xc0>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	4a11      	ldr	r2, [pc, #68]	; (8001188 <DHT_GetData+0xc4>)
 8001142:	7812      	ldrb	r2, [r2, #0]
 8001144:	4313      	orrs	r3, r2
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <DHT_GetData+0xb8>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	4a09      	ldr	r2, [pc, #36]	; (8001180 <DHT_GetData+0xbc>)
 800115c:	7812      	ldrb	r2, [r2, #0]
 800115e:	4313      	orrs	r3, r2
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edc3 7a01 	vstr	s15, [r3, #4]
		#endif
	}
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000008c 	.word	0x2000008c
 800117c:	200000a0 	.word	0x200000a0
 8001180:	200000a2 	.word	0x200000a2
 8001184:	200000a1 	.word	0x200000a1
 8001188:	200000a6 	.word	0x200000a6
 800118c:	200000a4 	.word	0x200000a4

08001190 <sendData>:
/* USER CODE BEGIN 0 */
DHT_DataTypedef DHT22_Data;
float Temperature, Humidity;
int adcValue=0;

void sendData(){
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af02      	add	r7, sp, #8
	char buffer[18];
	char temp[7], humi[7];
	gcvt(Temperature, 5, temp);
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <sendData+0x70>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9d4 	bl	8000548 <__aeabi_f2d>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	2005      	movs	r0, #5
 80011ac:	ec45 4b10 	vmov	d0, r4, r5
 80011b0:	f002 fb3e 	bl	8003830 <gcvt>
	gcvt(Humidity, 5, humi);
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <sendData+0x74>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9c5 	bl	8000548 <__aeabi_f2d>
 80011be:	4604      	mov	r4, r0
 80011c0:	460d      	mov	r5, r1
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	2005      	movs	r0, #5
 80011c8:	ec45 4b10 	vmov	d0, r4, r5
 80011cc:	f002 fb30 	bl	8003830 <gcvt>
	sprintf(buffer, "[%s,%s,%d,0]",temp, humi, adcValue);
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <sendData+0x78>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	1d39      	adds	r1, r7, #4
 80011d6:	f107 020c 	add.w	r2, r7, #12
 80011da:	f107 0014 	add.w	r0, r7, #20
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	460b      	mov	r3, r1
 80011e2:	490a      	ldr	r1, [pc, #40]	; (800120c <sendData+0x7c>)
 80011e4:	f002 fb7a 	bl	80038dc <siprintf>
	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80011e8:	f107 0114 	add.w	r1, r7, #20
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	2212      	movs	r2, #18
 80011f2:	4807      	ldr	r0, [pc, #28]	; (8001210 <sendData+0x80>)
 80011f4:	f001 ffb1 	bl	800315a <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001200:	200000b0 	.word	0x200000b0
 8001204:	20000184 	.word	0x20000184
 8001208:	20000090 	.word	0x20000090
 800120c:	080062f0 	.word	0x080062f0
 8001210:	200000fc 	.word	0x200000fc

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121a:	f000 fbfd 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121e:	f000 f861 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001222:	f000 f971 	bl	8001508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001226:	f000 f945 	bl	80014b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800122a:	f000 f8c7 	bl	80013bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800122e:	f000 f917 	bl	8001460 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int max_eb=-1e9,min_eb=1e9;
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <main+0xa8>)
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <main+0xac>)
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // DHT22
	  DHT_GetData(&DHT22_Data);
 800123a:	4822      	ldr	r0, [pc, #136]	; (80012c4 <main+0xb0>)
 800123c:	f7ff ff42 	bl	80010c4 <DHT_GetData>
	  Temperature = DHT22_Data.Temperature/10.0;
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <main+0xb0>)
 8001242:	ed93 7a00 	vldr	s14, [r3]
 8001246:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800124a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <main+0xb4>)
 8001250:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = DHT22_Data.Humidity/10.0;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <main+0xb0>)
 8001256:	ed93 7a01 	vldr	s14, [r3, #4]
 800125a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800125e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <main+0xb8>)
 8001264:	edc3 7a00 	vstr	s15, [r3]

	  // light sensor
	  HAL_ADC_Start(&hadc1);
 8001268:	4819      	ldr	r0, [pc, #100]	; (80012d0 <main+0xbc>)
 800126a:	f000 fcaf 	bl	8001bcc <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800126e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001272:	4817      	ldr	r0, [pc, #92]	; (80012d0 <main+0xbc>)
 8001274:	f000 fd5e 	bl	8001d34 <HAL_ADC_PollForConversion>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d106      	bne.n	800128c <main+0x78>
		  adcValue = HAL_ADC_GetValue(&hadc1);
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <main+0xbc>)
 8001280:	f000 fde3 	bl	8001e4a <HAL_ADC_GetValue>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <main+0xc0>)
 800128a:	601a      	str	r2, [r3, #0]
//		  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
	  }

	  // PM2.5

	  sendData();
 800128c:	f7ff ff80 	bl	8001190 <sendData>
	  char rbuffer[40];
	  if (HAL_UART_Receive(&huart1, rbuffer, sizeof(rbuffer), 100000) == HAL_OK){
 8001290:	4639      	mov	r1, r7
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <main+0xc4>)
 8001294:	2228      	movs	r2, #40	; 0x28
 8001296:	4811      	ldr	r0, [pc, #68]	; (80012dc <main+0xc8>)
 8001298:	f001 fff1 	bl	800327e <HAL_UART_Receive>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <main+0x9c>
		  HAL_UART_Transmit(&huart2, rbuffer, sizeof(rbuffer), HAL_MAX_DELAY);
 80012a2:	4639      	mov	r1, r7
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
 80012a8:	2228      	movs	r2, #40	; 0x28
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <main+0xcc>)
 80012ac:	f001 ff55 	bl	800315a <HAL_UART_Transmit>
	  }
	  HAL_Delay(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b4:	f000 fc22 	bl	8001afc <HAL_Delay>
  {
 80012b8:	e7bf      	b.n	800123a <main+0x26>
 80012ba:	bf00      	nop
 80012bc:	c4653600 	.word	0xc4653600
 80012c0:	3b9aca00 	.word	0x3b9aca00
 80012c4:	200000a8 	.word	0x200000a8
 80012c8:	200000b0 	.word	0x200000b0
 80012cc:	20000184 	.word	0x20000184
 80012d0:	200000b4 	.word	0x200000b4
 80012d4:	20000090 	.word	0x20000090
 80012d8:	000186a0 	.word	0x000186a0
 80012dc:	200000fc 	.word	0x200000fc
 80012e0:	20000140 	.word	0x20000140

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2230      	movs	r2, #48	; 0x30
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 faea 	bl	80038cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <SystemClock_Config+0xd0>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <SystemClock_Config+0xd0>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <SystemClock_Config+0xd0>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <SystemClock_Config+0xd4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001330:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <SystemClock_Config+0xd4>)
 8001332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <SystemClock_Config+0xd4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001350:	2302      	movs	r3, #2
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001354:	2300      	movs	r3, #0
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001358:	2310      	movs	r3, #16
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800135c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001360:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001362:	2304      	movs	r3, #4
 8001364:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001366:	2307      	movs	r3, #7
 8001368:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fa32 	bl	80027d8 <HAL_RCC_OscConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800137a:	f000 f933 	bl	80015e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137e:	230f      	movs	r3, #15
 8001380:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001382:	2302      	movs	r3, #2
 8001384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2102      	movs	r1, #2
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fc94 	bl	8002cc8 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013a6:	f000 f91d 	bl	80015e4 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3750      	adds	r7, #80	; 0x50
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000

080013bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_ADC1_Init+0x98>)
 80013d0:	4a21      	ldr	r2, [pc, #132]	; (8001458 <MX_ADC1_Init+0x9c>)
 80013d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_ADC1_Init+0x98>)
 80013d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_ADC1_Init+0x98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_ADC1_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_ADC1_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_ADC1_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_ADC1_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_ADC1_Init+0x98>)
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <MX_ADC1_Init+0xa0>)
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_ADC1_Init+0x98>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_ADC1_Init+0x98>)
 800140a:	2201      	movs	r2, #1
 800140c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_ADC1_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_ADC1_Init+0x98>)
 8001418:	2201      	movs	r2, #1
 800141a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_ADC1_Init+0x98>)
 800141e:	f000 fb91 	bl	8001b44 <HAL_ADC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001428:	f000 f8dc 	bl	80015e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800142c:	2300      	movs	r3, #0
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001430:	2301      	movs	r3, #1
 8001432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_ADC1_Init+0x98>)
 800143e:	f000 fd11 	bl	8001e64 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001448:	f000 f8cc 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200000b4 	.word	0x200000b4
 8001458:	40012000 	.word	0x40012000
 800145c:	0f000001 	.word	0x0f000001

08001460 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_USART1_UART_Init+0x4c>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <MX_USART1_UART_Init+0x50>)
 8001468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_USART1_UART_Init+0x4c>)
 800146c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USART1_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_USART1_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_USART1_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_USART1_UART_Init+0x4c>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USART1_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_USART1_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_USART1_UART_Init+0x4c>)
 8001498:	f001 fe12 	bl	80030c0 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014a2:	f000 f89f 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200000fc 	.word	0x200000fc
 80014b0:	40011000 	.word	0x40011000

080014b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ec:	f001 fde8 	bl	80030c0 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014f6:	f000 f875 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000140 	.word	0x20000140
 8001504:	40004400 	.word	0x40004400

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_GPIO_Init+0xd0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <MX_GPIO_Init+0xd0>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <MX_GPIO_Init+0xd0>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_GPIO_Init+0xd0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <MX_GPIO_Init+0xd0>)
 8001544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <MX_GPIO_Init+0xd0>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <MX_GPIO_Init+0xd0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <MX_GPIO_Init+0xd0>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <MX_GPIO_Init+0xd0>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <MX_GPIO_Init+0xd0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <MX_GPIO_Init+0xd0>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <MX_GPIO_Init+0xd0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2120      	movs	r1, #32
 8001592:	4812      	ldr	r0, [pc, #72]	; (80015dc <MX_GPIO_Init+0xd4>)
 8001594:	f001 f906 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800159e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <MX_GPIO_Init+0xd8>)
 80015b0:	f000 ff5c 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015b4:	2320      	movs	r3, #32
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_GPIO_Init+0xd4>)
 80015cc:	f000 ff4e 	bl	800246c <HAL_GPIO_Init>

}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020800 	.word	0x40020800

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_MspInit+0x4c>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x4c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800162e:	2007      	movs	r0, #7
 8001630:	f000 fee8 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_ADC_MspInit+0x7c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d127      	bne.n	80016b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_ADC_MspInit+0x80>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800169a:	2301      	movs	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169e:	2303      	movs	r3, #3
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <HAL_ADC_MspInit+0x84>)
 80016ae:	f000 fedd 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40012000 	.word	0x40012000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000

080016c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	; 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <HAL_UART_MspInit+0xe8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12d      	bne.n	8001746 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <HAL_UART_MspInit+0xec>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a30      	ldr	r2, [pc, #192]	; (80017b4 <HAL_UART_MspInit+0xec>)
 80016f4:	f043 0310 	orr.w	r3, r3, #16
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_UART_MspInit+0xec>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <HAL_UART_MspInit+0xec>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <HAL_UART_MspInit+0xec>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_UART_MspInit+0xec>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001722:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001734:	2307      	movs	r3, #7
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	481e      	ldr	r0, [pc, #120]	; (80017b8 <HAL_UART_MspInit+0xf0>)
 8001740:	f000 fe94 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001744:	e030      	b.n	80017a8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1c      	ldr	r2, [pc, #112]	; (80017bc <HAL_UART_MspInit+0xf4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d12b      	bne.n	80017a8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_UART_MspInit+0xec>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <HAL_UART_MspInit+0xec>)
 800175a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_UART_MspInit+0xec>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_UART_MspInit+0xec>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_UART_MspInit+0xec>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6313      	str	r3, [r2, #48]	; 0x30
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <HAL_UART_MspInit+0xec>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001788:	230c      	movs	r3, #12
 800178a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001798:	2307      	movs	r3, #7
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <HAL_UART_MspInit+0xf0>)
 80017a4:	f000 fe62 	bl	800246c <HAL_GPIO_Init>
}
 80017a8:	bf00      	nop
 80017aa:	3730      	adds	r7, #48	; 0x30
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40004400 	.word	0x40004400

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <NMI_Handler+0x4>

080017c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f000 f956 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
	return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_kill>:

int _kill(int pid, int sig)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800182e:	f002 f823 	bl	8003878 <__errno>
 8001832:	4603      	mov	r3, r0
 8001834:	2216      	movs	r2, #22
 8001836:	601a      	str	r2, [r3, #0]
	return -1;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_exit>:

void _exit (int status)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ffe7 	bl	8001824 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001856:	e7fe      	b.n	8001856 <_exit+0x12>

08001858 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e00a      	b.n	8001880 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800186a:	f3af 8000 	nop.w
 800186e:	4601      	mov	r1, r0
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	60ba      	str	r2, [r7, #8]
 8001876:	b2ca      	uxtb	r2, r1
 8001878:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	dbf0      	blt.n	800186a <_read+0x12>
	}

return len;
 8001888:	687b      	ldr	r3, [r7, #4]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e009      	b.n	80018b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	60ba      	str	r2, [r7, #8]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf1      	blt.n	80018a4 <_write+0x12>
	}
	return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_close>:

int _close(int file)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
	return -1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f2:	605a      	str	r2, [r3, #4]
	return 0;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_isatty>:

int _isatty(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
	return 1;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
	return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f001 ff88 	bl	8003878 <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20018000 	.word	0x20018000
 8001994:	00000400 	.word	0x00000400
 8001998:	20000094 	.word	0x20000094
 800199c:	200001a0 	.word	0x200001a0

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ca:	490e      	ldr	r1, [pc, #56]	; (8001a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e0:	4c0b      	ldr	r4, [pc, #44]	; (8001a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ee:	f7ff ffd7 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f001 ff47 	bl	8003884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7ff fc0d 	bl	8001214 <main>
  bx  lr    
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a08:	080065f4 	.word	0x080065f4
  ldr r2, =_sbss
 8001a0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a10:	2000019c 	.word	0x2000019c

08001a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <HAL_Init+0x40>)
 8001a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_Init+0x40>)
 8001a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_Init+0x40>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 fcdf 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fdd0 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fce9 	bl	8002452 <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f000 fcbf 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000188 	.word	0x20000188

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000188 	.word	0x20000188

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff ffee 	bl	8001ae4 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d005      	beq.n	8001b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_Delay+0x44>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b22:	bf00      	nop
 8001b24:	f7ff ffde 	bl	8001ae4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d8f7      	bhi.n	8001b24 <HAL_Delay+0x28>
  {
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000008 	.word	0x20000008

08001b44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e033      	b.n	8001bc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fd6c 	bl	8001640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d118      	bne.n	8001bb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b8a:	f023 0302 	bic.w	r3, r3, #2
 8001b8e:	f043 0202 	orr.w	r2, r3, #2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fa86 	bl	80020a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f023 0303 	bic.w	r3, r3, #3
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bb2:	e001      	b.n	8001bb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_Start+0x1a>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e097      	b.n	8001d16 <HAL_ADC_Start+0x14a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d018      	beq.n	8001c2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c0c:	4b45      	ldr	r3, [pc, #276]	; (8001d24 <HAL_ADC_Start+0x158>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a45      	ldr	r2, [pc, #276]	; (8001d28 <HAL_ADC_Start+0x15c>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0c9a      	lsrs	r2, r3, #18
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c20:	e002      	b.n	8001c28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f9      	bne.n	8001c22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d15f      	bne.n	8001cfc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7a:	d106      	bne.n	8001c8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	f023 0206 	bic.w	r2, r3, #6
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	645a      	str	r2, [r3, #68]	; 0x44
 8001c88:	e002      	b.n	8001c90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_ADC_Start+0x160>)
 8001c9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ca4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10f      	bne.n	8001cd2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d129      	bne.n	8001d14 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	e020      	b.n	8001d14 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <HAL_ADC_Start+0x164>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d11b      	bne.n	8001d14 <HAL_ADC_Start+0x148>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d114      	bne.n	8001d14 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	e00b      	b.n	8001d14 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f043 0210 	orr.w	r2, r3, #16
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	f043 0201 	orr.w	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000
 8001d28:	431bde83 	.word	0x431bde83
 8001d2c:	40012300 	.word	0x40012300
 8001d30:	40012000 	.word	0x40012000

08001d34 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d50:	d113      	bne.n	8001d7a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d60:	d10b      	bne.n	8001d7a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f043 0220 	orr.w	r2, r3, #32
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e063      	b.n	8001e42 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d7a:	f7ff feb3 	bl	8001ae4 <HAL_GetTick>
 8001d7e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d80:	e021      	b.n	8001dc6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d01d      	beq.n	8001dc6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_ADC_PollForConversion+0x6c>
 8001d90:	f7ff fea8 	bl	8001ae4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d212      	bcs.n	8001dc6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d00b      	beq.n	8001dc6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f043 0204 	orr.w	r2, r3, #4
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e03d      	b.n	8001e42 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d1d6      	bne.n	8001d82 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0212 	mvn.w	r2, #18
 8001ddc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d123      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d11f      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d111      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1c>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e105      	b.n	800208c <HAL_ADC_ConfigChannel+0x228>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b09      	cmp	r3, #9
 8001e8e:	d925      	bls.n	8001edc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68d9      	ldr	r1, [r3, #12]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b1e      	subs	r3, #30
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43da      	mvns	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68d9      	ldr	r1, [r3, #12]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	4603      	mov	r3, r0
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4403      	add	r3, r0
 8001ece:	3b1e      	subs	r3, #30
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	e022      	b.n	8001f22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6919      	ldr	r1, [r3, #16]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	400a      	ands	r2, r1
 8001efe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6919      	ldr	r1, [r3, #16]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4618      	mov	r0, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4403      	add	r3, r0
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d824      	bhi.n	8001f74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	3b05      	subs	r3, #5
 8001f3c:	221f      	movs	r2, #31
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	400a      	ands	r2, r1
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	3b05      	subs	r3, #5
 8001f66:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	635a      	str	r2, [r3, #52]	; 0x34
 8001f72:	e04c      	b.n	800200e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b0c      	cmp	r3, #12
 8001f7a:	d824      	bhi.n	8001fc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3b23      	subs	r3, #35	; 0x23
 8001f8e:	221f      	movs	r2, #31
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43da      	mvns	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3b23      	subs	r3, #35	; 0x23
 8001fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc4:	e023      	b.n	800200e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b41      	subs	r3, #65	; 0x41
 8001fd8:	221f      	movs	r2, #31
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	3b41      	subs	r3, #65	; 0x41
 8002002:	fa00 f203 	lsl.w	r2, r0, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800200e:	4b22      	ldr	r3, [pc, #136]	; (8002098 <HAL_ADC_ConfigChannel+0x234>)
 8002010:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a21      	ldr	r2, [pc, #132]	; (800209c <HAL_ADC_ConfigChannel+0x238>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d109      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x1cc>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b12      	cmp	r3, #18
 8002022:	d105      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <HAL_ADC_ConfigChannel+0x238>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d123      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x21e>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d003      	beq.n	800204a <HAL_ADC_ConfigChannel+0x1e6>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b11      	cmp	r3, #17
 8002048:	d11b      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b10      	cmp	r3, #16
 800205c:	d111      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_ADC_ConfigChannel+0x23c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_ADC_ConfigChannel+0x240>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	0c9a      	lsrs	r2, r3, #18
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002074:	e002      	b.n	800207c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3b01      	subs	r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f9      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40012300 	.word	0x40012300
 800209c:	40012000 	.word	0x40012000
 80020a0:	20000000 	.word	0x20000000
 80020a4:	431bde83 	.word	0x431bde83

080020a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020b0:	4b79      	ldr	r3, [pc, #484]	; (8002298 <ADC_Init+0x1f0>)
 80020b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	021a      	lsls	r2, r3, #8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002100:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002122:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6899      	ldr	r1, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	4a58      	ldr	r2, [pc, #352]	; (800229c <ADC_Init+0x1f4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d022      	beq.n	8002186 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800214e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6899      	ldr	r1, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6899      	ldr	r1, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	e00f      	b.n	80021a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002194:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0202 	bic.w	r2, r2, #2
 80021b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6899      	ldr	r1, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7e1b      	ldrb	r3, [r3, #24]
 80021c0:	005a      	lsls	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6859      	ldr	r1, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	3b01      	subs	r3, #1
 8002200:	035a      	lsls	r2, r3, #13
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	e007      	b.n	800221c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	3b01      	subs	r3, #1
 8002238:	051a      	lsls	r2, r3, #20
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800225e:	025a      	lsls	r2, r3, #9
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6899      	ldr	r1, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	029a      	lsls	r2, r3, #10
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	609a      	str	r2, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40012300 	.word	0x40012300
 800229c:	0f000001 	.word	0x0f000001

080022a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022bc:	4013      	ands	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d2:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	60d3      	str	r3, [r2, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <__NVIC_GetPriorityGrouping+0x18>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	f003 0307 	and.w	r3, r3, #7
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	; (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff8e 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff47 	bl	80022a0 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff5c 	bl	80022e8 <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff8e 	bl	8002358 <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5d 	bl	8002304 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffb0 	bl	80023c0 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	e159      	b.n	800273c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002488:	2201      	movs	r2, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	f040 8148 	bne.w	8002736 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d005      	beq.n	80024be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d130      	bne.n	8002520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f4:	2201      	movs	r2, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 0201 	and.w	r2, r3, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b03      	cmp	r3, #3
 800252a:	d017      	beq.n	800255c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d123      	bne.n	80025b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	08da      	lsrs	r2, r3, #3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3208      	adds	r2, #8
 8002570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	220f      	movs	r2, #15
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	08da      	lsrs	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3208      	adds	r2, #8
 80025aa:	69b9      	ldr	r1, [r7, #24]
 80025ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0203 	and.w	r2, r3, #3
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80a2 	beq.w	8002736 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b57      	ldr	r3, [pc, #348]	; (8002754 <HAL_GPIO_Init+0x2e8>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a56      	ldr	r2, [pc, #344]	; (8002754 <HAL_GPIO_Init+0x2e8>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b54      	ldr	r3, [pc, #336]	; (8002754 <HAL_GPIO_Init+0x2e8>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260e:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_GPIO_Init+0x2ec>)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a49      	ldr	r2, [pc, #292]	; (800275c <HAL_GPIO_Init+0x2f0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d019      	beq.n	800266e <HAL_GPIO_Init+0x202>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a48      	ldr	r2, [pc, #288]	; (8002760 <HAL_GPIO_Init+0x2f4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_GPIO_Init+0x1fe>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a47      	ldr	r2, [pc, #284]	; (8002764 <HAL_GPIO_Init+0x2f8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00d      	beq.n	8002666 <HAL_GPIO_Init+0x1fa>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a46      	ldr	r2, [pc, #280]	; (8002768 <HAL_GPIO_Init+0x2fc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d007      	beq.n	8002662 <HAL_GPIO_Init+0x1f6>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a45      	ldr	r2, [pc, #276]	; (800276c <HAL_GPIO_Init+0x300>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_GPIO_Init+0x1f2>
 800265a:	2304      	movs	r3, #4
 800265c:	e008      	b.n	8002670 <HAL_GPIO_Init+0x204>
 800265e:	2307      	movs	r3, #7
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x204>
 8002662:	2303      	movs	r3, #3
 8002664:	e004      	b.n	8002670 <HAL_GPIO_Init+0x204>
 8002666:	2302      	movs	r3, #2
 8002668:	e002      	b.n	8002670 <HAL_GPIO_Init+0x204>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_GPIO_Init+0x204>
 800266e:	2300      	movs	r3, #0
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	f002 0203 	and.w	r2, r2, #3
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	4093      	lsls	r3, r2
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002680:	4935      	ldr	r1, [pc, #212]	; (8002758 <HAL_GPIO_Init+0x2ec>)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	3302      	adds	r3, #2
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_GPIO_Init+0x304>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b2:	4a2f      	ldr	r2, [pc, #188]	; (8002770 <HAL_GPIO_Init+0x304>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026b8:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_GPIO_Init+0x304>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026dc:	4a24      	ldr	r2, [pc, #144]	; (8002770 <HAL_GPIO_Init+0x304>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <HAL_GPIO_Init+0x304>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002706:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <HAL_GPIO_Init+0x304>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_GPIO_Init+0x304>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002730:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_GPIO_Init+0x304>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3301      	adds	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b0f      	cmp	r3, #15
 8002740:	f67f aea2 	bls.w	8002488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3724      	adds	r7, #36	; 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40013800 	.word	0x40013800
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40013c00 	.word	0x40013c00

08002774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e001      	b.n	8002796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
 80027b0:	4613      	mov	r3, r2
 80027b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b4:	787b      	ldrb	r3, [r7, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027c0:	e003      	b.n	80027ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027c2:	887b      	ldrh	r3, [r7, #2]
 80027c4:	041a      	lsls	r2, r3, #16
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	619a      	str	r2, [r3, #24]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e264      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d075      	beq.n	80028e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027f6:	4ba3      	ldr	r3, [pc, #652]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d00c      	beq.n	800281c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002802:	4ba0      	ldr	r3, [pc, #640]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280a:	2b08      	cmp	r3, #8
 800280c:	d112      	bne.n	8002834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280e:	4b9d      	ldr	r3, [pc, #628]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281a:	d10b      	bne.n	8002834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	4b99      	ldr	r3, [pc, #612]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05b      	beq.n	80028e0 <HAL_RCC_OscConfig+0x108>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d157      	bne.n	80028e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e23f      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d106      	bne.n	800284c <HAL_RCC_OscConfig+0x74>
 800283e:	4b91      	ldr	r3, [pc, #580]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a90      	ldr	r2, [pc, #576]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e01d      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x98>
 8002856:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a8a      	ldr	r2, [pc, #552]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a87      	ldr	r2, [pc, #540]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 8002870:	4b84      	ldr	r3, [pc, #528]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a83      	ldr	r2, [pc, #524]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b81      	ldr	r3, [pc, #516]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a80      	ldr	r2, [pc, #512]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7ff f928 	bl	8001ae4 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002898:	f7ff f924 	bl	8001ae4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e204      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0xc0>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7ff f914 	bl	8001ae4 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c0:	f7ff f910 	bl	8001ae4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1f0      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	4b6c      	ldr	r3, [pc, #432]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0xe8>
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d063      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ee:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fa:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002902:	2b08      	cmp	r3, #8
 8002904:	d11c      	bne.n	8002940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002906:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d116      	bne.n	8002940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002912:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_RCC_OscConfig+0x152>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e1c4      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292a:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4952      	ldr	r1, [pc, #328]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	e03a      	b.n	80029b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002948:	4b4f      	ldr	r3, [pc, #316]	; (8002a88 <HAL_RCC_OscConfig+0x2b0>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7ff f8c9 	bl	8001ae4 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002956:	f7ff f8c5 	bl	8001ae4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e1a5      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4940      	ldr	r1, [pc, #256]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
 8002988:	e015      	b.n	80029b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298a:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <HAL_RCC_OscConfig+0x2b0>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7ff f8a8 	bl	8001ae4 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7ff f8a4 	bl	8001ae4 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e184      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d030      	beq.n	8002a24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d016      	beq.n	80029f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ca:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <HAL_RCC_OscConfig+0x2b4>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7ff f888 	bl	8001ae4 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d8:	f7ff f884 	bl	8001ae4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e164      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x200>
 80029f6:	e015      	b.n	8002a24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCC_OscConfig+0x2b4>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7ff f871 	bl	8001ae4 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a06:	f7ff f86d 	bl	8001ae4 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e14d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80a0 	beq.w	8002b72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10f      	bne.n	8002a62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_OscConfig+0x2b8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d121      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_RCC_OscConfig+0x2b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_RCC_OscConfig+0x2b8>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7a:	f7ff f833 	bl	8001ae4 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	e011      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2ce>
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800
 8002a88:	42470000 	.word	0x42470000
 8002a8c:	42470e80 	.word	0x42470e80
 8002a90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a94:	f7ff f826 	bl	8001ae4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e106      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b85      	ldr	r3, [pc, #532]	; (8002cbc <HAL_RCC_OscConfig+0x4e4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d106      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
 8002aba:	4b81      	ldr	r3, [pc, #516]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4a80      	ldr	r2, [pc, #512]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac6:	e01c      	b.n	8002b02 <HAL_RCC_OscConfig+0x32a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d10c      	bne.n	8002aea <HAL_RCC_OscConfig+0x312>
 8002ad0:	4b7b      	ldr	r3, [pc, #492]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	4a7a      	ldr	r2, [pc, #488]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	6713      	str	r3, [r2, #112]	; 0x70
 8002adc:	4b78      	ldr	r3, [pc, #480]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a77      	ldr	r2, [pc, #476]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	e00b      	b.n	8002b02 <HAL_RCC_OscConfig+0x32a>
 8002aea:	4b75      	ldr	r3, [pc, #468]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a74      	ldr	r2, [pc, #464]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	4b72      	ldr	r3, [pc, #456]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a71      	ldr	r2, [pc, #452]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002afc:	f023 0304 	bic.w	r3, r3, #4
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d015      	beq.n	8002b36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0a:	f7fe ffeb 	bl	8001ae4 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fe ffe7 	bl	8001ae4 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e0c5      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ee      	beq.n	8002b12 <HAL_RCC_OscConfig+0x33a>
 8002b34:	e014      	b.n	8002b60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7fe ffd5 	bl	8001ae4 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe ffd1 	bl	8001ae4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0af      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b54:	4b5a      	ldr	r3, [pc, #360]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4b56      	ldr	r3, [pc, #344]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	4a55      	ldr	r2, [pc, #340]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 809b 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b7c:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d05c      	beq.n	8002c42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d141      	bne.n	8002c14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b90:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <HAL_RCC_OscConfig+0x4ec>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe ffa5 	bl	8001ae4 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe ffa1 	bl	8001ae4 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e081      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb0:	4b43      	ldr	r3, [pc, #268]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f0      	bne.n	8002b9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	019b      	lsls	r3, r3, #6
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	4937      	ldr	r1, [pc, #220]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be6:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_RCC_OscConfig+0x4ec>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe ff7a 	bl	8001ae4 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe ff76 	bl	8001ae4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e056      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x41c>
 8002c12:	e04e      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_RCC_OscConfig+0x4ec>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe ff63 	bl	8001ae4 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe ff5f 	bl	8001ae4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e03f      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c34:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x44a>
 8002c40:	e037      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e032      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <HAL_RCC_OscConfig+0x4e8>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d028      	beq.n	8002cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d121      	bne.n	8002cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d11a      	bne.n	8002cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c7e:	4013      	ands	r3, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d111      	bne.n	8002cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	085b      	lsrs	r3, r3, #1
 8002c96:	3b01      	subs	r3, #1
 8002c98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	42470060 	.word	0x42470060

08002cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0cc      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b68      	ldr	r3, [pc, #416]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d90c      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b63      	ldr	r3, [pc, #396]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0b8      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d34:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d40:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	494d      	ldr	r1, [pc, #308]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d044      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d119      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e07f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e06f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e067      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da6:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f023 0203 	bic.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4934      	ldr	r1, [pc, #208]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db8:	f7fe fe94 	bl	8001ae4 <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc0:	f7fe fe90 	bl	8001ae4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e04f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 020c 	and.w	r2, r3, #12
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d1eb      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d20c      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e032      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4916      	ldr	r1, [pc, #88]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	490e      	ldr	r1, [pc, #56]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4e:	f000 f821 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	490a      	ldr	r1, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	fa22 f303 	lsr.w	r3, r2, r3
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fdf4 	bl	8001a5c <HAL_InitTick>

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023c00 	.word	0x40023c00
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08006300 	.word	0x08006300
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	20000004 	.word	0x20000004

08002e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eac:	4b67      	ldr	r3, [pc, #412]	; (800304c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	f200 80bd 	bhi.w	8003038 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d003      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x3a>
 8002ec6:	e0b7      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b61      	ldr	r3, [pc, #388]	; (8003050 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002eca:	60bb      	str	r3, [r7, #8]
       break;
 8002ecc:	e0b7      	b.n	800303e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ece:	4b61      	ldr	r3, [pc, #388]	; (8003054 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ed0:	60bb      	str	r3, [r7, #8]
      break;
 8002ed2:	e0b4      	b.n	800303e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed4:	4b5d      	ldr	r3, [pc, #372]	; (800304c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002edc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ede:	4b5b      	ldr	r3, [pc, #364]	; (800304c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04d      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eea:	4b58      	ldr	r3, [pc, #352]	; (800304c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002efa:	f04f 0100 	mov.w	r1, #0
 8002efe:	ea02 0800 	and.w	r8, r2, r0
 8002f02:	ea03 0901 	and.w	r9, r3, r1
 8002f06:	4640      	mov	r0, r8
 8002f08:	4649      	mov	r1, r9
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	014b      	lsls	r3, r1, #5
 8002f14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f18:	0142      	lsls	r2, r0, #5
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	ebb0 0008 	subs.w	r0, r0, r8
 8002f22:	eb61 0109 	sbc.w	r1, r1, r9
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	018b      	lsls	r3, r1, #6
 8002f30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f34:	0182      	lsls	r2, r0, #6
 8002f36:	1a12      	subs	r2, r2, r0
 8002f38:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3c:	f04f 0000 	mov.w	r0, #0
 8002f40:	f04f 0100 	mov.w	r1, #0
 8002f44:	00d9      	lsls	r1, r3, #3
 8002f46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f4a:	00d0      	lsls	r0, r2, #3
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	eb12 0208 	adds.w	r2, r2, r8
 8002f54:	eb43 0309 	adc.w	r3, r3, r9
 8002f58:	f04f 0000 	mov.w	r0, #0
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	0259      	lsls	r1, r3, #9
 8002f62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f66:	0250      	lsls	r0, r2, #9
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	f7fd fe00 	bl	8000b7c <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4613      	mov	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e04a      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b31      	ldr	r3, [pc, #196]	; (800304c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	ea02 0400 	and.w	r4, r2, r0
 8002f9e:	ea03 0501 	and.w	r5, r3, r1
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	014b      	lsls	r3, r1, #5
 8002fb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fb4:	0142      	lsls	r2, r0, #5
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	1b00      	subs	r0, r0, r4
 8002fbc:	eb61 0105 	sbc.w	r1, r1, r5
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	018b      	lsls	r3, r1, #6
 8002fca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fce:	0182      	lsls	r2, r0, #6
 8002fd0:	1a12      	subs	r2, r2, r0
 8002fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd6:	f04f 0000 	mov.w	r0, #0
 8002fda:	f04f 0100 	mov.w	r1, #0
 8002fde:	00d9      	lsls	r1, r3, #3
 8002fe0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fe4:	00d0      	lsls	r0, r2, #3
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	1912      	adds	r2, r2, r4
 8002fec:	eb45 0303 	adc.w	r3, r5, r3
 8002ff0:	f04f 0000 	mov.w	r0, #0
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	0299      	lsls	r1, r3, #10
 8002ffa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ffe:	0290      	lsls	r0, r2, #10
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	461a      	mov	r2, r3
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	f7fd fdb4 	bl	8000b7c <__aeabi_uldivmod>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4613      	mov	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	3301      	adds	r3, #1
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	fbb2 f3f3 	udiv	r3, r2, r3
 8003034:	60bb      	str	r3, [r7, #8]
      break;
 8003036:	e002      	b.n	800303e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800303a:	60bb      	str	r3, [r7, #8]
      break;
 800303c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303e:	68bb      	ldr	r3, [r7, #8]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800
 8003050:	00f42400 	.word	0x00f42400
 8003054:	007a1200 	.word	0x007a1200

08003058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_RCC_GetHCLKFreq+0x14>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000000 	.word	0x20000000

08003070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003074:	f7ff fff0 	bl	8003058 <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0a9b      	lsrs	r3, r3, #10
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4903      	ldr	r1, [pc, #12]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40023800 	.word	0x40023800
 8003094:	08006310 	.word	0x08006310

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800309c:	f7ff ffdc 	bl	8003058 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0b5b      	lsrs	r3, r3, #13
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4903      	ldr	r1, [pc, #12]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	08006310 	.word	0x08006310

080030c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e03f      	b.n	8003152 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe faee 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	; 0x24
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f9cb 	bl	80034a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b08a      	sub	sp, #40	; 0x28
 800315e:	af02      	add	r7, sp, #8
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b20      	cmp	r3, #32
 8003178:	d17c      	bne.n	8003274 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_UART_Transmit+0x2c>
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e075      	b.n	8003276 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_UART_Transmit+0x3e>
 8003194:	2302      	movs	r3, #2
 8003196:	e06e      	b.n	8003276 <HAL_UART_Transmit+0x11c>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2221      	movs	r2, #33	; 0x21
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ae:	f7fe fc99 	bl	8001ae4 <HAL_GetTick>
 80031b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	88fa      	ldrh	r2, [r7, #6]
 80031b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	88fa      	ldrh	r2, [r7, #6]
 80031be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c8:	d108      	bne.n	80031dc <HAL_UART_Transmit+0x82>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	e003      	b.n	80031e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031ec:	e02a      	b.n	8003244 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2200      	movs	r2, #0
 80031f6:	2180      	movs	r1, #128	; 0x80
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f8e2 	bl	80033c2 <UART_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e036      	b.n	8003276 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10b      	bne.n	8003226 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800321c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	3302      	adds	r3, #2
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	e007      	b.n	8003236 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	781a      	ldrb	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	3301      	adds	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1cf      	bne.n	80031ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2200      	movs	r2, #0
 8003256:	2140      	movs	r1, #64	; 0x40
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f8b2 	bl	80033c2 <UART_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e006      	b.n	8003276 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b08a      	sub	sp, #40	; 0x28
 8003282:	af02      	add	r7, sp, #8
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	f040 808c 	bne.w	80033b8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_UART_Receive+0x2e>
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e084      	b.n	80033ba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_UART_Receive+0x40>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e07d      	b.n	80033ba <HAL_UART_Receive+0x13c>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2222      	movs	r2, #34	; 0x22
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032da:	f7fe fc03 	bl	8001ae4 <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	88fa      	ldrh	r2, [r7, #6]
 80032ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f4:	d108      	bne.n	8003308 <HAL_UART_Receive+0x8a>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d104      	bne.n	8003308 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	e003      	b.n	8003310 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003318:	e043      	b.n	80033a2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2200      	movs	r2, #0
 8003322:	2120      	movs	r1, #32
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f84c 	bl	80033c2 <UART_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e042      	b.n	80033ba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10c      	bne.n	8003354 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	b29b      	uxth	r3, r3
 8003342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003346:	b29a      	uxth	r2, r3
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	3302      	adds	r3, #2
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	e01f      	b.n	8003394 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d007      	beq.n	800336e <HAL_UART_Receive+0xf0>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <HAL_UART_Receive+0xfe>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e008      	b.n	800338e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003388:	b2da      	uxtb	r2, r3
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3301      	adds	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1b6      	bne.n	800331a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
  }
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b090      	sub	sp, #64	; 0x40
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d2:	e050      	b.n	8003476 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033da:	d04c      	beq.n	8003476 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80033e2:	f7fe fb7f 	bl	8001ae4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d241      	bcs.n	8003476 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	330c      	adds	r3, #12
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003412:	637a      	str	r2, [r7, #52]	; 0x34
 8003414:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800341a:	e841 2300 	strex	r3, r2, [r1]
 800341e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e5      	bne.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3314      	adds	r3, #20
 800342c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	613b      	str	r3, [r7, #16]
   return(result);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	63bb      	str	r3, [r7, #56]	; 0x38
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3314      	adds	r3, #20
 8003444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003446:	623a      	str	r2, [r7, #32]
 8003448:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	69f9      	ldr	r1, [r7, #28]
 800344c:	6a3a      	ldr	r2, [r7, #32]
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	61bb      	str	r3, [r7, #24]
   return(result);
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e5      	bne.n	8003426 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e00f      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4013      	ands	r3, r2
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	bf0c      	ite	eq
 8003486:	2301      	moveq	r3, #1
 8003488:	2300      	movne	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	429a      	cmp	r2, r3
 8003492:	d09f      	beq.n	80033d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3740      	adds	r7, #64	; 0x40
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a4:	b09f      	sub	sp, #124	; 0x7c
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b6:	68d9      	ldr	r1, [r3, #12]
 80034b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	ea40 0301 	orr.w	r3, r0, r1
 80034c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80034da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034e4:	f021 010c 	bic.w	r1, r1, #12
 80034e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ee:	430b      	orrs	r3, r1
 80034f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fe:	6999      	ldr	r1, [r3, #24]
 8003500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	ea40 0301 	orr.w	r3, r0, r1
 8003508:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4bc5      	ldr	r3, [pc, #788]	; (8003824 <UART_SetConfig+0x384>)
 8003510:	429a      	cmp	r2, r3
 8003512:	d004      	beq.n	800351e <UART_SetConfig+0x7e>
 8003514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4bc3      	ldr	r3, [pc, #780]	; (8003828 <UART_SetConfig+0x388>)
 800351a:	429a      	cmp	r2, r3
 800351c:	d103      	bne.n	8003526 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800351e:	f7ff fdbb 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8003522:	6778      	str	r0, [r7, #116]	; 0x74
 8003524:	e002      	b.n	800352c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003526:	f7ff fda3 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 800352a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003534:	f040 80b6 	bne.w	80036a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353a:	461c      	mov	r4, r3
 800353c:	f04f 0500 	mov.w	r5, #0
 8003540:	4622      	mov	r2, r4
 8003542:	462b      	mov	r3, r5
 8003544:	1891      	adds	r1, r2, r2
 8003546:	6439      	str	r1, [r7, #64]	; 0x40
 8003548:	415b      	adcs	r3, r3
 800354a:	647b      	str	r3, [r7, #68]	; 0x44
 800354c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003550:	1912      	adds	r2, r2, r4
 8003552:	eb45 0303 	adc.w	r3, r5, r3
 8003556:	f04f 0000 	mov.w	r0, #0
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	00d9      	lsls	r1, r3, #3
 8003560:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003564:	00d0      	lsls	r0, r2, #3
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	1911      	adds	r1, r2, r4
 800356c:	6639      	str	r1, [r7, #96]	; 0x60
 800356e:	416b      	adcs	r3, r5
 8003570:	667b      	str	r3, [r7, #100]	; 0x64
 8003572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	461a      	mov	r2, r3
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	1891      	adds	r1, r2, r2
 800357e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003580:	415b      	adcs	r3, r3
 8003582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003588:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800358c:	f7fd faf6 	bl	8000b7c <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4ba5      	ldr	r3, [pc, #660]	; (800382c <UART_SetConfig+0x38c>)
 8003596:	fba3 2302 	umull	r2, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	011e      	lsls	r6, r3, #4
 800359e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a0:	461c      	mov	r4, r3
 80035a2:	f04f 0500 	mov.w	r5, #0
 80035a6:	4622      	mov	r2, r4
 80035a8:	462b      	mov	r3, r5
 80035aa:	1891      	adds	r1, r2, r2
 80035ac:	6339      	str	r1, [r7, #48]	; 0x30
 80035ae:	415b      	adcs	r3, r3
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
 80035b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035b6:	1912      	adds	r2, r2, r4
 80035b8:	eb45 0303 	adc.w	r3, r5, r3
 80035bc:	f04f 0000 	mov.w	r0, #0
 80035c0:	f04f 0100 	mov.w	r1, #0
 80035c4:	00d9      	lsls	r1, r3, #3
 80035c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035ca:	00d0      	lsls	r0, r2, #3
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	1911      	adds	r1, r2, r4
 80035d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80035d4:	416b      	adcs	r3, r5
 80035d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	461a      	mov	r2, r3
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	1891      	adds	r1, r2, r2
 80035e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80035e6:	415b      	adcs	r3, r3
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80035f2:	f7fd fac3 	bl	8000b7c <__aeabi_uldivmod>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4b8c      	ldr	r3, [pc, #560]	; (800382c <UART_SetConfig+0x38c>)
 80035fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	2164      	movs	r1, #100	; 0x64
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	3332      	adds	r3, #50	; 0x32
 800360e:	4a87      	ldr	r2, [pc, #540]	; (800382c <UART_SetConfig+0x38c>)
 8003610:	fba2 2303 	umull	r2, r3, r2, r3
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800361c:	441e      	add	r6, r3
 800361e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003620:	4618      	mov	r0, r3
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	1894      	adds	r4, r2, r2
 800362c:	623c      	str	r4, [r7, #32]
 800362e:	415b      	adcs	r3, r3
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003636:	1812      	adds	r2, r2, r0
 8003638:	eb41 0303 	adc.w	r3, r1, r3
 800363c:	f04f 0400 	mov.w	r4, #0
 8003640:	f04f 0500 	mov.w	r5, #0
 8003644:	00dd      	lsls	r5, r3, #3
 8003646:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800364a:	00d4      	lsls	r4, r2, #3
 800364c:	4622      	mov	r2, r4
 800364e:	462b      	mov	r3, r5
 8003650:	1814      	adds	r4, r2, r0
 8003652:	653c      	str	r4, [r7, #80]	; 0x50
 8003654:	414b      	adcs	r3, r1
 8003656:	657b      	str	r3, [r7, #84]	; 0x54
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	461a      	mov	r2, r3
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	1891      	adds	r1, r2, r2
 8003664:	61b9      	str	r1, [r7, #24]
 8003666:	415b      	adcs	r3, r3
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800366e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003672:	f7fd fa83 	bl	8000b7c <__aeabi_uldivmod>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4b6c      	ldr	r3, [pc, #432]	; (800382c <UART_SetConfig+0x38c>)
 800367c:	fba3 1302 	umull	r1, r3, r3, r2
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	2164      	movs	r1, #100	; 0x64
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	3332      	adds	r3, #50	; 0x32
 800368e:	4a67      	ldr	r2, [pc, #412]	; (800382c <UART_SetConfig+0x38c>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	f003 0207 	and.w	r2, r3, #7
 800369a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4432      	add	r2, r6
 80036a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036a2:	e0b9      	b.n	8003818 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a6:	461c      	mov	r4, r3
 80036a8:	f04f 0500 	mov.w	r5, #0
 80036ac:	4622      	mov	r2, r4
 80036ae:	462b      	mov	r3, r5
 80036b0:	1891      	adds	r1, r2, r2
 80036b2:	6139      	str	r1, [r7, #16]
 80036b4:	415b      	adcs	r3, r3
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036bc:	1912      	adds	r2, r2, r4
 80036be:	eb45 0303 	adc.w	r3, r5, r3
 80036c2:	f04f 0000 	mov.w	r0, #0
 80036c6:	f04f 0100 	mov.w	r1, #0
 80036ca:	00d9      	lsls	r1, r3, #3
 80036cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036d0:	00d0      	lsls	r0, r2, #3
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	eb12 0804 	adds.w	r8, r2, r4
 80036da:	eb43 0905 	adc.w	r9, r3, r5
 80036de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f04f 0100 	mov.w	r1, #0
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	008b      	lsls	r3, r1, #2
 80036f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036f6:	0082      	lsls	r2, r0, #2
 80036f8:	4640      	mov	r0, r8
 80036fa:	4649      	mov	r1, r9
 80036fc:	f7fd fa3e 	bl	8000b7c <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4b49      	ldr	r3, [pc, #292]	; (800382c <UART_SetConfig+0x38c>)
 8003706:	fba3 2302 	umull	r2, r3, r3, r2
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	011e      	lsls	r6, r3, #4
 800370e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003710:	4618      	mov	r0, r3
 8003712:	f04f 0100 	mov.w	r1, #0
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	1894      	adds	r4, r2, r2
 800371c:	60bc      	str	r4, [r7, #8]
 800371e:	415b      	adcs	r3, r3
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003726:	1812      	adds	r2, r2, r0
 8003728:	eb41 0303 	adc.w	r3, r1, r3
 800372c:	f04f 0400 	mov.w	r4, #0
 8003730:	f04f 0500 	mov.w	r5, #0
 8003734:	00dd      	lsls	r5, r3, #3
 8003736:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800373a:	00d4      	lsls	r4, r2, #3
 800373c:	4622      	mov	r2, r4
 800373e:	462b      	mov	r3, r5
 8003740:	1814      	adds	r4, r2, r0
 8003742:	64bc      	str	r4, [r7, #72]	; 0x48
 8003744:	414b      	adcs	r3, r1
 8003746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	008b      	lsls	r3, r1, #2
 800375c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003760:	0082      	lsls	r2, r0, #2
 8003762:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003766:	f7fd fa09 	bl	8000b7c <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4b2f      	ldr	r3, [pc, #188]	; (800382c <UART_SetConfig+0x38c>)
 8003770:	fba3 1302 	umull	r1, r3, r3, r2
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	2164      	movs	r1, #100	; 0x64
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	3332      	adds	r3, #50	; 0x32
 8003782:	4a2a      	ldr	r2, [pc, #168]	; (800382c <UART_SetConfig+0x38c>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800378e:	441e      	add	r6, r3
 8003790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003792:	4618      	mov	r0, r3
 8003794:	f04f 0100 	mov.w	r1, #0
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	1894      	adds	r4, r2, r2
 800379e:	603c      	str	r4, [r7, #0]
 80037a0:	415b      	adcs	r3, r3
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037a8:	1812      	adds	r2, r2, r0
 80037aa:	eb41 0303 	adc.w	r3, r1, r3
 80037ae:	f04f 0400 	mov.w	r4, #0
 80037b2:	f04f 0500 	mov.w	r5, #0
 80037b6:	00dd      	lsls	r5, r3, #3
 80037b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037bc:	00d4      	lsls	r4, r2, #3
 80037be:	4622      	mov	r2, r4
 80037c0:	462b      	mov	r3, r5
 80037c2:	eb12 0a00 	adds.w	sl, r2, r0
 80037c6:	eb43 0b01 	adc.w	fp, r3, r1
 80037ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	008b      	lsls	r3, r1, #2
 80037de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037e2:	0082      	lsls	r2, r0, #2
 80037e4:	4650      	mov	r0, sl
 80037e6:	4659      	mov	r1, fp
 80037e8:	f7fd f9c8 	bl	8000b7c <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <UART_SetConfig+0x38c>)
 80037f2:	fba3 1302 	umull	r1, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2164      	movs	r1, #100	; 0x64
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	3332      	adds	r3, #50	; 0x32
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <UART_SetConfig+0x38c>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4432      	add	r2, r6
 8003816:	609a      	str	r2, [r3, #8]
}
 8003818:	bf00      	nop
 800381a:	377c      	adds	r7, #124	; 0x7c
 800381c:	46bd      	mov	sp, r7
 800381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003822:	bf00      	nop
 8003824:	40011000 	.word	0x40011000
 8003828:	40011400 	.word	0x40011400
 800382c:	51eb851f 	.word	0x51eb851f

08003830 <gcvt>:
 8003830:	b530      	push	{r4, r5, lr}
 8003832:	2200      	movs	r2, #0
 8003834:	b085      	sub	sp, #20
 8003836:	460c      	mov	r4, r1
 8003838:	4605      	mov	r5, r0
 800383a:	2300      	movs	r3, #0
 800383c:	ec51 0b10 	vmov	r0, r1, d0
 8003840:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003844:	f7fd f94a 	bl	8000adc <__aeabi_dcmplt>
 8003848:	ed9d 0b02 	vldr	d0, [sp, #8]
 800384c:	4622      	mov	r2, r4
 800384e:	b118      	cbz	r0, 8003858 <gcvt+0x28>
 8003850:	232d      	movs	r3, #45	; 0x2d
 8003852:	f802 3b01 	strb.w	r3, [r2], #1
 8003856:	3d01      	subs	r5, #1
 8003858:	2300      	movs	r3, #0
 800385a:	4806      	ldr	r0, [pc, #24]	; (8003874 <gcvt+0x44>)
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	4629      	mov	r1, r5
 8003860:	2367      	movs	r3, #103	; 0x67
 8003862:	6800      	ldr	r0, [r0, #0]
 8003864:	f000 f8d4 	bl	8003a10 <_gcvt>
 8003868:	2800      	cmp	r0, #0
 800386a:	bf14      	ite	ne
 800386c:	4620      	movne	r0, r4
 800386e:	2000      	moveq	r0, #0
 8003870:	b005      	add	sp, #20
 8003872:	bd30      	pop	{r4, r5, pc}
 8003874:	2000000c 	.word	0x2000000c

08003878 <__errno>:
 8003878:	4b01      	ldr	r3, [pc, #4]	; (8003880 <__errno+0x8>)
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	2000000c 	.word	0x2000000c

08003884 <__libc_init_array>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4d0d      	ldr	r5, [pc, #52]	; (80038bc <__libc_init_array+0x38>)
 8003888:	4c0d      	ldr	r4, [pc, #52]	; (80038c0 <__libc_init_array+0x3c>)
 800388a:	1b64      	subs	r4, r4, r5
 800388c:	10a4      	asrs	r4, r4, #2
 800388e:	2600      	movs	r6, #0
 8003890:	42a6      	cmp	r6, r4
 8003892:	d109      	bne.n	80038a8 <__libc_init_array+0x24>
 8003894:	4d0b      	ldr	r5, [pc, #44]	; (80038c4 <__libc_init_array+0x40>)
 8003896:	4c0c      	ldr	r4, [pc, #48]	; (80038c8 <__libc_init_array+0x44>)
 8003898:	f002 fd1c 	bl	80062d4 <_init>
 800389c:	1b64      	subs	r4, r4, r5
 800389e:	10a4      	asrs	r4, r4, #2
 80038a0:	2600      	movs	r6, #0
 80038a2:	42a6      	cmp	r6, r4
 80038a4:	d105      	bne.n	80038b2 <__libc_init_array+0x2e>
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ac:	4798      	blx	r3
 80038ae:	3601      	adds	r6, #1
 80038b0:	e7ee      	b.n	8003890 <__libc_init_array+0xc>
 80038b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b6:	4798      	blx	r3
 80038b8:	3601      	adds	r6, #1
 80038ba:	e7f2      	b.n	80038a2 <__libc_init_array+0x1e>
 80038bc:	080065ec 	.word	0x080065ec
 80038c0:	080065ec 	.word	0x080065ec
 80038c4:	080065ec 	.word	0x080065ec
 80038c8:	080065f0 	.word	0x080065f0

080038cc <memset>:
 80038cc:	4402      	add	r2, r0
 80038ce:	4603      	mov	r3, r0
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d100      	bne.n	80038d6 <memset+0xa>
 80038d4:	4770      	bx	lr
 80038d6:	f803 1b01 	strb.w	r1, [r3], #1
 80038da:	e7f9      	b.n	80038d0 <memset+0x4>

080038dc <siprintf>:
 80038dc:	b40e      	push	{r1, r2, r3}
 80038de:	b500      	push	{lr}
 80038e0:	b09c      	sub	sp, #112	; 0x70
 80038e2:	ab1d      	add	r3, sp, #116	; 0x74
 80038e4:	9002      	str	r0, [sp, #8]
 80038e6:	9006      	str	r0, [sp, #24]
 80038e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038ec:	4809      	ldr	r0, [pc, #36]	; (8003914 <siprintf+0x38>)
 80038ee:	9107      	str	r1, [sp, #28]
 80038f0:	9104      	str	r1, [sp, #16]
 80038f2:	4909      	ldr	r1, [pc, #36]	; (8003918 <siprintf+0x3c>)
 80038f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038f8:	9105      	str	r1, [sp, #20]
 80038fa:	6800      	ldr	r0, [r0, #0]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	a902      	add	r1, sp, #8
 8003900:	f000 fdce 	bl	80044a0 <_svfiprintf_r>
 8003904:	9b02      	ldr	r3, [sp, #8]
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	b01c      	add	sp, #112	; 0x70
 800390c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003910:	b003      	add	sp, #12
 8003912:	4770      	bx	lr
 8003914:	2000000c 	.word	0x2000000c
 8003918:	ffff0208 	.word	0xffff0208

0800391c <print_e>:
 800391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800391e:	b087      	sub	sp, #28
 8003920:	ec43 2b10 	vmov	d0, r2, r3
 8003924:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003926:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800392a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800392c:	ab04      	add	r3, sp, #16
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	ab03      	add	r3, sp, #12
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	1c62      	adds	r2, r4, #1
 8003936:	ab05      	add	r3, sp, #20
 8003938:	460f      	mov	r7, r1
 800393a:	2102      	movs	r1, #2
 800393c:	f001 f908 	bl	8004b50 <_dtoa_r>
 8003940:	9a05      	ldr	r2, [sp, #20]
 8003942:	f242 730f 	movw	r3, #9999	; 0x270f
 8003946:	429a      	cmp	r2, r3
 8003948:	d105      	bne.n	8003956 <print_e+0x3a>
 800394a:	4601      	mov	r1, r0
 800394c:	4638      	mov	r0, r7
 800394e:	f001 f84b 	bl	80049e8 <strcpy>
 8003952:	b007      	add	sp, #28
 8003954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003956:	463b      	mov	r3, r7
 8003958:	7801      	ldrb	r1, [r0, #0]
 800395a:	f803 1b01 	strb.w	r1, [r3], #1
 800395e:	2c00      	cmp	r4, #0
 8003960:	bfc8      	it	gt
 8003962:	2501      	movgt	r5, #1
 8003964:	212e      	movs	r1, #46	; 0x2e
 8003966:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800396a:	b10f      	cbz	r7, 8003970 <print_e+0x54>
 800396c:	2c00      	cmp	r4, #0
 800396e:	dc37      	bgt.n	80039e0 <print_e+0xc4>
 8003970:	2e67      	cmp	r6, #103	; 0x67
 8003972:	d046      	beq.n	8003a02 <print_e+0xe6>
 8003974:	2e47      	cmp	r6, #71	; 0x47
 8003976:	d046      	beq.n	8003a06 <print_e+0xea>
 8003978:	212e      	movs	r1, #46	; 0x2e
 800397a:	2030      	movs	r0, #48	; 0x30
 800397c:	2c00      	cmp	r4, #0
 800397e:	dc38      	bgt.n	80039f2 <print_e+0xd6>
 8003980:	1e51      	subs	r1, r2, #1
 8003982:	2900      	cmp	r1, #0
 8003984:	bfb8      	it	lt
 8003986:	f1c2 0201 	rsblt	r2, r2, #1
 800398a:	4618      	mov	r0, r3
 800398c:	9105      	str	r1, [sp, #20]
 800398e:	bfbc      	itt	lt
 8003990:	212d      	movlt	r1, #45	; 0x2d
 8003992:	9205      	strlt	r2, [sp, #20]
 8003994:	f800 6b02 	strb.w	r6, [r0], #2
 8003998:	bfb8      	it	lt
 800399a:	7059      	strblt	r1, [r3, #1]
 800399c:	9905      	ldr	r1, [sp, #20]
 800399e:	bfa4      	itt	ge
 80039a0:	222b      	movge	r2, #43	; 0x2b
 80039a2:	705a      	strbge	r2, [r3, #1]
 80039a4:	2963      	cmp	r1, #99	; 0x63
 80039a6:	dd0b      	ble.n	80039c0 <print_e+0xa4>
 80039a8:	2264      	movs	r2, #100	; 0x64
 80039aa:	fb91 f2f2 	sdiv	r2, r1, r2
 80039ae:	f102 0430 	add.w	r4, r2, #48	; 0x30
 80039b2:	1cd8      	adds	r0, r3, #3
 80039b4:	709c      	strb	r4, [r3, #2]
 80039b6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80039ba:	fb03 1202 	mla	r2, r3, r2, r1
 80039be:	9205      	str	r2, [sp, #20]
 80039c0:	9a05      	ldr	r2, [sp, #20]
 80039c2:	230a      	movs	r3, #10
 80039c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80039c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80039cc:	7001      	strb	r1, [r0, #0]
 80039ce:	f06f 0109 	mvn.w	r1, #9
 80039d2:	fb01 2303 	mla	r3, r1, r3, r2
 80039d6:	3330      	adds	r3, #48	; 0x30
 80039d8:	7043      	strb	r3, [r0, #1]
 80039da:	2300      	movs	r3, #0
 80039dc:	7083      	strb	r3, [r0, #2]
 80039de:	e7b8      	b.n	8003952 <print_e+0x36>
 80039e0:	b10d      	cbz	r5, 80039e6 <print_e+0xca>
 80039e2:	f803 1b01 	strb.w	r1, [r3], #1
 80039e6:	7805      	ldrb	r5, [r0, #0]
 80039e8:	f803 5b01 	strb.w	r5, [r3], #1
 80039ec:	3c01      	subs	r4, #1
 80039ee:	2500      	movs	r5, #0
 80039f0:	e7b9      	b.n	8003966 <print_e+0x4a>
 80039f2:	b10d      	cbz	r5, 80039f8 <print_e+0xdc>
 80039f4:	f803 1b01 	strb.w	r1, [r3], #1
 80039f8:	f803 0b01 	strb.w	r0, [r3], #1
 80039fc:	3c01      	subs	r4, #1
 80039fe:	2500      	movs	r5, #0
 8003a00:	e7bc      	b.n	800397c <print_e+0x60>
 8003a02:	2665      	movs	r6, #101	; 0x65
 8003a04:	e7bc      	b.n	8003980 <print_e+0x64>
 8003a06:	2645      	movs	r6, #69	; 0x45
 8003a08:	e7ba      	b.n	8003980 <print_e+0x64>
 8003a0a:	0000      	movs	r0, r0
 8003a0c:	0000      	movs	r0, r0
	...

08003a10 <_gcvt>:
 8003a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a14:	ec55 4b10 	vmov	r4, r5, d0
 8003a18:	b088      	sub	sp, #32
 8003a1a:	4681      	mov	r9, r0
 8003a1c:	4688      	mov	r8, r1
 8003a1e:	4616      	mov	r6, r2
 8003a20:	469a      	mov	sl, r3
 8003a22:	ee10 0a10 	vmov	r0, s0
 8003a26:	2200      	movs	r2, #0
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003a2e:	f7fd f855 	bl	8000adc <__aeabi_dcmplt>
 8003a32:	b110      	cbz	r0, 8003a3a <_gcvt+0x2a>
 8003a34:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003a38:	461d      	mov	r5, r3
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7fd f841 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a46:	b138      	cbz	r0, 8003a58 <_gcvt+0x48>
 8003a48:	2330      	movs	r3, #48	; 0x30
 8003a4a:	7033      	strb	r3, [r6, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	7073      	strb	r3, [r6, #1]
 8003a50:	4630      	mov	r0, r6
 8003a52:	b008      	add	sp, #32
 8003a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a58:	a34b      	add	r3, pc, #300	; (adr r3, 8003b88 <_gcvt+0x178>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	4620      	mov	r0, r4
 8003a60:	4629      	mov	r1, r5
 8003a62:	f7fd f845 	bl	8000af0 <__aeabi_dcmple>
 8003a66:	b158      	cbz	r0, 8003a80 <_gcvt+0x70>
 8003a68:	f108 31ff 	add.w	r1, r8, #4294967295
 8003a6c:	9100      	str	r1, [sp, #0]
 8003a6e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8003a72:	4622      	mov	r2, r4
 8003a74:	462b      	mov	r3, r5
 8003a76:	4631      	mov	r1, r6
 8003a78:	4648      	mov	r0, r9
 8003a7a:	f7ff ff4f 	bl	800391c <print_e>
 8003a7e:	e7e7      	b.n	8003a50 <_gcvt+0x40>
 8003a80:	4640      	mov	r0, r8
 8003a82:	f000 fc03 	bl	800428c <_mprec_log10>
 8003a86:	4622      	mov	r2, r4
 8003a88:	ec51 0b10 	vmov	r0, r1, d0
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	f7fd f82f 	bl	8000af0 <__aeabi_dcmple>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d1e8      	bne.n	8003a68 <_gcvt+0x58>
 8003a96:	ab07      	add	r3, sp, #28
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	ab06      	add	r3, sp, #24
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	4642      	mov	r2, r8
 8003aa0:	ab05      	add	r3, sp, #20
 8003aa2:	ec45 4b10 	vmov	d0, r4, r5
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	4648      	mov	r0, r9
 8003aaa:	f001 f851 	bl	8004b50 <_dtoa_r>
 8003aae:	9a05      	ldr	r2, [sp, #20]
 8003ab0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d00e      	beq.n	8003ad6 <_gcvt+0xc6>
 8003ab8:	4633      	mov	r3, r6
 8003aba:	44b0      	add	r8, r6
 8003abc:	4604      	mov	r4, r0
 8003abe:	f810 5b01 	ldrb.w	r5, [r0], #1
 8003ac2:	9905      	ldr	r1, [sp, #20]
 8003ac4:	eba8 0203 	sub.w	r2, r8, r3
 8003ac8:	b10d      	cbz	r5, 8003ace <_gcvt+0xbe>
 8003aca:	2900      	cmp	r1, #0
 8003acc:	dc08      	bgt.n	8003ae0 <_gcvt+0xd0>
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8003ad4:	e00d      	b.n	8003af2 <_gcvt+0xe2>
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	4630      	mov	r0, r6
 8003ada:	f000 ff85 	bl	80049e8 <strcpy>
 8003ade:	e7b7      	b.n	8003a50 <_gcvt+0x40>
 8003ae0:	3901      	subs	r1, #1
 8003ae2:	f803 5b01 	strb.w	r5, [r3], #1
 8003ae6:	9105      	str	r1, [sp, #20]
 8003ae8:	e7e8      	b.n	8003abc <_gcvt+0xac>
 8003aea:	f803 cb01 	strb.w	ip, [r3], #1
 8003aee:	3a01      	subs	r2, #1
 8003af0:	2001      	movs	r0, #1
 8003af2:	2900      	cmp	r1, #0
 8003af4:	460d      	mov	r5, r1
 8003af6:	dc2a      	bgt.n	8003b4e <_gcvt+0x13e>
 8003af8:	b100      	cbz	r0, 8003afc <_gcvt+0xec>
 8003afa:	9105      	str	r1, [sp, #20]
 8003afc:	b90f      	cbnz	r7, 8003b02 <_gcvt+0xf2>
 8003afe:	7821      	ldrb	r1, [r4, #0]
 8003b00:	b311      	cbz	r1, 8003b48 <_gcvt+0x138>
 8003b02:	42b3      	cmp	r3, r6
 8003b04:	bf04      	itt	eq
 8003b06:	2130      	moveq	r1, #48	; 0x30
 8003b08:	f803 1b01 	strbeq.w	r1, [r3], #1
 8003b0c:	212e      	movs	r1, #46	; 0x2e
 8003b0e:	7019      	strb	r1, [r3, #0]
 8003b10:	9905      	ldr	r1, [sp, #20]
 8003b12:	4618      	mov	r0, r3
 8003b14:	2500      	movs	r5, #0
 8003b16:	eba1 0c03 	sub.w	ip, r1, r3
 8003b1a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8003b1e:	eb1c 0f00 	cmn.w	ip, r0
 8003b22:	d41c      	bmi.n	8003b5e <_gcvt+0x14e>
 8003b24:	2900      	cmp	r1, #0
 8003b26:	f1c1 0000 	rsb	r0, r1, #0
 8003b2a:	bfc8      	it	gt
 8003b2c:	2000      	movgt	r0, #0
 8003b2e:	f100 0c01 	add.w	ip, r0, #1
 8003b32:	4463      	add	r3, ip
 8003b34:	4401      	add	r1, r0
 8003b36:	b105      	cbz	r5, 8003b3a <_gcvt+0x12a>
 8003b38:	9105      	str	r1, [sp, #20]
 8003b3a:	1e61      	subs	r1, r4, #1
 8003b3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003b40:	b108      	cbz	r0, 8003b46 <_gcvt+0x136>
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	dc0f      	bgt.n	8003b66 <_gcvt+0x156>
 8003b46:	b9df      	cbnz	r7, 8003b80 <_gcvt+0x170>
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e780      	b.n	8003a50 <_gcvt+0x40>
 8003b4e:	2a00      	cmp	r2, #0
 8003b50:	f101 31ff 	add.w	r1, r1, #4294967295
 8003b54:	dcc9      	bgt.n	8003aea <_gcvt+0xda>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d0d0      	beq.n	8003afc <_gcvt+0xec>
 8003b5a:	9505      	str	r5, [sp, #20]
 8003b5c:	e7ce      	b.n	8003afc <_gcvt+0xec>
 8003b5e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8003b62:	2501      	movs	r5, #1
 8003b64:	e7db      	b.n	8003b1e <_gcvt+0x10e>
 8003b66:	f803 0b01 	strb.w	r0, [r3], #1
 8003b6a:	3a01      	subs	r2, #1
 8003b6c:	e7e6      	b.n	8003b3c <_gcvt+0x12c>
 8003b6e:	f801 5b01 	strb.w	r5, [r1], #1
 8003b72:	1a60      	subs	r0, r4, r1
 8003b74:	2800      	cmp	r0, #0
 8003b76:	dcfa      	bgt.n	8003b6e <_gcvt+0x15e>
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	bfa8      	it	ge
 8003b7c:	189b      	addge	r3, r3, r2
 8003b7e:	e7e3      	b.n	8003b48 <_gcvt+0x138>
 8003b80:	4619      	mov	r1, r3
 8003b82:	189c      	adds	r4, r3, r2
 8003b84:	2530      	movs	r5, #48	; 0x30
 8003b86:	e7f4      	b.n	8003b72 <_gcvt+0x162>
 8003b88:	eb1c432d 	.word	0xeb1c432d
 8003b8c:	3f1a36e2 	.word	0x3f1a36e2

08003b90 <_Balloc>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003b94:	4604      	mov	r4, r0
 8003b96:	460d      	mov	r5, r1
 8003b98:	b976      	cbnz	r6, 8003bb8 <_Balloc+0x28>
 8003b9a:	2010      	movs	r0, #16
 8003b9c:	f001 fdd6 	bl	800574c <malloc>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6260      	str	r0, [r4, #36]	; 0x24
 8003ba4:	b920      	cbnz	r0, 8003bb0 <_Balloc+0x20>
 8003ba6:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <_Balloc+0x78>)
 8003ba8:	4818      	ldr	r0, [pc, #96]	; (8003c0c <_Balloc+0x7c>)
 8003baa:	2166      	movs	r1, #102	; 0x66
 8003bac:	f000 ff24 	bl	80049f8 <__assert_func>
 8003bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003bb4:	6006      	str	r6, [r0, #0]
 8003bb6:	60c6      	str	r6, [r0, #12]
 8003bb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003bba:	68f3      	ldr	r3, [r6, #12]
 8003bbc:	b183      	cbz	r3, 8003be0 <_Balloc+0x50>
 8003bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003bc6:	b9b8      	cbnz	r0, 8003bf8 <_Balloc+0x68>
 8003bc8:	2101      	movs	r1, #1
 8003bca:	fa01 f605 	lsl.w	r6, r1, r5
 8003bce:	1d72      	adds	r2, r6, #5
 8003bd0:	0092      	lsls	r2, r2, #2
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f000 fb78 	bl	80042c8 <_calloc_r>
 8003bd8:	b160      	cbz	r0, 8003bf4 <_Balloc+0x64>
 8003bda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003bde:	e00e      	b.n	8003bfe <_Balloc+0x6e>
 8003be0:	2221      	movs	r2, #33	; 0x21
 8003be2:	2104      	movs	r1, #4
 8003be4:	4620      	mov	r0, r4
 8003be6:	f000 fb6f 	bl	80042c8 <_calloc_r>
 8003bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bec:	60f0      	str	r0, [r6, #12]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e4      	bne.n	8003bbe <_Balloc+0x2e>
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
 8003bf8:	6802      	ldr	r2, [r0, #0]
 8003bfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003c04:	e7f7      	b.n	8003bf6 <_Balloc+0x66>
 8003c06:	bf00      	nop
 8003c08:	0800631c 	.word	0x0800631c
 8003c0c:	08006333 	.word	0x08006333

08003c10 <_Bfree>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003c14:	4605      	mov	r5, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	b976      	cbnz	r6, 8003c38 <_Bfree+0x28>
 8003c1a:	2010      	movs	r0, #16
 8003c1c:	f001 fd96 	bl	800574c <malloc>
 8003c20:	4602      	mov	r2, r0
 8003c22:	6268      	str	r0, [r5, #36]	; 0x24
 8003c24:	b920      	cbnz	r0, 8003c30 <_Bfree+0x20>
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <_Bfree+0x3c>)
 8003c28:	4809      	ldr	r0, [pc, #36]	; (8003c50 <_Bfree+0x40>)
 8003c2a:	218a      	movs	r1, #138	; 0x8a
 8003c2c:	f000 fee4 	bl	80049f8 <__assert_func>
 8003c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003c34:	6006      	str	r6, [r0, #0]
 8003c36:	60c6      	str	r6, [r0, #12]
 8003c38:	b13c      	cbz	r4, 8003c4a <_Bfree+0x3a>
 8003c3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c3c:	6862      	ldr	r2, [r4, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c44:	6021      	str	r1, [r4, #0]
 8003c46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	0800631c 	.word	0x0800631c
 8003c50:	08006333 	.word	0x08006333

08003c54 <__multadd>:
 8003c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c58:	690e      	ldr	r6, [r1, #16]
 8003c5a:	4607      	mov	r7, r0
 8003c5c:	4698      	mov	r8, r3
 8003c5e:	460c      	mov	r4, r1
 8003c60:	f101 0014 	add.w	r0, r1, #20
 8003c64:	2300      	movs	r3, #0
 8003c66:	6805      	ldr	r5, [r0, #0]
 8003c68:	b2a9      	uxth	r1, r5
 8003c6a:	fb02 8101 	mla	r1, r2, r1, r8
 8003c6e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003c72:	0c2d      	lsrs	r5, r5, #16
 8003c74:	fb02 c505 	mla	r5, r2, r5, ip
 8003c78:	b289      	uxth	r1, r1
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003c80:	429e      	cmp	r6, r3
 8003c82:	f840 1b04 	str.w	r1, [r0], #4
 8003c86:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003c8a:	dcec      	bgt.n	8003c66 <__multadd+0x12>
 8003c8c:	f1b8 0f00 	cmp.w	r8, #0
 8003c90:	d022      	beq.n	8003cd8 <__multadd+0x84>
 8003c92:	68a3      	ldr	r3, [r4, #8]
 8003c94:	42b3      	cmp	r3, r6
 8003c96:	dc19      	bgt.n	8003ccc <__multadd+0x78>
 8003c98:	6861      	ldr	r1, [r4, #4]
 8003c9a:	4638      	mov	r0, r7
 8003c9c:	3101      	adds	r1, #1
 8003c9e:	f7ff ff77 	bl	8003b90 <_Balloc>
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	b928      	cbnz	r0, 8003cb2 <__multadd+0x5e>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <__multadd+0x8c>)
 8003caa:	480e      	ldr	r0, [pc, #56]	; (8003ce4 <__multadd+0x90>)
 8003cac:	21b5      	movs	r1, #181	; 0xb5
 8003cae:	f000 fea3 	bl	80049f8 <__assert_func>
 8003cb2:	6922      	ldr	r2, [r4, #16]
 8003cb4:	3202      	adds	r2, #2
 8003cb6:	f104 010c 	add.w	r1, r4, #12
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	300c      	adds	r0, #12
 8003cbe:	f001 fd4d 	bl	800575c <memcpy>
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	f7ff ffa3 	bl	8003c10 <_Bfree>
 8003cca:	462c      	mov	r4, r5
 8003ccc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	f8c3 8014 	str.w	r8, [r3, #20]
 8003cd6:	6126      	str	r6, [r4, #16]
 8003cd8:	4620      	mov	r0, r4
 8003cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cde:	bf00      	nop
 8003ce0:	08006393 	.word	0x08006393
 8003ce4:	08006333 	.word	0x08006333

08003ce8 <__hi0bits>:
 8003ce8:	0c03      	lsrs	r3, r0, #16
 8003cea:	041b      	lsls	r3, r3, #16
 8003cec:	b9d3      	cbnz	r3, 8003d24 <__hi0bits+0x3c>
 8003cee:	0400      	lsls	r0, r0, #16
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003cf6:	bf04      	itt	eq
 8003cf8:	0200      	lsleq	r0, r0, #8
 8003cfa:	3308      	addeq	r3, #8
 8003cfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003d00:	bf04      	itt	eq
 8003d02:	0100      	lsleq	r0, r0, #4
 8003d04:	3304      	addeq	r3, #4
 8003d06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003d0a:	bf04      	itt	eq
 8003d0c:	0080      	lsleq	r0, r0, #2
 8003d0e:	3302      	addeq	r3, #2
 8003d10:	2800      	cmp	r0, #0
 8003d12:	db05      	blt.n	8003d20 <__hi0bits+0x38>
 8003d14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003d18:	f103 0301 	add.w	r3, r3, #1
 8003d1c:	bf08      	it	eq
 8003d1e:	2320      	moveq	r3, #32
 8003d20:	4618      	mov	r0, r3
 8003d22:	4770      	bx	lr
 8003d24:	2300      	movs	r3, #0
 8003d26:	e7e4      	b.n	8003cf2 <__hi0bits+0xa>

08003d28 <__lo0bits>:
 8003d28:	6803      	ldr	r3, [r0, #0]
 8003d2a:	f013 0207 	ands.w	r2, r3, #7
 8003d2e:	4601      	mov	r1, r0
 8003d30:	d00b      	beq.n	8003d4a <__lo0bits+0x22>
 8003d32:	07da      	lsls	r2, r3, #31
 8003d34:	d424      	bmi.n	8003d80 <__lo0bits+0x58>
 8003d36:	0798      	lsls	r0, r3, #30
 8003d38:	bf49      	itett	mi
 8003d3a:	085b      	lsrmi	r3, r3, #1
 8003d3c:	089b      	lsrpl	r3, r3, #2
 8003d3e:	2001      	movmi	r0, #1
 8003d40:	600b      	strmi	r3, [r1, #0]
 8003d42:	bf5c      	itt	pl
 8003d44:	600b      	strpl	r3, [r1, #0]
 8003d46:	2002      	movpl	r0, #2
 8003d48:	4770      	bx	lr
 8003d4a:	b298      	uxth	r0, r3
 8003d4c:	b9b0      	cbnz	r0, 8003d7c <__lo0bits+0x54>
 8003d4e:	0c1b      	lsrs	r3, r3, #16
 8003d50:	2010      	movs	r0, #16
 8003d52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003d56:	bf04      	itt	eq
 8003d58:	0a1b      	lsreq	r3, r3, #8
 8003d5a:	3008      	addeq	r0, #8
 8003d5c:	071a      	lsls	r2, r3, #28
 8003d5e:	bf04      	itt	eq
 8003d60:	091b      	lsreq	r3, r3, #4
 8003d62:	3004      	addeq	r0, #4
 8003d64:	079a      	lsls	r2, r3, #30
 8003d66:	bf04      	itt	eq
 8003d68:	089b      	lsreq	r3, r3, #2
 8003d6a:	3002      	addeq	r0, #2
 8003d6c:	07da      	lsls	r2, r3, #31
 8003d6e:	d403      	bmi.n	8003d78 <__lo0bits+0x50>
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	f100 0001 	add.w	r0, r0, #1
 8003d76:	d005      	beq.n	8003d84 <__lo0bits+0x5c>
 8003d78:	600b      	str	r3, [r1, #0]
 8003d7a:	4770      	bx	lr
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	e7e8      	b.n	8003d52 <__lo0bits+0x2a>
 8003d80:	2000      	movs	r0, #0
 8003d82:	4770      	bx	lr
 8003d84:	2020      	movs	r0, #32
 8003d86:	4770      	bx	lr

08003d88 <__i2b>:
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	f7ff feff 	bl	8003b90 <_Balloc>
 8003d92:	4602      	mov	r2, r0
 8003d94:	b928      	cbnz	r0, 8003da2 <__i2b+0x1a>
 8003d96:	4b05      	ldr	r3, [pc, #20]	; (8003dac <__i2b+0x24>)
 8003d98:	4805      	ldr	r0, [pc, #20]	; (8003db0 <__i2b+0x28>)
 8003d9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003d9e:	f000 fe2b 	bl	80049f8 <__assert_func>
 8003da2:	2301      	movs	r3, #1
 8003da4:	6144      	str	r4, [r0, #20]
 8003da6:	6103      	str	r3, [r0, #16]
 8003da8:	bd10      	pop	{r4, pc}
 8003daa:	bf00      	nop
 8003dac:	08006393 	.word	0x08006393
 8003db0:	08006333 	.word	0x08006333

08003db4 <__multiply>:
 8003db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db8:	4614      	mov	r4, r2
 8003dba:	690a      	ldr	r2, [r1, #16]
 8003dbc:	6923      	ldr	r3, [r4, #16]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	bfb8      	it	lt
 8003dc2:	460b      	movlt	r3, r1
 8003dc4:	460d      	mov	r5, r1
 8003dc6:	bfbc      	itt	lt
 8003dc8:	4625      	movlt	r5, r4
 8003dca:	461c      	movlt	r4, r3
 8003dcc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003dd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003dd4:	68ab      	ldr	r3, [r5, #8]
 8003dd6:	6869      	ldr	r1, [r5, #4]
 8003dd8:	eb0a 0709 	add.w	r7, sl, r9
 8003ddc:	42bb      	cmp	r3, r7
 8003dde:	b085      	sub	sp, #20
 8003de0:	bfb8      	it	lt
 8003de2:	3101      	addlt	r1, #1
 8003de4:	f7ff fed4 	bl	8003b90 <_Balloc>
 8003de8:	b930      	cbnz	r0, 8003df8 <__multiply+0x44>
 8003dea:	4602      	mov	r2, r0
 8003dec:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <__multiply+0x144>)
 8003dee:	4843      	ldr	r0, [pc, #268]	; (8003efc <__multiply+0x148>)
 8003df0:	f240 115d 	movw	r1, #349	; 0x15d
 8003df4:	f000 fe00 	bl	80049f8 <__assert_func>
 8003df8:	f100 0614 	add.w	r6, r0, #20
 8003dfc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8003e00:	4633      	mov	r3, r6
 8003e02:	2200      	movs	r2, #0
 8003e04:	4543      	cmp	r3, r8
 8003e06:	d31e      	bcc.n	8003e46 <__multiply+0x92>
 8003e08:	f105 0c14 	add.w	ip, r5, #20
 8003e0c:	f104 0314 	add.w	r3, r4, #20
 8003e10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003e14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8003e18:	9202      	str	r2, [sp, #8]
 8003e1a:	ebac 0205 	sub.w	r2, ip, r5
 8003e1e:	3a15      	subs	r2, #21
 8003e20:	f022 0203 	bic.w	r2, r2, #3
 8003e24:	3204      	adds	r2, #4
 8003e26:	f105 0115 	add.w	r1, r5, #21
 8003e2a:	458c      	cmp	ip, r1
 8003e2c:	bf38      	it	cc
 8003e2e:	2204      	movcc	r2, #4
 8003e30:	9201      	str	r2, [sp, #4]
 8003e32:	9a02      	ldr	r2, [sp, #8]
 8003e34:	9303      	str	r3, [sp, #12]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d808      	bhi.n	8003e4c <__multiply+0x98>
 8003e3a:	2f00      	cmp	r7, #0
 8003e3c:	dc55      	bgt.n	8003eea <__multiply+0x136>
 8003e3e:	6107      	str	r7, [r0, #16]
 8003e40:	b005      	add	sp, #20
 8003e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e46:	f843 2b04 	str.w	r2, [r3], #4
 8003e4a:	e7db      	b.n	8003e04 <__multiply+0x50>
 8003e4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8003e50:	f1ba 0f00 	cmp.w	sl, #0
 8003e54:	d020      	beq.n	8003e98 <__multiply+0xe4>
 8003e56:	f105 0e14 	add.w	lr, r5, #20
 8003e5a:	46b1      	mov	r9, r6
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003e62:	f8d9 b000 	ldr.w	fp, [r9]
 8003e66:	b2a1      	uxth	r1, r4
 8003e68:	fa1f fb8b 	uxth.w	fp, fp
 8003e6c:	fb0a b101 	mla	r1, sl, r1, fp
 8003e70:	4411      	add	r1, r2
 8003e72:	f8d9 2000 	ldr.w	r2, [r9]
 8003e76:	0c24      	lsrs	r4, r4, #16
 8003e78:	0c12      	lsrs	r2, r2, #16
 8003e7a:	fb0a 2404 	mla	r4, sl, r4, r2
 8003e7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8003e82:	b289      	uxth	r1, r1
 8003e84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003e88:	45f4      	cmp	ip, lr
 8003e8a:	f849 1b04 	str.w	r1, [r9], #4
 8003e8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8003e92:	d8e4      	bhi.n	8003e5e <__multiply+0xaa>
 8003e94:	9901      	ldr	r1, [sp, #4]
 8003e96:	5072      	str	r2, [r6, r1]
 8003e98:	9a03      	ldr	r2, [sp, #12]
 8003e9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	f1b9 0f00 	cmp.w	r9, #0
 8003ea4:	d01f      	beq.n	8003ee6 <__multiply+0x132>
 8003ea6:	6834      	ldr	r4, [r6, #0]
 8003ea8:	f105 0114 	add.w	r1, r5, #20
 8003eac:	46b6      	mov	lr, r6
 8003eae:	f04f 0a00 	mov.w	sl, #0
 8003eb2:	880a      	ldrh	r2, [r1, #0]
 8003eb4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003eb8:	fb09 b202 	mla	r2, r9, r2, fp
 8003ebc:	4492      	add	sl, r2
 8003ebe:	b2a4      	uxth	r4, r4
 8003ec0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003ec4:	f84e 4b04 	str.w	r4, [lr], #4
 8003ec8:	f851 4b04 	ldr.w	r4, [r1], #4
 8003ecc:	f8be 2000 	ldrh.w	r2, [lr]
 8003ed0:	0c24      	lsrs	r4, r4, #16
 8003ed2:	fb09 2404 	mla	r4, r9, r4, r2
 8003ed6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8003eda:	458c      	cmp	ip, r1
 8003edc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003ee0:	d8e7      	bhi.n	8003eb2 <__multiply+0xfe>
 8003ee2:	9a01      	ldr	r2, [sp, #4]
 8003ee4:	50b4      	str	r4, [r6, r2]
 8003ee6:	3604      	adds	r6, #4
 8003ee8:	e7a3      	b.n	8003e32 <__multiply+0x7e>
 8003eea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1a5      	bne.n	8003e3e <__multiply+0x8a>
 8003ef2:	3f01      	subs	r7, #1
 8003ef4:	e7a1      	b.n	8003e3a <__multiply+0x86>
 8003ef6:	bf00      	nop
 8003ef8:	08006393 	.word	0x08006393
 8003efc:	08006333 	.word	0x08006333

08003f00 <__pow5mult>:
 8003f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f04:	4615      	mov	r5, r2
 8003f06:	f012 0203 	ands.w	r2, r2, #3
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	460f      	mov	r7, r1
 8003f0e:	d007      	beq.n	8003f20 <__pow5mult+0x20>
 8003f10:	4c25      	ldr	r4, [pc, #148]	; (8003fa8 <__pow5mult+0xa8>)
 8003f12:	3a01      	subs	r2, #1
 8003f14:	2300      	movs	r3, #0
 8003f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003f1a:	f7ff fe9b 	bl	8003c54 <__multadd>
 8003f1e:	4607      	mov	r7, r0
 8003f20:	10ad      	asrs	r5, r5, #2
 8003f22:	d03d      	beq.n	8003fa0 <__pow5mult+0xa0>
 8003f24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003f26:	b97c      	cbnz	r4, 8003f48 <__pow5mult+0x48>
 8003f28:	2010      	movs	r0, #16
 8003f2a:	f001 fc0f 	bl	800574c <malloc>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	6270      	str	r0, [r6, #36]	; 0x24
 8003f32:	b928      	cbnz	r0, 8003f40 <__pow5mult+0x40>
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <__pow5mult+0xac>)
 8003f36:	481e      	ldr	r0, [pc, #120]	; (8003fb0 <__pow5mult+0xb0>)
 8003f38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003f3c:	f000 fd5c 	bl	80049f8 <__assert_func>
 8003f40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003f44:	6004      	str	r4, [r0, #0]
 8003f46:	60c4      	str	r4, [r0, #12]
 8003f48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003f4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003f50:	b94c      	cbnz	r4, 8003f66 <__pow5mult+0x66>
 8003f52:	f240 2171 	movw	r1, #625	; 0x271
 8003f56:	4630      	mov	r0, r6
 8003f58:	f7ff ff16 	bl	8003d88 <__i2b>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003f62:	4604      	mov	r4, r0
 8003f64:	6003      	str	r3, [r0, #0]
 8003f66:	f04f 0900 	mov.w	r9, #0
 8003f6a:	07eb      	lsls	r3, r5, #31
 8003f6c:	d50a      	bpl.n	8003f84 <__pow5mult+0x84>
 8003f6e:	4639      	mov	r1, r7
 8003f70:	4622      	mov	r2, r4
 8003f72:	4630      	mov	r0, r6
 8003f74:	f7ff ff1e 	bl	8003db4 <__multiply>
 8003f78:	4639      	mov	r1, r7
 8003f7a:	4680      	mov	r8, r0
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f7ff fe47 	bl	8003c10 <_Bfree>
 8003f82:	4647      	mov	r7, r8
 8003f84:	106d      	asrs	r5, r5, #1
 8003f86:	d00b      	beq.n	8003fa0 <__pow5mult+0xa0>
 8003f88:	6820      	ldr	r0, [r4, #0]
 8003f8a:	b938      	cbnz	r0, 8003f9c <__pow5mult+0x9c>
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	4621      	mov	r1, r4
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7ff ff0f 	bl	8003db4 <__multiply>
 8003f96:	6020      	str	r0, [r4, #0]
 8003f98:	f8c0 9000 	str.w	r9, [r0]
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	e7e4      	b.n	8003f6a <__pow5mult+0x6a>
 8003fa0:	4638      	mov	r0, r7
 8003fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fa6:	bf00      	nop
 8003fa8:	08006498 	.word	0x08006498
 8003fac:	0800631c 	.word	0x0800631c
 8003fb0:	08006333 	.word	0x08006333

08003fb4 <__lshift>:
 8003fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb8:	460c      	mov	r4, r1
 8003fba:	6849      	ldr	r1, [r1, #4]
 8003fbc:	6923      	ldr	r3, [r4, #16]
 8003fbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003fc2:	68a3      	ldr	r3, [r4, #8]
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	4691      	mov	r9, r2
 8003fc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003fcc:	f108 0601 	add.w	r6, r8, #1
 8003fd0:	42b3      	cmp	r3, r6
 8003fd2:	db0b      	blt.n	8003fec <__lshift+0x38>
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	f7ff fddb 	bl	8003b90 <_Balloc>
 8003fda:	4605      	mov	r5, r0
 8003fdc:	b948      	cbnz	r0, 8003ff2 <__lshift+0x3e>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	4b28      	ldr	r3, [pc, #160]	; (8004084 <__lshift+0xd0>)
 8003fe2:	4829      	ldr	r0, [pc, #164]	; (8004088 <__lshift+0xd4>)
 8003fe4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003fe8:	f000 fd06 	bl	80049f8 <__assert_func>
 8003fec:	3101      	adds	r1, #1
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	e7ee      	b.n	8003fd0 <__lshift+0x1c>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f100 0114 	add.w	r1, r0, #20
 8003ff8:	f100 0210 	add.w	r2, r0, #16
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	4553      	cmp	r3, sl
 8004000:	db33      	blt.n	800406a <__lshift+0xb6>
 8004002:	6920      	ldr	r0, [r4, #16]
 8004004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004008:	f104 0314 	add.w	r3, r4, #20
 800400c:	f019 091f 	ands.w	r9, r9, #31
 8004010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004014:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004018:	d02b      	beq.n	8004072 <__lshift+0xbe>
 800401a:	f1c9 0e20 	rsb	lr, r9, #32
 800401e:	468a      	mov	sl, r1
 8004020:	2200      	movs	r2, #0
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	fa00 f009 	lsl.w	r0, r0, r9
 8004028:	4302      	orrs	r2, r0
 800402a:	f84a 2b04 	str.w	r2, [sl], #4
 800402e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004032:	459c      	cmp	ip, r3
 8004034:	fa22 f20e 	lsr.w	r2, r2, lr
 8004038:	d8f3      	bhi.n	8004022 <__lshift+0x6e>
 800403a:	ebac 0304 	sub.w	r3, ip, r4
 800403e:	3b15      	subs	r3, #21
 8004040:	f023 0303 	bic.w	r3, r3, #3
 8004044:	3304      	adds	r3, #4
 8004046:	f104 0015 	add.w	r0, r4, #21
 800404a:	4584      	cmp	ip, r0
 800404c:	bf38      	it	cc
 800404e:	2304      	movcc	r3, #4
 8004050:	50ca      	str	r2, [r1, r3]
 8004052:	b10a      	cbz	r2, 8004058 <__lshift+0xa4>
 8004054:	f108 0602 	add.w	r6, r8, #2
 8004058:	3e01      	subs	r6, #1
 800405a:	4638      	mov	r0, r7
 800405c:	612e      	str	r6, [r5, #16]
 800405e:	4621      	mov	r1, r4
 8004060:	f7ff fdd6 	bl	8003c10 <_Bfree>
 8004064:	4628      	mov	r0, r5
 8004066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800406a:	f842 0f04 	str.w	r0, [r2, #4]!
 800406e:	3301      	adds	r3, #1
 8004070:	e7c5      	b.n	8003ffe <__lshift+0x4a>
 8004072:	3904      	subs	r1, #4
 8004074:	f853 2b04 	ldr.w	r2, [r3], #4
 8004078:	f841 2f04 	str.w	r2, [r1, #4]!
 800407c:	459c      	cmp	ip, r3
 800407e:	d8f9      	bhi.n	8004074 <__lshift+0xc0>
 8004080:	e7ea      	b.n	8004058 <__lshift+0xa4>
 8004082:	bf00      	nop
 8004084:	08006393 	.word	0x08006393
 8004088:	08006333 	.word	0x08006333

0800408c <__mcmp>:
 800408c:	b530      	push	{r4, r5, lr}
 800408e:	6902      	ldr	r2, [r0, #16]
 8004090:	690c      	ldr	r4, [r1, #16]
 8004092:	1b12      	subs	r2, r2, r4
 8004094:	d10e      	bne.n	80040b4 <__mcmp+0x28>
 8004096:	f100 0314 	add.w	r3, r0, #20
 800409a:	3114      	adds	r1, #20
 800409c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80040a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80040a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80040a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80040ac:	42a5      	cmp	r5, r4
 80040ae:	d003      	beq.n	80040b8 <__mcmp+0x2c>
 80040b0:	d305      	bcc.n	80040be <__mcmp+0x32>
 80040b2:	2201      	movs	r2, #1
 80040b4:	4610      	mov	r0, r2
 80040b6:	bd30      	pop	{r4, r5, pc}
 80040b8:	4283      	cmp	r3, r0
 80040ba:	d3f3      	bcc.n	80040a4 <__mcmp+0x18>
 80040bc:	e7fa      	b.n	80040b4 <__mcmp+0x28>
 80040be:	f04f 32ff 	mov.w	r2, #4294967295
 80040c2:	e7f7      	b.n	80040b4 <__mcmp+0x28>

080040c4 <__mdiff>:
 80040c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c8:	460c      	mov	r4, r1
 80040ca:	4606      	mov	r6, r0
 80040cc:	4611      	mov	r1, r2
 80040ce:	4620      	mov	r0, r4
 80040d0:	4617      	mov	r7, r2
 80040d2:	f7ff ffdb 	bl	800408c <__mcmp>
 80040d6:	1e05      	subs	r5, r0, #0
 80040d8:	d110      	bne.n	80040fc <__mdiff+0x38>
 80040da:	4629      	mov	r1, r5
 80040dc:	4630      	mov	r0, r6
 80040de:	f7ff fd57 	bl	8003b90 <_Balloc>
 80040e2:	b930      	cbnz	r0, 80040f2 <__mdiff+0x2e>
 80040e4:	4b39      	ldr	r3, [pc, #228]	; (80041cc <__mdiff+0x108>)
 80040e6:	4602      	mov	r2, r0
 80040e8:	f240 2132 	movw	r1, #562	; 0x232
 80040ec:	4838      	ldr	r0, [pc, #224]	; (80041d0 <__mdiff+0x10c>)
 80040ee:	f000 fc83 	bl	80049f8 <__assert_func>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80040f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fc:	bfa4      	itt	ge
 80040fe:	463b      	movge	r3, r7
 8004100:	4627      	movge	r7, r4
 8004102:	4630      	mov	r0, r6
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	bfa6      	itte	ge
 8004108:	461c      	movge	r4, r3
 800410a:	2500      	movge	r5, #0
 800410c:	2501      	movlt	r5, #1
 800410e:	f7ff fd3f 	bl	8003b90 <_Balloc>
 8004112:	b920      	cbnz	r0, 800411e <__mdiff+0x5a>
 8004114:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <__mdiff+0x108>)
 8004116:	4602      	mov	r2, r0
 8004118:	f44f 7110 	mov.w	r1, #576	; 0x240
 800411c:	e7e6      	b.n	80040ec <__mdiff+0x28>
 800411e:	693e      	ldr	r6, [r7, #16]
 8004120:	60c5      	str	r5, [r0, #12]
 8004122:	6925      	ldr	r5, [r4, #16]
 8004124:	f107 0114 	add.w	r1, r7, #20
 8004128:	f104 0914 	add.w	r9, r4, #20
 800412c:	f100 0e14 	add.w	lr, r0, #20
 8004130:	f107 0210 	add.w	r2, r7, #16
 8004134:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004138:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800413c:	46f2      	mov	sl, lr
 800413e:	2700      	movs	r7, #0
 8004140:	f859 3b04 	ldr.w	r3, [r9], #4
 8004144:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004148:	fa1f f883 	uxth.w	r8, r3
 800414c:	fa17 f78b 	uxtah	r7, r7, fp
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	eba7 0808 	sub.w	r8, r7, r8
 8004156:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800415a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800415e:	fa1f f888 	uxth.w	r8, r8
 8004162:	141f      	asrs	r7, r3, #16
 8004164:	454d      	cmp	r5, r9
 8004166:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800416a:	f84a 3b04 	str.w	r3, [sl], #4
 800416e:	d8e7      	bhi.n	8004140 <__mdiff+0x7c>
 8004170:	1b2b      	subs	r3, r5, r4
 8004172:	3b15      	subs	r3, #21
 8004174:	f023 0303 	bic.w	r3, r3, #3
 8004178:	3304      	adds	r3, #4
 800417a:	3415      	adds	r4, #21
 800417c:	42a5      	cmp	r5, r4
 800417e:	bf38      	it	cc
 8004180:	2304      	movcc	r3, #4
 8004182:	4419      	add	r1, r3
 8004184:	4473      	add	r3, lr
 8004186:	469e      	mov	lr, r3
 8004188:	460d      	mov	r5, r1
 800418a:	4565      	cmp	r5, ip
 800418c:	d30e      	bcc.n	80041ac <__mdiff+0xe8>
 800418e:	f10c 0203 	add.w	r2, ip, #3
 8004192:	1a52      	subs	r2, r2, r1
 8004194:	f022 0203 	bic.w	r2, r2, #3
 8004198:	3903      	subs	r1, #3
 800419a:	458c      	cmp	ip, r1
 800419c:	bf38      	it	cc
 800419e:	2200      	movcc	r2, #0
 80041a0:	441a      	add	r2, r3
 80041a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80041a6:	b17b      	cbz	r3, 80041c8 <__mdiff+0x104>
 80041a8:	6106      	str	r6, [r0, #16]
 80041aa:	e7a5      	b.n	80040f8 <__mdiff+0x34>
 80041ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80041b0:	fa17 f488 	uxtah	r4, r7, r8
 80041b4:	1422      	asrs	r2, r4, #16
 80041b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80041ba:	b2a4      	uxth	r4, r4
 80041bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80041c0:	f84e 4b04 	str.w	r4, [lr], #4
 80041c4:	1417      	asrs	r7, r2, #16
 80041c6:	e7e0      	b.n	800418a <__mdiff+0xc6>
 80041c8:	3e01      	subs	r6, #1
 80041ca:	e7ea      	b.n	80041a2 <__mdiff+0xde>
 80041cc:	08006393 	.word	0x08006393
 80041d0:	08006333 	.word	0x08006333

080041d4 <__d2b>:
 80041d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80041d8:	4689      	mov	r9, r1
 80041da:	2101      	movs	r1, #1
 80041dc:	ec57 6b10 	vmov	r6, r7, d0
 80041e0:	4690      	mov	r8, r2
 80041e2:	f7ff fcd5 	bl	8003b90 <_Balloc>
 80041e6:	4604      	mov	r4, r0
 80041e8:	b930      	cbnz	r0, 80041f8 <__d2b+0x24>
 80041ea:	4602      	mov	r2, r0
 80041ec:	4b25      	ldr	r3, [pc, #148]	; (8004284 <__d2b+0xb0>)
 80041ee:	4826      	ldr	r0, [pc, #152]	; (8004288 <__d2b+0xb4>)
 80041f0:	f240 310a 	movw	r1, #778	; 0x30a
 80041f4:	f000 fc00 	bl	80049f8 <__assert_func>
 80041f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80041fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004200:	bb35      	cbnz	r5, 8004250 <__d2b+0x7c>
 8004202:	2e00      	cmp	r6, #0
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	d028      	beq.n	800425a <__d2b+0x86>
 8004208:	4668      	mov	r0, sp
 800420a:	9600      	str	r6, [sp, #0]
 800420c:	f7ff fd8c 	bl	8003d28 <__lo0bits>
 8004210:	9900      	ldr	r1, [sp, #0]
 8004212:	b300      	cbz	r0, 8004256 <__d2b+0x82>
 8004214:	9a01      	ldr	r2, [sp, #4]
 8004216:	f1c0 0320 	rsb	r3, r0, #32
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	430b      	orrs	r3, r1
 8004220:	40c2      	lsrs	r2, r0
 8004222:	6163      	str	r3, [r4, #20]
 8004224:	9201      	str	r2, [sp, #4]
 8004226:	9b01      	ldr	r3, [sp, #4]
 8004228:	61a3      	str	r3, [r4, #24]
 800422a:	2b00      	cmp	r3, #0
 800422c:	bf14      	ite	ne
 800422e:	2202      	movne	r2, #2
 8004230:	2201      	moveq	r2, #1
 8004232:	6122      	str	r2, [r4, #16]
 8004234:	b1d5      	cbz	r5, 800426c <__d2b+0x98>
 8004236:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800423a:	4405      	add	r5, r0
 800423c:	f8c9 5000 	str.w	r5, [r9]
 8004240:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004244:	f8c8 0000 	str.w	r0, [r8]
 8004248:	4620      	mov	r0, r4
 800424a:	b003      	add	sp, #12
 800424c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004254:	e7d5      	b.n	8004202 <__d2b+0x2e>
 8004256:	6161      	str	r1, [r4, #20]
 8004258:	e7e5      	b.n	8004226 <__d2b+0x52>
 800425a:	a801      	add	r0, sp, #4
 800425c:	f7ff fd64 	bl	8003d28 <__lo0bits>
 8004260:	9b01      	ldr	r3, [sp, #4]
 8004262:	6163      	str	r3, [r4, #20]
 8004264:	2201      	movs	r2, #1
 8004266:	6122      	str	r2, [r4, #16]
 8004268:	3020      	adds	r0, #32
 800426a:	e7e3      	b.n	8004234 <__d2b+0x60>
 800426c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004270:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004274:	f8c9 0000 	str.w	r0, [r9]
 8004278:	6918      	ldr	r0, [r3, #16]
 800427a:	f7ff fd35 	bl	8003ce8 <__hi0bits>
 800427e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004282:	e7df      	b.n	8004244 <__d2b+0x70>
 8004284:	08006393 	.word	0x08006393
 8004288:	08006333 	.word	0x08006333

0800428c <_mprec_log10>:
 800428c:	2817      	cmp	r0, #23
 800428e:	b5d0      	push	{r4, r6, r7, lr}
 8004290:	4604      	mov	r4, r0
 8004292:	dc07      	bgt.n	80042a4 <_mprec_log10+0x18>
 8004294:	4809      	ldr	r0, [pc, #36]	; (80042bc <_mprec_log10+0x30>)
 8004296:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800429a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800429e:	ec41 0b10 	vmov	d0, r0, r1
 80042a2:	bdd0      	pop	{r4, r6, r7, pc}
 80042a4:	4906      	ldr	r1, [pc, #24]	; (80042c0 <_mprec_log10+0x34>)
 80042a6:	4f07      	ldr	r7, [pc, #28]	; (80042c4 <_mprec_log10+0x38>)
 80042a8:	2000      	movs	r0, #0
 80042aa:	2600      	movs	r6, #0
 80042ac:	4632      	mov	r2, r6
 80042ae:	463b      	mov	r3, r7
 80042b0:	f7fc f9a2 	bl	80005f8 <__aeabi_dmul>
 80042b4:	3c01      	subs	r4, #1
 80042b6:	d1f9      	bne.n	80042ac <_mprec_log10+0x20>
 80042b8:	e7f1      	b.n	800429e <_mprec_log10+0x12>
 80042ba:	bf00      	nop
 80042bc:	080063d0 	.word	0x080063d0
 80042c0:	3ff00000 	.word	0x3ff00000
 80042c4:	40240000 	.word	0x40240000

080042c8 <_calloc_r>:
 80042c8:	b513      	push	{r0, r1, r4, lr}
 80042ca:	434a      	muls	r2, r1
 80042cc:	4611      	mov	r1, r2
 80042ce:	9201      	str	r2, [sp, #4]
 80042d0:	f000 f80a 	bl	80042e8 <_malloc_r>
 80042d4:	4604      	mov	r4, r0
 80042d6:	b118      	cbz	r0, 80042e0 <_calloc_r+0x18>
 80042d8:	9a01      	ldr	r2, [sp, #4]
 80042da:	2100      	movs	r1, #0
 80042dc:	f7ff faf6 	bl	80038cc <memset>
 80042e0:	4620      	mov	r0, r4
 80042e2:	b002      	add	sp, #8
 80042e4:	bd10      	pop	{r4, pc}
	...

080042e8 <_malloc_r>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	1ccd      	adds	r5, r1, #3
 80042ec:	f025 0503 	bic.w	r5, r5, #3
 80042f0:	3508      	adds	r5, #8
 80042f2:	2d0c      	cmp	r5, #12
 80042f4:	bf38      	it	cc
 80042f6:	250c      	movcc	r5, #12
 80042f8:	2d00      	cmp	r5, #0
 80042fa:	4606      	mov	r6, r0
 80042fc:	db01      	blt.n	8004302 <_malloc_r+0x1a>
 80042fe:	42a9      	cmp	r1, r5
 8004300:	d903      	bls.n	800430a <_malloc_r+0x22>
 8004302:	230c      	movs	r3, #12
 8004304:	6033      	str	r3, [r6, #0]
 8004306:	2000      	movs	r0, #0
 8004308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800430a:	f001 fa4f 	bl	80057ac <__malloc_lock>
 800430e:	4921      	ldr	r1, [pc, #132]	; (8004394 <_malloc_r+0xac>)
 8004310:	680a      	ldr	r2, [r1, #0]
 8004312:	4614      	mov	r4, r2
 8004314:	b99c      	cbnz	r4, 800433e <_malloc_r+0x56>
 8004316:	4f20      	ldr	r7, [pc, #128]	; (8004398 <_malloc_r+0xb0>)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	b923      	cbnz	r3, 8004326 <_malloc_r+0x3e>
 800431c:	4621      	mov	r1, r4
 800431e:	4630      	mov	r0, r6
 8004320:	f000 fb52 	bl	80049c8 <_sbrk_r>
 8004324:	6038      	str	r0, [r7, #0]
 8004326:	4629      	mov	r1, r5
 8004328:	4630      	mov	r0, r6
 800432a:	f000 fb4d 	bl	80049c8 <_sbrk_r>
 800432e:	1c43      	adds	r3, r0, #1
 8004330:	d123      	bne.n	800437a <_malloc_r+0x92>
 8004332:	230c      	movs	r3, #12
 8004334:	6033      	str	r3, [r6, #0]
 8004336:	4630      	mov	r0, r6
 8004338:	f001 fa3e 	bl	80057b8 <__malloc_unlock>
 800433c:	e7e3      	b.n	8004306 <_malloc_r+0x1e>
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	1b5b      	subs	r3, r3, r5
 8004342:	d417      	bmi.n	8004374 <_malloc_r+0x8c>
 8004344:	2b0b      	cmp	r3, #11
 8004346:	d903      	bls.n	8004350 <_malloc_r+0x68>
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	441c      	add	r4, r3
 800434c:	6025      	str	r5, [r4, #0]
 800434e:	e004      	b.n	800435a <_malloc_r+0x72>
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	42a2      	cmp	r2, r4
 8004354:	bf0c      	ite	eq
 8004356:	600b      	streq	r3, [r1, #0]
 8004358:	6053      	strne	r3, [r2, #4]
 800435a:	4630      	mov	r0, r6
 800435c:	f001 fa2c 	bl	80057b8 <__malloc_unlock>
 8004360:	f104 000b 	add.w	r0, r4, #11
 8004364:	1d23      	adds	r3, r4, #4
 8004366:	f020 0007 	bic.w	r0, r0, #7
 800436a:	1ac2      	subs	r2, r0, r3
 800436c:	d0cc      	beq.n	8004308 <_malloc_r+0x20>
 800436e:	1a1b      	subs	r3, r3, r0
 8004370:	50a3      	str	r3, [r4, r2]
 8004372:	e7c9      	b.n	8004308 <_malloc_r+0x20>
 8004374:	4622      	mov	r2, r4
 8004376:	6864      	ldr	r4, [r4, #4]
 8004378:	e7cc      	b.n	8004314 <_malloc_r+0x2c>
 800437a:	1cc4      	adds	r4, r0, #3
 800437c:	f024 0403 	bic.w	r4, r4, #3
 8004380:	42a0      	cmp	r0, r4
 8004382:	d0e3      	beq.n	800434c <_malloc_r+0x64>
 8004384:	1a21      	subs	r1, r4, r0
 8004386:	4630      	mov	r0, r6
 8004388:	f000 fb1e 	bl	80049c8 <_sbrk_r>
 800438c:	3001      	adds	r0, #1
 800438e:	d1dd      	bne.n	800434c <_malloc_r+0x64>
 8004390:	e7cf      	b.n	8004332 <_malloc_r+0x4a>
 8004392:	bf00      	nop
 8004394:	20000098 	.word	0x20000098
 8004398:	2000009c 	.word	0x2000009c

0800439c <_realloc_r>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	4607      	mov	r7, r0
 80043a0:	4614      	mov	r4, r2
 80043a2:	460e      	mov	r6, r1
 80043a4:	b921      	cbnz	r1, 80043b0 <_realloc_r+0x14>
 80043a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043aa:	4611      	mov	r1, r2
 80043ac:	f7ff bf9c 	b.w	80042e8 <_malloc_r>
 80043b0:	b922      	cbnz	r2, 80043bc <_realloc_r+0x20>
 80043b2:	f001 fa07 	bl	80057c4 <_free_r>
 80043b6:	4625      	mov	r5, r4
 80043b8:	4628      	mov	r0, r5
 80043ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043bc:	f001 fa52 	bl	8005864 <_malloc_usable_size_r>
 80043c0:	42a0      	cmp	r0, r4
 80043c2:	d20f      	bcs.n	80043e4 <_realloc_r+0x48>
 80043c4:	4621      	mov	r1, r4
 80043c6:	4638      	mov	r0, r7
 80043c8:	f7ff ff8e 	bl	80042e8 <_malloc_r>
 80043cc:	4605      	mov	r5, r0
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d0f2      	beq.n	80043b8 <_realloc_r+0x1c>
 80043d2:	4631      	mov	r1, r6
 80043d4:	4622      	mov	r2, r4
 80043d6:	f001 f9c1 	bl	800575c <memcpy>
 80043da:	4631      	mov	r1, r6
 80043dc:	4638      	mov	r0, r7
 80043de:	f001 f9f1 	bl	80057c4 <_free_r>
 80043e2:	e7e9      	b.n	80043b8 <_realloc_r+0x1c>
 80043e4:	4635      	mov	r5, r6
 80043e6:	e7e7      	b.n	80043b8 <_realloc_r+0x1c>

080043e8 <__ssputs_r>:
 80043e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043ec:	688e      	ldr	r6, [r1, #8]
 80043ee:	429e      	cmp	r6, r3
 80043f0:	4682      	mov	sl, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	4690      	mov	r8, r2
 80043f6:	461f      	mov	r7, r3
 80043f8:	d838      	bhi.n	800446c <__ssputs_r+0x84>
 80043fa:	898a      	ldrh	r2, [r1, #12]
 80043fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004400:	d032      	beq.n	8004468 <__ssputs_r+0x80>
 8004402:	6825      	ldr	r5, [r4, #0]
 8004404:	6909      	ldr	r1, [r1, #16]
 8004406:	eba5 0901 	sub.w	r9, r5, r1
 800440a:	6965      	ldr	r5, [r4, #20]
 800440c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004410:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004414:	3301      	adds	r3, #1
 8004416:	444b      	add	r3, r9
 8004418:	106d      	asrs	r5, r5, #1
 800441a:	429d      	cmp	r5, r3
 800441c:	bf38      	it	cc
 800441e:	461d      	movcc	r5, r3
 8004420:	0553      	lsls	r3, r2, #21
 8004422:	d531      	bpl.n	8004488 <__ssputs_r+0xa0>
 8004424:	4629      	mov	r1, r5
 8004426:	f7ff ff5f 	bl	80042e8 <_malloc_r>
 800442a:	4606      	mov	r6, r0
 800442c:	b950      	cbnz	r0, 8004444 <__ssputs_r+0x5c>
 800442e:	230c      	movs	r3, #12
 8004430:	f8ca 3000 	str.w	r3, [sl]
 8004434:	89a3      	ldrh	r3, [r4, #12]
 8004436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	f04f 30ff 	mov.w	r0, #4294967295
 8004440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004444:	6921      	ldr	r1, [r4, #16]
 8004446:	464a      	mov	r2, r9
 8004448:	f001 f988 	bl	800575c <memcpy>
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004456:	81a3      	strh	r3, [r4, #12]
 8004458:	6126      	str	r6, [r4, #16]
 800445a:	6165      	str	r5, [r4, #20]
 800445c:	444e      	add	r6, r9
 800445e:	eba5 0509 	sub.w	r5, r5, r9
 8004462:	6026      	str	r6, [r4, #0]
 8004464:	60a5      	str	r5, [r4, #8]
 8004466:	463e      	mov	r6, r7
 8004468:	42be      	cmp	r6, r7
 800446a:	d900      	bls.n	800446e <__ssputs_r+0x86>
 800446c:	463e      	mov	r6, r7
 800446e:	4632      	mov	r2, r6
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	4641      	mov	r1, r8
 8004474:	f001 f980 	bl	8005778 <memmove>
 8004478:	68a3      	ldr	r3, [r4, #8]
 800447a:	6822      	ldr	r2, [r4, #0]
 800447c:	1b9b      	subs	r3, r3, r6
 800447e:	4432      	add	r2, r6
 8004480:	60a3      	str	r3, [r4, #8]
 8004482:	6022      	str	r2, [r4, #0]
 8004484:	2000      	movs	r0, #0
 8004486:	e7db      	b.n	8004440 <__ssputs_r+0x58>
 8004488:	462a      	mov	r2, r5
 800448a:	f7ff ff87 	bl	800439c <_realloc_r>
 800448e:	4606      	mov	r6, r0
 8004490:	2800      	cmp	r0, #0
 8004492:	d1e1      	bne.n	8004458 <__ssputs_r+0x70>
 8004494:	6921      	ldr	r1, [r4, #16]
 8004496:	4650      	mov	r0, sl
 8004498:	f001 f994 	bl	80057c4 <_free_r>
 800449c:	e7c7      	b.n	800442e <__ssputs_r+0x46>
	...

080044a0 <_svfiprintf_r>:
 80044a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a4:	4698      	mov	r8, r3
 80044a6:	898b      	ldrh	r3, [r1, #12]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	b09d      	sub	sp, #116	; 0x74
 80044ac:	4607      	mov	r7, r0
 80044ae:	460d      	mov	r5, r1
 80044b0:	4614      	mov	r4, r2
 80044b2:	d50e      	bpl.n	80044d2 <_svfiprintf_r+0x32>
 80044b4:	690b      	ldr	r3, [r1, #16]
 80044b6:	b963      	cbnz	r3, 80044d2 <_svfiprintf_r+0x32>
 80044b8:	2140      	movs	r1, #64	; 0x40
 80044ba:	f7ff ff15 	bl	80042e8 <_malloc_r>
 80044be:	6028      	str	r0, [r5, #0]
 80044c0:	6128      	str	r0, [r5, #16]
 80044c2:	b920      	cbnz	r0, 80044ce <_svfiprintf_r+0x2e>
 80044c4:	230c      	movs	r3, #12
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	f04f 30ff 	mov.w	r0, #4294967295
 80044cc:	e0d1      	b.n	8004672 <_svfiprintf_r+0x1d2>
 80044ce:	2340      	movs	r3, #64	; 0x40
 80044d0:	616b      	str	r3, [r5, #20]
 80044d2:	2300      	movs	r3, #0
 80044d4:	9309      	str	r3, [sp, #36]	; 0x24
 80044d6:	2320      	movs	r3, #32
 80044d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80044e0:	2330      	movs	r3, #48	; 0x30
 80044e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800468c <_svfiprintf_r+0x1ec>
 80044e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044ea:	f04f 0901 	mov.w	r9, #1
 80044ee:	4623      	mov	r3, r4
 80044f0:	469a      	mov	sl, r3
 80044f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044f6:	b10a      	cbz	r2, 80044fc <_svfiprintf_r+0x5c>
 80044f8:	2a25      	cmp	r2, #37	; 0x25
 80044fa:	d1f9      	bne.n	80044f0 <_svfiprintf_r+0x50>
 80044fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004500:	d00b      	beq.n	800451a <_svfiprintf_r+0x7a>
 8004502:	465b      	mov	r3, fp
 8004504:	4622      	mov	r2, r4
 8004506:	4629      	mov	r1, r5
 8004508:	4638      	mov	r0, r7
 800450a:	f7ff ff6d 	bl	80043e8 <__ssputs_r>
 800450e:	3001      	adds	r0, #1
 8004510:	f000 80aa 	beq.w	8004668 <_svfiprintf_r+0x1c8>
 8004514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004516:	445a      	add	r2, fp
 8004518:	9209      	str	r2, [sp, #36]	; 0x24
 800451a:	f89a 3000 	ldrb.w	r3, [sl]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80a2 	beq.w	8004668 <_svfiprintf_r+0x1c8>
 8004524:	2300      	movs	r3, #0
 8004526:	f04f 32ff 	mov.w	r2, #4294967295
 800452a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800452e:	f10a 0a01 	add.w	sl, sl, #1
 8004532:	9304      	str	r3, [sp, #16]
 8004534:	9307      	str	r3, [sp, #28]
 8004536:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800453a:	931a      	str	r3, [sp, #104]	; 0x68
 800453c:	4654      	mov	r4, sl
 800453e:	2205      	movs	r2, #5
 8004540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004544:	4851      	ldr	r0, [pc, #324]	; (800468c <_svfiprintf_r+0x1ec>)
 8004546:	f7fb fe4b 	bl	80001e0 <memchr>
 800454a:	9a04      	ldr	r2, [sp, #16]
 800454c:	b9d8      	cbnz	r0, 8004586 <_svfiprintf_r+0xe6>
 800454e:	06d0      	lsls	r0, r2, #27
 8004550:	bf44      	itt	mi
 8004552:	2320      	movmi	r3, #32
 8004554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004558:	0711      	lsls	r1, r2, #28
 800455a:	bf44      	itt	mi
 800455c:	232b      	movmi	r3, #43	; 0x2b
 800455e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004562:	f89a 3000 	ldrb.w	r3, [sl]
 8004566:	2b2a      	cmp	r3, #42	; 0x2a
 8004568:	d015      	beq.n	8004596 <_svfiprintf_r+0xf6>
 800456a:	9a07      	ldr	r2, [sp, #28]
 800456c:	4654      	mov	r4, sl
 800456e:	2000      	movs	r0, #0
 8004570:	f04f 0c0a 	mov.w	ip, #10
 8004574:	4621      	mov	r1, r4
 8004576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800457a:	3b30      	subs	r3, #48	; 0x30
 800457c:	2b09      	cmp	r3, #9
 800457e:	d94e      	bls.n	800461e <_svfiprintf_r+0x17e>
 8004580:	b1b0      	cbz	r0, 80045b0 <_svfiprintf_r+0x110>
 8004582:	9207      	str	r2, [sp, #28]
 8004584:	e014      	b.n	80045b0 <_svfiprintf_r+0x110>
 8004586:	eba0 0308 	sub.w	r3, r0, r8
 800458a:	fa09 f303 	lsl.w	r3, r9, r3
 800458e:	4313      	orrs	r3, r2
 8004590:	9304      	str	r3, [sp, #16]
 8004592:	46a2      	mov	sl, r4
 8004594:	e7d2      	b.n	800453c <_svfiprintf_r+0x9c>
 8004596:	9b03      	ldr	r3, [sp, #12]
 8004598:	1d19      	adds	r1, r3, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	9103      	str	r1, [sp, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bfbb      	ittet	lt
 80045a2:	425b      	neglt	r3, r3
 80045a4:	f042 0202 	orrlt.w	r2, r2, #2
 80045a8:	9307      	strge	r3, [sp, #28]
 80045aa:	9307      	strlt	r3, [sp, #28]
 80045ac:	bfb8      	it	lt
 80045ae:	9204      	strlt	r2, [sp, #16]
 80045b0:	7823      	ldrb	r3, [r4, #0]
 80045b2:	2b2e      	cmp	r3, #46	; 0x2e
 80045b4:	d10c      	bne.n	80045d0 <_svfiprintf_r+0x130>
 80045b6:	7863      	ldrb	r3, [r4, #1]
 80045b8:	2b2a      	cmp	r3, #42	; 0x2a
 80045ba:	d135      	bne.n	8004628 <_svfiprintf_r+0x188>
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	1d1a      	adds	r2, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	9203      	str	r2, [sp, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bfb8      	it	lt
 80045c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80045cc:	3402      	adds	r4, #2
 80045ce:	9305      	str	r3, [sp, #20]
 80045d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800469c <_svfiprintf_r+0x1fc>
 80045d4:	7821      	ldrb	r1, [r4, #0]
 80045d6:	2203      	movs	r2, #3
 80045d8:	4650      	mov	r0, sl
 80045da:	f7fb fe01 	bl	80001e0 <memchr>
 80045de:	b140      	cbz	r0, 80045f2 <_svfiprintf_r+0x152>
 80045e0:	2340      	movs	r3, #64	; 0x40
 80045e2:	eba0 000a 	sub.w	r0, r0, sl
 80045e6:	fa03 f000 	lsl.w	r0, r3, r0
 80045ea:	9b04      	ldr	r3, [sp, #16]
 80045ec:	4303      	orrs	r3, r0
 80045ee:	3401      	adds	r4, #1
 80045f0:	9304      	str	r3, [sp, #16]
 80045f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f6:	4826      	ldr	r0, [pc, #152]	; (8004690 <_svfiprintf_r+0x1f0>)
 80045f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045fc:	2206      	movs	r2, #6
 80045fe:	f7fb fdef 	bl	80001e0 <memchr>
 8004602:	2800      	cmp	r0, #0
 8004604:	d038      	beq.n	8004678 <_svfiprintf_r+0x1d8>
 8004606:	4b23      	ldr	r3, [pc, #140]	; (8004694 <_svfiprintf_r+0x1f4>)
 8004608:	bb1b      	cbnz	r3, 8004652 <_svfiprintf_r+0x1b2>
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	3307      	adds	r3, #7
 800460e:	f023 0307 	bic.w	r3, r3, #7
 8004612:	3308      	adds	r3, #8
 8004614:	9303      	str	r3, [sp, #12]
 8004616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004618:	4433      	add	r3, r6
 800461a:	9309      	str	r3, [sp, #36]	; 0x24
 800461c:	e767      	b.n	80044ee <_svfiprintf_r+0x4e>
 800461e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004622:	460c      	mov	r4, r1
 8004624:	2001      	movs	r0, #1
 8004626:	e7a5      	b.n	8004574 <_svfiprintf_r+0xd4>
 8004628:	2300      	movs	r3, #0
 800462a:	3401      	adds	r4, #1
 800462c:	9305      	str	r3, [sp, #20]
 800462e:	4619      	mov	r1, r3
 8004630:	f04f 0c0a 	mov.w	ip, #10
 8004634:	4620      	mov	r0, r4
 8004636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800463a:	3a30      	subs	r2, #48	; 0x30
 800463c:	2a09      	cmp	r2, #9
 800463e:	d903      	bls.n	8004648 <_svfiprintf_r+0x1a8>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0c5      	beq.n	80045d0 <_svfiprintf_r+0x130>
 8004644:	9105      	str	r1, [sp, #20]
 8004646:	e7c3      	b.n	80045d0 <_svfiprintf_r+0x130>
 8004648:	fb0c 2101 	mla	r1, ip, r1, r2
 800464c:	4604      	mov	r4, r0
 800464e:	2301      	movs	r3, #1
 8004650:	e7f0      	b.n	8004634 <_svfiprintf_r+0x194>
 8004652:	ab03      	add	r3, sp, #12
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	462a      	mov	r2, r5
 8004658:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <_svfiprintf_r+0x1f8>)
 800465a:	a904      	add	r1, sp, #16
 800465c:	4638      	mov	r0, r7
 800465e:	f3af 8000 	nop.w
 8004662:	1c42      	adds	r2, r0, #1
 8004664:	4606      	mov	r6, r0
 8004666:	d1d6      	bne.n	8004616 <_svfiprintf_r+0x176>
 8004668:	89ab      	ldrh	r3, [r5, #12]
 800466a:	065b      	lsls	r3, r3, #25
 800466c:	f53f af2c 	bmi.w	80044c8 <_svfiprintf_r+0x28>
 8004670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004672:	b01d      	add	sp, #116	; 0x74
 8004674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004678:	ab03      	add	r3, sp, #12
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	462a      	mov	r2, r5
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <_svfiprintf_r+0x1f8>)
 8004680:	a904      	add	r1, sp, #16
 8004682:	4638      	mov	r0, r7
 8004684:	f000 f87a 	bl	800477c <_printf_i>
 8004688:	e7eb      	b.n	8004662 <_svfiprintf_r+0x1c2>
 800468a:	bf00      	nop
 800468c:	080064a4 	.word	0x080064a4
 8004690:	080064ae 	.word	0x080064ae
 8004694:	00000000 	.word	0x00000000
 8004698:	080043e9 	.word	0x080043e9
 800469c:	080064aa 	.word	0x080064aa

080046a0 <_printf_common>:
 80046a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	4616      	mov	r6, r2
 80046a6:	4699      	mov	r9, r3
 80046a8:	688a      	ldr	r2, [r1, #8]
 80046aa:	690b      	ldr	r3, [r1, #16]
 80046ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bfb8      	it	lt
 80046b4:	4613      	movlt	r3, r2
 80046b6:	6033      	str	r3, [r6, #0]
 80046b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046bc:	4607      	mov	r7, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	b10a      	cbz	r2, 80046c6 <_printf_common+0x26>
 80046c2:	3301      	adds	r3, #1
 80046c4:	6033      	str	r3, [r6, #0]
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	0699      	lsls	r1, r3, #26
 80046ca:	bf42      	ittt	mi
 80046cc:	6833      	ldrmi	r3, [r6, #0]
 80046ce:	3302      	addmi	r3, #2
 80046d0:	6033      	strmi	r3, [r6, #0]
 80046d2:	6825      	ldr	r5, [r4, #0]
 80046d4:	f015 0506 	ands.w	r5, r5, #6
 80046d8:	d106      	bne.n	80046e8 <_printf_common+0x48>
 80046da:	f104 0a19 	add.w	sl, r4, #25
 80046de:	68e3      	ldr	r3, [r4, #12]
 80046e0:	6832      	ldr	r2, [r6, #0]
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	42ab      	cmp	r3, r5
 80046e6:	dc26      	bgt.n	8004736 <_printf_common+0x96>
 80046e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046ec:	1e13      	subs	r3, r2, #0
 80046ee:	6822      	ldr	r2, [r4, #0]
 80046f0:	bf18      	it	ne
 80046f2:	2301      	movne	r3, #1
 80046f4:	0692      	lsls	r2, r2, #26
 80046f6:	d42b      	bmi.n	8004750 <_printf_common+0xb0>
 80046f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046fc:	4649      	mov	r1, r9
 80046fe:	4638      	mov	r0, r7
 8004700:	47c0      	blx	r8
 8004702:	3001      	adds	r0, #1
 8004704:	d01e      	beq.n	8004744 <_printf_common+0xa4>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	68e5      	ldr	r5, [r4, #12]
 800470a:	6832      	ldr	r2, [r6, #0]
 800470c:	f003 0306 	and.w	r3, r3, #6
 8004710:	2b04      	cmp	r3, #4
 8004712:	bf08      	it	eq
 8004714:	1aad      	subeq	r5, r5, r2
 8004716:	68a3      	ldr	r3, [r4, #8]
 8004718:	6922      	ldr	r2, [r4, #16]
 800471a:	bf0c      	ite	eq
 800471c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004720:	2500      	movne	r5, #0
 8004722:	4293      	cmp	r3, r2
 8004724:	bfc4      	itt	gt
 8004726:	1a9b      	subgt	r3, r3, r2
 8004728:	18ed      	addgt	r5, r5, r3
 800472a:	2600      	movs	r6, #0
 800472c:	341a      	adds	r4, #26
 800472e:	42b5      	cmp	r5, r6
 8004730:	d11a      	bne.n	8004768 <_printf_common+0xc8>
 8004732:	2000      	movs	r0, #0
 8004734:	e008      	b.n	8004748 <_printf_common+0xa8>
 8004736:	2301      	movs	r3, #1
 8004738:	4652      	mov	r2, sl
 800473a:	4649      	mov	r1, r9
 800473c:	4638      	mov	r0, r7
 800473e:	47c0      	blx	r8
 8004740:	3001      	adds	r0, #1
 8004742:	d103      	bne.n	800474c <_printf_common+0xac>
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800474c:	3501      	adds	r5, #1
 800474e:	e7c6      	b.n	80046de <_printf_common+0x3e>
 8004750:	18e1      	adds	r1, r4, r3
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	2030      	movs	r0, #48	; 0x30
 8004756:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800475a:	4422      	add	r2, r4
 800475c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004760:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004764:	3302      	adds	r3, #2
 8004766:	e7c7      	b.n	80046f8 <_printf_common+0x58>
 8004768:	2301      	movs	r3, #1
 800476a:	4622      	mov	r2, r4
 800476c:	4649      	mov	r1, r9
 800476e:	4638      	mov	r0, r7
 8004770:	47c0      	blx	r8
 8004772:	3001      	adds	r0, #1
 8004774:	d0e6      	beq.n	8004744 <_printf_common+0xa4>
 8004776:	3601      	adds	r6, #1
 8004778:	e7d9      	b.n	800472e <_printf_common+0x8e>
	...

0800477c <_printf_i>:
 800477c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004780:	460c      	mov	r4, r1
 8004782:	4691      	mov	r9, r2
 8004784:	7e27      	ldrb	r7, [r4, #24]
 8004786:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004788:	2f78      	cmp	r7, #120	; 0x78
 800478a:	4680      	mov	r8, r0
 800478c:	469a      	mov	sl, r3
 800478e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004792:	d807      	bhi.n	80047a4 <_printf_i+0x28>
 8004794:	2f62      	cmp	r7, #98	; 0x62
 8004796:	d80a      	bhi.n	80047ae <_printf_i+0x32>
 8004798:	2f00      	cmp	r7, #0
 800479a:	f000 80d8 	beq.w	800494e <_printf_i+0x1d2>
 800479e:	2f58      	cmp	r7, #88	; 0x58
 80047a0:	f000 80a3 	beq.w	80048ea <_printf_i+0x16e>
 80047a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047ac:	e03a      	b.n	8004824 <_printf_i+0xa8>
 80047ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047b2:	2b15      	cmp	r3, #21
 80047b4:	d8f6      	bhi.n	80047a4 <_printf_i+0x28>
 80047b6:	a001      	add	r0, pc, #4	; (adr r0, 80047bc <_printf_i+0x40>)
 80047b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80047bc:	08004815 	.word	0x08004815
 80047c0:	08004829 	.word	0x08004829
 80047c4:	080047a5 	.word	0x080047a5
 80047c8:	080047a5 	.word	0x080047a5
 80047cc:	080047a5 	.word	0x080047a5
 80047d0:	080047a5 	.word	0x080047a5
 80047d4:	08004829 	.word	0x08004829
 80047d8:	080047a5 	.word	0x080047a5
 80047dc:	080047a5 	.word	0x080047a5
 80047e0:	080047a5 	.word	0x080047a5
 80047e4:	080047a5 	.word	0x080047a5
 80047e8:	08004935 	.word	0x08004935
 80047ec:	08004859 	.word	0x08004859
 80047f0:	08004917 	.word	0x08004917
 80047f4:	080047a5 	.word	0x080047a5
 80047f8:	080047a5 	.word	0x080047a5
 80047fc:	08004957 	.word	0x08004957
 8004800:	080047a5 	.word	0x080047a5
 8004804:	08004859 	.word	0x08004859
 8004808:	080047a5 	.word	0x080047a5
 800480c:	080047a5 	.word	0x080047a5
 8004810:	0800491f 	.word	0x0800491f
 8004814:	680b      	ldr	r3, [r1, #0]
 8004816:	1d1a      	adds	r2, r3, #4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	600a      	str	r2, [r1, #0]
 800481c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004824:	2301      	movs	r3, #1
 8004826:	e0a3      	b.n	8004970 <_printf_i+0x1f4>
 8004828:	6825      	ldr	r5, [r4, #0]
 800482a:	6808      	ldr	r0, [r1, #0]
 800482c:	062e      	lsls	r6, r5, #24
 800482e:	f100 0304 	add.w	r3, r0, #4
 8004832:	d50a      	bpl.n	800484a <_printf_i+0xce>
 8004834:	6805      	ldr	r5, [r0, #0]
 8004836:	600b      	str	r3, [r1, #0]
 8004838:	2d00      	cmp	r5, #0
 800483a:	da03      	bge.n	8004844 <_printf_i+0xc8>
 800483c:	232d      	movs	r3, #45	; 0x2d
 800483e:	426d      	negs	r5, r5
 8004840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004844:	485e      	ldr	r0, [pc, #376]	; (80049c0 <_printf_i+0x244>)
 8004846:	230a      	movs	r3, #10
 8004848:	e019      	b.n	800487e <_printf_i+0x102>
 800484a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800484e:	6805      	ldr	r5, [r0, #0]
 8004850:	600b      	str	r3, [r1, #0]
 8004852:	bf18      	it	ne
 8004854:	b22d      	sxthne	r5, r5
 8004856:	e7ef      	b.n	8004838 <_printf_i+0xbc>
 8004858:	680b      	ldr	r3, [r1, #0]
 800485a:	6825      	ldr	r5, [r4, #0]
 800485c:	1d18      	adds	r0, r3, #4
 800485e:	6008      	str	r0, [r1, #0]
 8004860:	0628      	lsls	r0, r5, #24
 8004862:	d501      	bpl.n	8004868 <_printf_i+0xec>
 8004864:	681d      	ldr	r5, [r3, #0]
 8004866:	e002      	b.n	800486e <_printf_i+0xf2>
 8004868:	0669      	lsls	r1, r5, #25
 800486a:	d5fb      	bpl.n	8004864 <_printf_i+0xe8>
 800486c:	881d      	ldrh	r5, [r3, #0]
 800486e:	4854      	ldr	r0, [pc, #336]	; (80049c0 <_printf_i+0x244>)
 8004870:	2f6f      	cmp	r7, #111	; 0x6f
 8004872:	bf0c      	ite	eq
 8004874:	2308      	moveq	r3, #8
 8004876:	230a      	movne	r3, #10
 8004878:	2100      	movs	r1, #0
 800487a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800487e:	6866      	ldr	r6, [r4, #4]
 8004880:	60a6      	str	r6, [r4, #8]
 8004882:	2e00      	cmp	r6, #0
 8004884:	bfa2      	ittt	ge
 8004886:	6821      	ldrge	r1, [r4, #0]
 8004888:	f021 0104 	bicge.w	r1, r1, #4
 800488c:	6021      	strge	r1, [r4, #0]
 800488e:	b90d      	cbnz	r5, 8004894 <_printf_i+0x118>
 8004890:	2e00      	cmp	r6, #0
 8004892:	d04d      	beq.n	8004930 <_printf_i+0x1b4>
 8004894:	4616      	mov	r6, r2
 8004896:	fbb5 f1f3 	udiv	r1, r5, r3
 800489a:	fb03 5711 	mls	r7, r3, r1, r5
 800489e:	5dc7      	ldrb	r7, [r0, r7]
 80048a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048a4:	462f      	mov	r7, r5
 80048a6:	42bb      	cmp	r3, r7
 80048a8:	460d      	mov	r5, r1
 80048aa:	d9f4      	bls.n	8004896 <_printf_i+0x11a>
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d10b      	bne.n	80048c8 <_printf_i+0x14c>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	07df      	lsls	r7, r3, #31
 80048b4:	d508      	bpl.n	80048c8 <_printf_i+0x14c>
 80048b6:	6923      	ldr	r3, [r4, #16]
 80048b8:	6861      	ldr	r1, [r4, #4]
 80048ba:	4299      	cmp	r1, r3
 80048bc:	bfde      	ittt	le
 80048be:	2330      	movle	r3, #48	; 0x30
 80048c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048c8:	1b92      	subs	r2, r2, r6
 80048ca:	6122      	str	r2, [r4, #16]
 80048cc:	f8cd a000 	str.w	sl, [sp]
 80048d0:	464b      	mov	r3, r9
 80048d2:	aa03      	add	r2, sp, #12
 80048d4:	4621      	mov	r1, r4
 80048d6:	4640      	mov	r0, r8
 80048d8:	f7ff fee2 	bl	80046a0 <_printf_common>
 80048dc:	3001      	adds	r0, #1
 80048de:	d14c      	bne.n	800497a <_printf_i+0x1fe>
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	b004      	add	sp, #16
 80048e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ea:	4835      	ldr	r0, [pc, #212]	; (80049c0 <_printf_i+0x244>)
 80048ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	680e      	ldr	r6, [r1, #0]
 80048f4:	061f      	lsls	r7, r3, #24
 80048f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80048fa:	600e      	str	r6, [r1, #0]
 80048fc:	d514      	bpl.n	8004928 <_printf_i+0x1ac>
 80048fe:	07d9      	lsls	r1, r3, #31
 8004900:	bf44      	itt	mi
 8004902:	f043 0320 	orrmi.w	r3, r3, #32
 8004906:	6023      	strmi	r3, [r4, #0]
 8004908:	b91d      	cbnz	r5, 8004912 <_printf_i+0x196>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	f023 0320 	bic.w	r3, r3, #32
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	2310      	movs	r3, #16
 8004914:	e7b0      	b.n	8004878 <_printf_i+0xfc>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	f043 0320 	orr.w	r3, r3, #32
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	2378      	movs	r3, #120	; 0x78
 8004920:	4828      	ldr	r0, [pc, #160]	; (80049c4 <_printf_i+0x248>)
 8004922:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004926:	e7e3      	b.n	80048f0 <_printf_i+0x174>
 8004928:	065e      	lsls	r6, r3, #25
 800492a:	bf48      	it	mi
 800492c:	b2ad      	uxthmi	r5, r5
 800492e:	e7e6      	b.n	80048fe <_printf_i+0x182>
 8004930:	4616      	mov	r6, r2
 8004932:	e7bb      	b.n	80048ac <_printf_i+0x130>
 8004934:	680b      	ldr	r3, [r1, #0]
 8004936:	6826      	ldr	r6, [r4, #0]
 8004938:	6960      	ldr	r0, [r4, #20]
 800493a:	1d1d      	adds	r5, r3, #4
 800493c:	600d      	str	r5, [r1, #0]
 800493e:	0635      	lsls	r5, r6, #24
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	d501      	bpl.n	8004948 <_printf_i+0x1cc>
 8004944:	6018      	str	r0, [r3, #0]
 8004946:	e002      	b.n	800494e <_printf_i+0x1d2>
 8004948:	0671      	lsls	r1, r6, #25
 800494a:	d5fb      	bpl.n	8004944 <_printf_i+0x1c8>
 800494c:	8018      	strh	r0, [r3, #0]
 800494e:	2300      	movs	r3, #0
 8004950:	6123      	str	r3, [r4, #16]
 8004952:	4616      	mov	r6, r2
 8004954:	e7ba      	b.n	80048cc <_printf_i+0x150>
 8004956:	680b      	ldr	r3, [r1, #0]
 8004958:	1d1a      	adds	r2, r3, #4
 800495a:	600a      	str	r2, [r1, #0]
 800495c:	681e      	ldr	r6, [r3, #0]
 800495e:	6862      	ldr	r2, [r4, #4]
 8004960:	2100      	movs	r1, #0
 8004962:	4630      	mov	r0, r6
 8004964:	f7fb fc3c 	bl	80001e0 <memchr>
 8004968:	b108      	cbz	r0, 800496e <_printf_i+0x1f2>
 800496a:	1b80      	subs	r0, r0, r6
 800496c:	6060      	str	r0, [r4, #4]
 800496e:	6863      	ldr	r3, [r4, #4]
 8004970:	6123      	str	r3, [r4, #16]
 8004972:	2300      	movs	r3, #0
 8004974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004978:	e7a8      	b.n	80048cc <_printf_i+0x150>
 800497a:	6923      	ldr	r3, [r4, #16]
 800497c:	4632      	mov	r2, r6
 800497e:	4649      	mov	r1, r9
 8004980:	4640      	mov	r0, r8
 8004982:	47d0      	blx	sl
 8004984:	3001      	adds	r0, #1
 8004986:	d0ab      	beq.n	80048e0 <_printf_i+0x164>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	079b      	lsls	r3, r3, #30
 800498c:	d413      	bmi.n	80049b6 <_printf_i+0x23a>
 800498e:	68e0      	ldr	r0, [r4, #12]
 8004990:	9b03      	ldr	r3, [sp, #12]
 8004992:	4298      	cmp	r0, r3
 8004994:	bfb8      	it	lt
 8004996:	4618      	movlt	r0, r3
 8004998:	e7a4      	b.n	80048e4 <_printf_i+0x168>
 800499a:	2301      	movs	r3, #1
 800499c:	4632      	mov	r2, r6
 800499e:	4649      	mov	r1, r9
 80049a0:	4640      	mov	r0, r8
 80049a2:	47d0      	blx	sl
 80049a4:	3001      	adds	r0, #1
 80049a6:	d09b      	beq.n	80048e0 <_printf_i+0x164>
 80049a8:	3501      	adds	r5, #1
 80049aa:	68e3      	ldr	r3, [r4, #12]
 80049ac:	9903      	ldr	r1, [sp, #12]
 80049ae:	1a5b      	subs	r3, r3, r1
 80049b0:	42ab      	cmp	r3, r5
 80049b2:	dcf2      	bgt.n	800499a <_printf_i+0x21e>
 80049b4:	e7eb      	b.n	800498e <_printf_i+0x212>
 80049b6:	2500      	movs	r5, #0
 80049b8:	f104 0619 	add.w	r6, r4, #25
 80049bc:	e7f5      	b.n	80049aa <_printf_i+0x22e>
 80049be:	bf00      	nop
 80049c0:	080064b5 	.word	0x080064b5
 80049c4:	080064c6 	.word	0x080064c6

080049c8 <_sbrk_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4d06      	ldr	r5, [pc, #24]	; (80049e4 <_sbrk_r+0x1c>)
 80049cc:	2300      	movs	r3, #0
 80049ce:	4604      	mov	r4, r0
 80049d0:	4608      	mov	r0, r1
 80049d2:	602b      	str	r3, [r5, #0]
 80049d4:	f7fc ffae 	bl	8001934 <_sbrk>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d102      	bne.n	80049e2 <_sbrk_r+0x1a>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	b103      	cbz	r3, 80049e2 <_sbrk_r+0x1a>
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
 80049e4:	2000018c 	.word	0x2000018c

080049e8 <strcpy>:
 80049e8:	4603      	mov	r3, r0
 80049ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ee:	f803 2b01 	strb.w	r2, [r3], #1
 80049f2:	2a00      	cmp	r2, #0
 80049f4:	d1f9      	bne.n	80049ea <strcpy+0x2>
 80049f6:	4770      	bx	lr

080049f8 <__assert_func>:
 80049f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049fa:	4614      	mov	r4, r2
 80049fc:	461a      	mov	r2, r3
 80049fe:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <__assert_func+0x2c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4605      	mov	r5, r0
 8004a04:	68d8      	ldr	r0, [r3, #12]
 8004a06:	b14c      	cbz	r4, 8004a1c <__assert_func+0x24>
 8004a08:	4b07      	ldr	r3, [pc, #28]	; (8004a28 <__assert_func+0x30>)
 8004a0a:	9100      	str	r1, [sp, #0]
 8004a0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a10:	4906      	ldr	r1, [pc, #24]	; (8004a2c <__assert_func+0x34>)
 8004a12:	462b      	mov	r3, r5
 8004a14:	f000 fe88 	bl	8005728 <fiprintf>
 8004a18:	f001 f946 	bl	8005ca8 <abort>
 8004a1c:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <__assert_func+0x38>)
 8004a1e:	461c      	mov	r4, r3
 8004a20:	e7f3      	b.n	8004a0a <__assert_func+0x12>
 8004a22:	bf00      	nop
 8004a24:	2000000c 	.word	0x2000000c
 8004a28:	080064d7 	.word	0x080064d7
 8004a2c:	080064e4 	.word	0x080064e4
 8004a30:	08006512 	.word	0x08006512

08004a34 <quorem>:
 8004a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a38:	6903      	ldr	r3, [r0, #16]
 8004a3a:	690c      	ldr	r4, [r1, #16]
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	4607      	mov	r7, r0
 8004a40:	f2c0 8081 	blt.w	8004b46 <quorem+0x112>
 8004a44:	3c01      	subs	r4, #1
 8004a46:	f101 0814 	add.w	r8, r1, #20
 8004a4a:	f100 0514 	add.w	r5, r0, #20
 8004a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004a64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a68:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a6c:	d331      	bcc.n	8004ad2 <quorem+0x9e>
 8004a6e:	f04f 0e00 	mov.w	lr, #0
 8004a72:	4640      	mov	r0, r8
 8004a74:	46ac      	mov	ip, r5
 8004a76:	46f2      	mov	sl, lr
 8004a78:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a7c:	b293      	uxth	r3, r2
 8004a7e:	fb06 e303 	mla	r3, r6, r3, lr
 8004a82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	ebaa 0303 	sub.w	r3, sl, r3
 8004a8c:	0c12      	lsrs	r2, r2, #16
 8004a8e:	f8dc a000 	ldr.w	sl, [ip]
 8004a92:	fb06 e202 	mla	r2, r6, r2, lr
 8004a96:	fa13 f38a 	uxtah	r3, r3, sl
 8004a9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a9e:	fa1f fa82 	uxth.w	sl, r2
 8004aa2:	f8dc 2000 	ldr.w	r2, [ip]
 8004aa6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004aaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ab4:	4581      	cmp	r9, r0
 8004ab6:	f84c 3b04 	str.w	r3, [ip], #4
 8004aba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004abe:	d2db      	bcs.n	8004a78 <quorem+0x44>
 8004ac0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ac4:	b92b      	cbnz	r3, 8004ad2 <quorem+0x9e>
 8004ac6:	9b01      	ldr	r3, [sp, #4]
 8004ac8:	3b04      	subs	r3, #4
 8004aca:	429d      	cmp	r5, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	d32e      	bcc.n	8004b2e <quorem+0xfa>
 8004ad0:	613c      	str	r4, [r7, #16]
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	f7ff fada 	bl	800408c <__mcmp>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	db24      	blt.n	8004b26 <quorem+0xf2>
 8004adc:	3601      	adds	r6, #1
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f04f 0c00 	mov.w	ip, #0
 8004ae4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ae8:	f8d0 e000 	ldr.w	lr, [r0]
 8004aec:	b293      	uxth	r3, r2
 8004aee:	ebac 0303 	sub.w	r3, ip, r3
 8004af2:	0c12      	lsrs	r2, r2, #16
 8004af4:	fa13 f38e 	uxtah	r3, r3, lr
 8004af8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004afc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b06:	45c1      	cmp	r9, r8
 8004b08:	f840 3b04 	str.w	r3, [r0], #4
 8004b0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b10:	d2e8      	bcs.n	8004ae4 <quorem+0xb0>
 8004b12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b1a:	b922      	cbnz	r2, 8004b26 <quorem+0xf2>
 8004b1c:	3b04      	subs	r3, #4
 8004b1e:	429d      	cmp	r5, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	d30a      	bcc.n	8004b3a <quorem+0x106>
 8004b24:	613c      	str	r4, [r7, #16]
 8004b26:	4630      	mov	r0, r6
 8004b28:	b003      	add	sp, #12
 8004b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	3b04      	subs	r3, #4
 8004b32:	2a00      	cmp	r2, #0
 8004b34:	d1cc      	bne.n	8004ad0 <quorem+0x9c>
 8004b36:	3c01      	subs	r4, #1
 8004b38:	e7c7      	b.n	8004aca <quorem+0x96>
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	3b04      	subs	r3, #4
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	d1f0      	bne.n	8004b24 <quorem+0xf0>
 8004b42:	3c01      	subs	r4, #1
 8004b44:	e7eb      	b.n	8004b1e <quorem+0xea>
 8004b46:	2000      	movs	r0, #0
 8004b48:	e7ee      	b.n	8004b28 <quorem+0xf4>
 8004b4a:	0000      	movs	r0, r0
 8004b4c:	0000      	movs	r0, r0
	...

08004b50 <_dtoa_r>:
 8004b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	ed2d 8b02 	vpush	{d8}
 8004b58:	ec57 6b10 	vmov	r6, r7, d0
 8004b5c:	b095      	sub	sp, #84	; 0x54
 8004b5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004b64:	9105      	str	r1, [sp, #20]
 8004b66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b70:	b975      	cbnz	r5, 8004b90 <_dtoa_r+0x40>
 8004b72:	2010      	movs	r0, #16
 8004b74:	f000 fdea 	bl	800574c <malloc>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	6260      	str	r0, [r4, #36]	; 0x24
 8004b7c:	b920      	cbnz	r0, 8004b88 <_dtoa_r+0x38>
 8004b7e:	4bb2      	ldr	r3, [pc, #712]	; (8004e48 <_dtoa_r+0x2f8>)
 8004b80:	21ea      	movs	r1, #234	; 0xea
 8004b82:	48b2      	ldr	r0, [pc, #712]	; (8004e4c <_dtoa_r+0x2fc>)
 8004b84:	f7ff ff38 	bl	80049f8 <__assert_func>
 8004b88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b8c:	6005      	str	r5, [r0, #0]
 8004b8e:	60c5      	str	r5, [r0, #12]
 8004b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b92:	6819      	ldr	r1, [r3, #0]
 8004b94:	b151      	cbz	r1, 8004bac <_dtoa_r+0x5c>
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	604a      	str	r2, [r1, #4]
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4093      	lsls	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f7ff f835 	bl	8003c10 <_Bfree>
 8004ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	1e3b      	subs	r3, r7, #0
 8004bae:	bfb9      	ittee	lt
 8004bb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bb4:	9303      	strlt	r3, [sp, #12]
 8004bb6:	2300      	movge	r3, #0
 8004bb8:	f8c8 3000 	strge.w	r3, [r8]
 8004bbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004bc0:	4ba3      	ldr	r3, [pc, #652]	; (8004e50 <_dtoa_r+0x300>)
 8004bc2:	bfbc      	itt	lt
 8004bc4:	2201      	movlt	r2, #1
 8004bc6:	f8c8 2000 	strlt.w	r2, [r8]
 8004bca:	ea33 0309 	bics.w	r3, r3, r9
 8004bce:	d11b      	bne.n	8004c08 <_dtoa_r+0xb8>
 8004bd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bdc:	4333      	orrs	r3, r6
 8004bde:	f000 857a 	beq.w	80056d6 <_dtoa_r+0xb86>
 8004be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004be4:	b963      	cbnz	r3, 8004c00 <_dtoa_r+0xb0>
 8004be6:	4b9b      	ldr	r3, [pc, #620]	; (8004e54 <_dtoa_r+0x304>)
 8004be8:	e024      	b.n	8004c34 <_dtoa_r+0xe4>
 8004bea:	4b9b      	ldr	r3, [pc, #620]	; (8004e58 <_dtoa_r+0x308>)
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	9800      	ldr	r0, [sp, #0]
 8004bf6:	b015      	add	sp, #84	; 0x54
 8004bf8:	ecbd 8b02 	vpop	{d8}
 8004bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c00:	4b94      	ldr	r3, [pc, #592]	; (8004e54 <_dtoa_r+0x304>)
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	3303      	adds	r3, #3
 8004c06:	e7f3      	b.n	8004bf0 <_dtoa_r+0xa0>
 8004c08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	ec51 0b17 	vmov	r0, r1, d7
 8004c12:	2300      	movs	r3, #0
 8004c14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004c18:	f7fb ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c1c:	4680      	mov	r8, r0
 8004c1e:	b158      	cbz	r0, 8004c38 <_dtoa_r+0xe8>
 8004c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c22:	2301      	movs	r3, #1
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8551 	beq.w	80056d0 <_dtoa_r+0xb80>
 8004c2e:	488b      	ldr	r0, [pc, #556]	; (8004e5c <_dtoa_r+0x30c>)
 8004c30:	6018      	str	r0, [r3, #0]
 8004c32:	1e43      	subs	r3, r0, #1
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	e7dd      	b.n	8004bf4 <_dtoa_r+0xa4>
 8004c38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004c3c:	aa12      	add	r2, sp, #72	; 0x48
 8004c3e:	a913      	add	r1, sp, #76	; 0x4c
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7ff fac7 	bl	80041d4 <__d2b>
 8004c46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004c4a:	4683      	mov	fp, r0
 8004c4c:	2d00      	cmp	r5, #0
 8004c4e:	d07c      	beq.n	8004d4a <_dtoa_r+0x1fa>
 8004c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004c5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004c62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004c66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c6a:	4b7d      	ldr	r3, [pc, #500]	; (8004e60 <_dtoa_r+0x310>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4630      	mov	r0, r6
 8004c70:	4639      	mov	r1, r7
 8004c72:	f7fb fb09 	bl	8000288 <__aeabi_dsub>
 8004c76:	a36e      	add	r3, pc, #440	; (adr r3, 8004e30 <_dtoa_r+0x2e0>)
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	f7fb fcbc 	bl	80005f8 <__aeabi_dmul>
 8004c80:	a36d      	add	r3, pc, #436	; (adr r3, 8004e38 <_dtoa_r+0x2e8>)
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	f7fb fb01 	bl	800028c <__adddf3>
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	460f      	mov	r7, r1
 8004c90:	f7fb fc48 	bl	8000524 <__aeabi_i2d>
 8004c94:	a36a      	add	r3, pc, #424	; (adr r3, 8004e40 <_dtoa_r+0x2f0>)
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	f7fb fcad 	bl	80005f8 <__aeabi_dmul>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	f7fb faf1 	bl	800028c <__adddf3>
 8004caa:	4606      	mov	r6, r0
 8004cac:	460f      	mov	r7, r1
 8004cae:	f7fb ff3d 	bl	8000b2c <__aeabi_d2iz>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	4682      	mov	sl, r0
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	4630      	mov	r0, r6
 8004cba:	4639      	mov	r1, r7
 8004cbc:	f7fb ff0e 	bl	8000adc <__aeabi_dcmplt>
 8004cc0:	b148      	cbz	r0, 8004cd6 <_dtoa_r+0x186>
 8004cc2:	4650      	mov	r0, sl
 8004cc4:	f7fb fc2e 	bl	8000524 <__aeabi_i2d>
 8004cc8:	4632      	mov	r2, r6
 8004cca:	463b      	mov	r3, r7
 8004ccc:	f7fb fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cd0:	b908      	cbnz	r0, 8004cd6 <_dtoa_r+0x186>
 8004cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cd6:	f1ba 0f16 	cmp.w	sl, #22
 8004cda:	d854      	bhi.n	8004d86 <_dtoa_r+0x236>
 8004cdc:	4b61      	ldr	r3, [pc, #388]	; (8004e64 <_dtoa_r+0x314>)
 8004cde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cea:	f7fb fef7 	bl	8000adc <__aeabi_dcmplt>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d04b      	beq.n	8004d8a <_dtoa_r+0x23a>
 8004cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	930e      	str	r3, [sp, #56]	; 0x38
 8004cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cfc:	1b5d      	subs	r5, r3, r5
 8004cfe:	1e6b      	subs	r3, r5, #1
 8004d00:	9304      	str	r3, [sp, #16]
 8004d02:	bf43      	ittte	mi
 8004d04:	2300      	movmi	r3, #0
 8004d06:	f1c5 0801 	rsbmi	r8, r5, #1
 8004d0a:	9304      	strmi	r3, [sp, #16]
 8004d0c:	f04f 0800 	movpl.w	r8, #0
 8004d10:	f1ba 0f00 	cmp.w	sl, #0
 8004d14:	db3b      	blt.n	8004d8e <_dtoa_r+0x23e>
 8004d16:	9b04      	ldr	r3, [sp, #16]
 8004d18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004d1c:	4453      	add	r3, sl
 8004d1e:	9304      	str	r3, [sp, #16]
 8004d20:	2300      	movs	r3, #0
 8004d22:	9306      	str	r3, [sp, #24]
 8004d24:	9b05      	ldr	r3, [sp, #20]
 8004d26:	2b09      	cmp	r3, #9
 8004d28:	d869      	bhi.n	8004dfe <_dtoa_r+0x2ae>
 8004d2a:	2b05      	cmp	r3, #5
 8004d2c:	bfc4      	itt	gt
 8004d2e:	3b04      	subgt	r3, #4
 8004d30:	9305      	strgt	r3, [sp, #20]
 8004d32:	9b05      	ldr	r3, [sp, #20]
 8004d34:	f1a3 0302 	sub.w	r3, r3, #2
 8004d38:	bfcc      	ite	gt
 8004d3a:	2500      	movgt	r5, #0
 8004d3c:	2501      	movle	r5, #1
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d869      	bhi.n	8004e16 <_dtoa_r+0x2c6>
 8004d42:	e8df f003 	tbb	[pc, r3]
 8004d46:	4e2c      	.short	0x4e2c
 8004d48:	5a4c      	.short	0x5a4c
 8004d4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004d4e:	441d      	add	r5, r3
 8004d50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	bfc1      	itttt	gt
 8004d58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004d60:	fa09 f303 	lslgt.w	r3, r9, r3
 8004d64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004d68:	bfda      	itte	le
 8004d6a:	f1c3 0320 	rsble	r3, r3, #32
 8004d6e:	fa06 f003 	lslle.w	r0, r6, r3
 8004d72:	4318      	orrgt	r0, r3
 8004d74:	f7fb fbc6 	bl	8000504 <__aeabi_ui2d>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004d80:	3d01      	subs	r5, #1
 8004d82:	9310      	str	r3, [sp, #64]	; 0x40
 8004d84:	e771      	b.n	8004c6a <_dtoa_r+0x11a>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e7b6      	b.n	8004cf8 <_dtoa_r+0x1a8>
 8004d8a:	900e      	str	r0, [sp, #56]	; 0x38
 8004d8c:	e7b5      	b.n	8004cfa <_dtoa_r+0x1aa>
 8004d8e:	f1ca 0300 	rsb	r3, sl, #0
 8004d92:	9306      	str	r3, [sp, #24]
 8004d94:	2300      	movs	r3, #0
 8004d96:	eba8 080a 	sub.w	r8, r8, sl
 8004d9a:	930d      	str	r3, [sp, #52]	; 0x34
 8004d9c:	e7c2      	b.n	8004d24 <_dtoa_r+0x1d4>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	9308      	str	r3, [sp, #32]
 8004da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	dc39      	bgt.n	8004e1c <_dtoa_r+0x2cc>
 8004da8:	f04f 0901 	mov.w	r9, #1
 8004dac:	f8cd 9004 	str.w	r9, [sp, #4]
 8004db0:	464b      	mov	r3, r9
 8004db2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004db6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004db8:	2200      	movs	r2, #0
 8004dba:	6042      	str	r2, [r0, #4]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	f102 0614 	add.w	r6, r2, #20
 8004dc2:	429e      	cmp	r6, r3
 8004dc4:	6841      	ldr	r1, [r0, #4]
 8004dc6:	d92f      	bls.n	8004e28 <_dtoa_r+0x2d8>
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f7fe fee1 	bl	8003b90 <_Balloc>
 8004dce:	9000      	str	r0, [sp, #0]
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d14b      	bne.n	8004e6c <_dtoa_r+0x31c>
 8004dd4:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <_dtoa_r+0x318>)
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ddc:	e6d1      	b.n	8004b82 <_dtoa_r+0x32>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e7de      	b.n	8004da0 <_dtoa_r+0x250>
 8004de2:	2300      	movs	r3, #0
 8004de4:	9308      	str	r3, [sp, #32]
 8004de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de8:	eb0a 0903 	add.w	r9, sl, r3
 8004dec:	f109 0301 	add.w	r3, r9, #1
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	bfb8      	it	lt
 8004df6:	2301      	movlt	r3, #1
 8004df8:	e7dd      	b.n	8004db6 <_dtoa_r+0x266>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e7f2      	b.n	8004de4 <_dtoa_r+0x294>
 8004dfe:	2501      	movs	r5, #1
 8004e00:	2300      	movs	r3, #0
 8004e02:	9305      	str	r3, [sp, #20]
 8004e04:	9508      	str	r5, [sp, #32]
 8004e06:	f04f 39ff 	mov.w	r9, #4294967295
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e10:	2312      	movs	r3, #18
 8004e12:	9209      	str	r2, [sp, #36]	; 0x24
 8004e14:	e7cf      	b.n	8004db6 <_dtoa_r+0x266>
 8004e16:	2301      	movs	r3, #1
 8004e18:	9308      	str	r3, [sp, #32]
 8004e1a:	e7f4      	b.n	8004e06 <_dtoa_r+0x2b6>
 8004e1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004e20:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e24:	464b      	mov	r3, r9
 8004e26:	e7c6      	b.n	8004db6 <_dtoa_r+0x266>
 8004e28:	3101      	adds	r1, #1
 8004e2a:	6041      	str	r1, [r0, #4]
 8004e2c:	0052      	lsls	r2, r2, #1
 8004e2e:	e7c6      	b.n	8004dbe <_dtoa_r+0x26e>
 8004e30:	636f4361 	.word	0x636f4361
 8004e34:	3fd287a7 	.word	0x3fd287a7
 8004e38:	8b60c8b3 	.word	0x8b60c8b3
 8004e3c:	3fc68a28 	.word	0x3fc68a28
 8004e40:	509f79fb 	.word	0x509f79fb
 8004e44:	3fd34413 	.word	0x3fd34413
 8004e48:	0800631c 	.word	0x0800631c
 8004e4c:	08006522 	.word	0x08006522
 8004e50:	7ff00000 	.word	0x7ff00000
 8004e54:	0800651c 	.word	0x0800651c
 8004e58:	08006513 	.word	0x08006513
 8004e5c:	08006521 	.word	0x08006521
 8004e60:	3ff80000 	.word	0x3ff80000
 8004e64:	080063d0 	.word	0x080063d0
 8004e68:	08006393 	.word	0x08006393
 8004e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e6e:	9a00      	ldr	r2, [sp, #0]
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	9b01      	ldr	r3, [sp, #4]
 8004e74:	2b0e      	cmp	r3, #14
 8004e76:	f200 80ad 	bhi.w	8004fd4 <_dtoa_r+0x484>
 8004e7a:	2d00      	cmp	r5, #0
 8004e7c:	f000 80aa 	beq.w	8004fd4 <_dtoa_r+0x484>
 8004e80:	f1ba 0f00 	cmp.w	sl, #0
 8004e84:	dd36      	ble.n	8004ef4 <_dtoa_r+0x3a4>
 8004e86:	4ac3      	ldr	r2, [pc, #780]	; (8005194 <_dtoa_r+0x644>)
 8004e88:	f00a 030f 	and.w	r3, sl, #15
 8004e8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e90:	ed93 7b00 	vldr	d7, [r3]
 8004e94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004e98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004e9c:	eeb0 8a47 	vmov.f32	s16, s14
 8004ea0:	eef0 8a67 	vmov.f32	s17, s15
 8004ea4:	d016      	beq.n	8004ed4 <_dtoa_r+0x384>
 8004ea6:	4bbc      	ldr	r3, [pc, #752]	; (8005198 <_dtoa_r+0x648>)
 8004ea8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004eac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004eb0:	f7fb fccc 	bl	800084c <__aeabi_ddiv>
 8004eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eb8:	f007 070f 	and.w	r7, r7, #15
 8004ebc:	2503      	movs	r5, #3
 8004ebe:	4eb6      	ldr	r6, [pc, #728]	; (8005198 <_dtoa_r+0x648>)
 8004ec0:	b957      	cbnz	r7, 8004ed8 <_dtoa_r+0x388>
 8004ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ec6:	ec53 2b18 	vmov	r2, r3, d8
 8004eca:	f7fb fcbf 	bl	800084c <__aeabi_ddiv>
 8004ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ed2:	e029      	b.n	8004f28 <_dtoa_r+0x3d8>
 8004ed4:	2502      	movs	r5, #2
 8004ed6:	e7f2      	b.n	8004ebe <_dtoa_r+0x36e>
 8004ed8:	07f9      	lsls	r1, r7, #31
 8004eda:	d508      	bpl.n	8004eee <_dtoa_r+0x39e>
 8004edc:	ec51 0b18 	vmov	r0, r1, d8
 8004ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ee4:	f7fb fb88 	bl	80005f8 <__aeabi_dmul>
 8004ee8:	ec41 0b18 	vmov	d8, r0, r1
 8004eec:	3501      	adds	r5, #1
 8004eee:	107f      	asrs	r7, r7, #1
 8004ef0:	3608      	adds	r6, #8
 8004ef2:	e7e5      	b.n	8004ec0 <_dtoa_r+0x370>
 8004ef4:	f000 80a6 	beq.w	8005044 <_dtoa_r+0x4f4>
 8004ef8:	f1ca 0600 	rsb	r6, sl, #0
 8004efc:	4ba5      	ldr	r3, [pc, #660]	; (8005194 <_dtoa_r+0x644>)
 8004efe:	4fa6      	ldr	r7, [pc, #664]	; (8005198 <_dtoa_r+0x648>)
 8004f00:	f006 020f 	and.w	r2, r6, #15
 8004f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f10:	f7fb fb72 	bl	80005f8 <__aeabi_dmul>
 8004f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f18:	1136      	asrs	r6, r6, #4
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	2502      	movs	r5, #2
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	f040 8085 	bne.w	800502e <_dtoa_r+0x4de>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1d2      	bne.n	8004ece <_dtoa_r+0x37e>
 8004f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 808c 	beq.w	8005048 <_dtoa_r+0x4f8>
 8004f30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f34:	4b99      	ldr	r3, [pc, #612]	; (800519c <_dtoa_r+0x64c>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	4630      	mov	r0, r6
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	f7fb fdce 	bl	8000adc <__aeabi_dcmplt>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	f000 8081 	beq.w	8005048 <_dtoa_r+0x4f8>
 8004f46:	9b01      	ldr	r3, [sp, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d07d      	beq.n	8005048 <_dtoa_r+0x4f8>
 8004f4c:	f1b9 0f00 	cmp.w	r9, #0
 8004f50:	dd3c      	ble.n	8004fcc <_dtoa_r+0x47c>
 8004f52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004f56:	9307      	str	r3, [sp, #28]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4b91      	ldr	r3, [pc, #580]	; (80051a0 <_dtoa_r+0x650>)
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	4639      	mov	r1, r7
 8004f60:	f7fb fb4a 	bl	80005f8 <__aeabi_dmul>
 8004f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f68:	3501      	adds	r5, #1
 8004f6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004f6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f72:	4628      	mov	r0, r5
 8004f74:	f7fb fad6 	bl	8000524 <__aeabi_i2d>
 8004f78:	4632      	mov	r2, r6
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	f7fb fb3c 	bl	80005f8 <__aeabi_dmul>
 8004f80:	4b88      	ldr	r3, [pc, #544]	; (80051a4 <_dtoa_r+0x654>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	f7fb f982 	bl	800028c <__adddf3>
 8004f88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f90:	9303      	str	r3, [sp, #12]
 8004f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d15c      	bne.n	8005052 <_dtoa_r+0x502>
 8004f98:	4b83      	ldr	r3, [pc, #524]	; (80051a8 <_dtoa_r+0x658>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb f972 	bl	8000288 <__aeabi_dsub>
 8004fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fa8:	4606      	mov	r6, r0
 8004faa:	460f      	mov	r7, r1
 8004fac:	f7fb fdb4 	bl	8000b18 <__aeabi_dcmpgt>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f040 8296 	bne.w	80054e2 <_dtoa_r+0x992>
 8004fb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	f7fb fd8b 	bl	8000adc <__aeabi_dcmplt>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	f040 8288 	bne.w	80054dc <_dtoa_r+0x98c>
 8004fcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f2c0 8158 	blt.w	800528c <_dtoa_r+0x73c>
 8004fdc:	f1ba 0f0e 	cmp.w	sl, #14
 8004fe0:	f300 8154 	bgt.w	800528c <_dtoa_r+0x73c>
 8004fe4:	4b6b      	ldr	r3, [pc, #428]	; (8005194 <_dtoa_r+0x644>)
 8004fe6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004fea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f280 80e3 	bge.w	80051bc <_dtoa_r+0x66c>
 8004ff6:	9b01      	ldr	r3, [sp, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f300 80df 	bgt.w	80051bc <_dtoa_r+0x66c>
 8004ffe:	f040 826d 	bne.w	80054dc <_dtoa_r+0x98c>
 8005002:	4b69      	ldr	r3, [pc, #420]	; (80051a8 <_dtoa_r+0x658>)
 8005004:	2200      	movs	r2, #0
 8005006:	4640      	mov	r0, r8
 8005008:	4649      	mov	r1, r9
 800500a:	f7fb faf5 	bl	80005f8 <__aeabi_dmul>
 800500e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005012:	f7fb fd77 	bl	8000b04 <__aeabi_dcmpge>
 8005016:	9e01      	ldr	r6, [sp, #4]
 8005018:	4637      	mov	r7, r6
 800501a:	2800      	cmp	r0, #0
 800501c:	f040 8243 	bne.w	80054a6 <_dtoa_r+0x956>
 8005020:	9d00      	ldr	r5, [sp, #0]
 8005022:	2331      	movs	r3, #49	; 0x31
 8005024:	f805 3b01 	strb.w	r3, [r5], #1
 8005028:	f10a 0a01 	add.w	sl, sl, #1
 800502c:	e23f      	b.n	80054ae <_dtoa_r+0x95e>
 800502e:	07f2      	lsls	r2, r6, #31
 8005030:	d505      	bpl.n	800503e <_dtoa_r+0x4ee>
 8005032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005036:	f7fb fadf 	bl	80005f8 <__aeabi_dmul>
 800503a:	3501      	adds	r5, #1
 800503c:	2301      	movs	r3, #1
 800503e:	1076      	asrs	r6, r6, #1
 8005040:	3708      	adds	r7, #8
 8005042:	e76c      	b.n	8004f1e <_dtoa_r+0x3ce>
 8005044:	2502      	movs	r5, #2
 8005046:	e76f      	b.n	8004f28 <_dtoa_r+0x3d8>
 8005048:	9b01      	ldr	r3, [sp, #4]
 800504a:	f8cd a01c 	str.w	sl, [sp, #28]
 800504e:	930c      	str	r3, [sp, #48]	; 0x30
 8005050:	e78d      	b.n	8004f6e <_dtoa_r+0x41e>
 8005052:	9900      	ldr	r1, [sp, #0]
 8005054:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005058:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <_dtoa_r+0x644>)
 800505a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800505e:	4401      	add	r1, r0
 8005060:	9102      	str	r1, [sp, #8]
 8005062:	9908      	ldr	r1, [sp, #32]
 8005064:	eeb0 8a47 	vmov.f32	s16, s14
 8005068:	eef0 8a67 	vmov.f32	s17, s15
 800506c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005070:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005074:	2900      	cmp	r1, #0
 8005076:	d045      	beq.n	8005104 <_dtoa_r+0x5b4>
 8005078:	494c      	ldr	r1, [pc, #304]	; (80051ac <_dtoa_r+0x65c>)
 800507a:	2000      	movs	r0, #0
 800507c:	f7fb fbe6 	bl	800084c <__aeabi_ddiv>
 8005080:	ec53 2b18 	vmov	r2, r3, d8
 8005084:	f7fb f900 	bl	8000288 <__aeabi_dsub>
 8005088:	9d00      	ldr	r5, [sp, #0]
 800508a:	ec41 0b18 	vmov	d8, r0, r1
 800508e:	4639      	mov	r1, r7
 8005090:	4630      	mov	r0, r6
 8005092:	f7fb fd4b 	bl	8000b2c <__aeabi_d2iz>
 8005096:	900c      	str	r0, [sp, #48]	; 0x30
 8005098:	f7fb fa44 	bl	8000524 <__aeabi_i2d>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4630      	mov	r0, r6
 80050a2:	4639      	mov	r1, r7
 80050a4:	f7fb f8f0 	bl	8000288 <__aeabi_dsub>
 80050a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050aa:	3330      	adds	r3, #48	; 0x30
 80050ac:	f805 3b01 	strb.w	r3, [r5], #1
 80050b0:	ec53 2b18 	vmov	r2, r3, d8
 80050b4:	4606      	mov	r6, r0
 80050b6:	460f      	mov	r7, r1
 80050b8:	f7fb fd10 	bl	8000adc <__aeabi_dcmplt>
 80050bc:	2800      	cmp	r0, #0
 80050be:	d165      	bne.n	800518c <_dtoa_r+0x63c>
 80050c0:	4632      	mov	r2, r6
 80050c2:	463b      	mov	r3, r7
 80050c4:	4935      	ldr	r1, [pc, #212]	; (800519c <_dtoa_r+0x64c>)
 80050c6:	2000      	movs	r0, #0
 80050c8:	f7fb f8de 	bl	8000288 <__aeabi_dsub>
 80050cc:	ec53 2b18 	vmov	r2, r3, d8
 80050d0:	f7fb fd04 	bl	8000adc <__aeabi_dcmplt>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	f040 80b9 	bne.w	800524c <_dtoa_r+0x6fc>
 80050da:	9b02      	ldr	r3, [sp, #8]
 80050dc:	429d      	cmp	r5, r3
 80050de:	f43f af75 	beq.w	8004fcc <_dtoa_r+0x47c>
 80050e2:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <_dtoa_r+0x650>)
 80050e4:	ec51 0b18 	vmov	r0, r1, d8
 80050e8:	2200      	movs	r2, #0
 80050ea:	f7fb fa85 	bl	80005f8 <__aeabi_dmul>
 80050ee:	4b2c      	ldr	r3, [pc, #176]	; (80051a0 <_dtoa_r+0x650>)
 80050f0:	ec41 0b18 	vmov	d8, r0, r1
 80050f4:	2200      	movs	r2, #0
 80050f6:	4630      	mov	r0, r6
 80050f8:	4639      	mov	r1, r7
 80050fa:	f7fb fa7d 	bl	80005f8 <__aeabi_dmul>
 80050fe:	4606      	mov	r6, r0
 8005100:	460f      	mov	r7, r1
 8005102:	e7c4      	b.n	800508e <_dtoa_r+0x53e>
 8005104:	ec51 0b17 	vmov	r0, r1, d7
 8005108:	f7fb fa76 	bl	80005f8 <__aeabi_dmul>
 800510c:	9b02      	ldr	r3, [sp, #8]
 800510e:	9d00      	ldr	r5, [sp, #0]
 8005110:	930c      	str	r3, [sp, #48]	; 0x30
 8005112:	ec41 0b18 	vmov	d8, r0, r1
 8005116:	4639      	mov	r1, r7
 8005118:	4630      	mov	r0, r6
 800511a:	f7fb fd07 	bl	8000b2c <__aeabi_d2iz>
 800511e:	9011      	str	r0, [sp, #68]	; 0x44
 8005120:	f7fb fa00 	bl	8000524 <__aeabi_i2d>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4630      	mov	r0, r6
 800512a:	4639      	mov	r1, r7
 800512c:	f7fb f8ac 	bl	8000288 <__aeabi_dsub>
 8005130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005132:	3330      	adds	r3, #48	; 0x30
 8005134:	f805 3b01 	strb.w	r3, [r5], #1
 8005138:	9b02      	ldr	r3, [sp, #8]
 800513a:	429d      	cmp	r5, r3
 800513c:	4606      	mov	r6, r0
 800513e:	460f      	mov	r7, r1
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	d134      	bne.n	80051b0 <_dtoa_r+0x660>
 8005146:	4b19      	ldr	r3, [pc, #100]	; (80051ac <_dtoa_r+0x65c>)
 8005148:	ec51 0b18 	vmov	r0, r1, d8
 800514c:	f7fb f89e 	bl	800028c <__adddf3>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4630      	mov	r0, r6
 8005156:	4639      	mov	r1, r7
 8005158:	f7fb fcde 	bl	8000b18 <__aeabi_dcmpgt>
 800515c:	2800      	cmp	r0, #0
 800515e:	d175      	bne.n	800524c <_dtoa_r+0x6fc>
 8005160:	ec53 2b18 	vmov	r2, r3, d8
 8005164:	4911      	ldr	r1, [pc, #68]	; (80051ac <_dtoa_r+0x65c>)
 8005166:	2000      	movs	r0, #0
 8005168:	f7fb f88e 	bl	8000288 <__aeabi_dsub>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4630      	mov	r0, r6
 8005172:	4639      	mov	r1, r7
 8005174:	f7fb fcb2 	bl	8000adc <__aeabi_dcmplt>
 8005178:	2800      	cmp	r0, #0
 800517a:	f43f af27 	beq.w	8004fcc <_dtoa_r+0x47c>
 800517e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005180:	1e6b      	subs	r3, r5, #1
 8005182:	930c      	str	r3, [sp, #48]	; 0x30
 8005184:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005188:	2b30      	cmp	r3, #48	; 0x30
 800518a:	d0f8      	beq.n	800517e <_dtoa_r+0x62e>
 800518c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005190:	e04a      	b.n	8005228 <_dtoa_r+0x6d8>
 8005192:	bf00      	nop
 8005194:	080063d0 	.word	0x080063d0
 8005198:	080063a8 	.word	0x080063a8
 800519c:	3ff00000 	.word	0x3ff00000
 80051a0:	40240000 	.word	0x40240000
 80051a4:	401c0000 	.word	0x401c0000
 80051a8:	40140000 	.word	0x40140000
 80051ac:	3fe00000 	.word	0x3fe00000
 80051b0:	4baf      	ldr	r3, [pc, #700]	; (8005470 <_dtoa_r+0x920>)
 80051b2:	f7fb fa21 	bl	80005f8 <__aeabi_dmul>
 80051b6:	4606      	mov	r6, r0
 80051b8:	460f      	mov	r7, r1
 80051ba:	e7ac      	b.n	8005116 <_dtoa_r+0x5c6>
 80051bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051c0:	9d00      	ldr	r5, [sp, #0]
 80051c2:	4642      	mov	r2, r8
 80051c4:	464b      	mov	r3, r9
 80051c6:	4630      	mov	r0, r6
 80051c8:	4639      	mov	r1, r7
 80051ca:	f7fb fb3f 	bl	800084c <__aeabi_ddiv>
 80051ce:	f7fb fcad 	bl	8000b2c <__aeabi_d2iz>
 80051d2:	9002      	str	r0, [sp, #8]
 80051d4:	f7fb f9a6 	bl	8000524 <__aeabi_i2d>
 80051d8:	4642      	mov	r2, r8
 80051da:	464b      	mov	r3, r9
 80051dc:	f7fb fa0c 	bl	80005f8 <__aeabi_dmul>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4630      	mov	r0, r6
 80051e6:	4639      	mov	r1, r7
 80051e8:	f7fb f84e 	bl	8000288 <__aeabi_dsub>
 80051ec:	9e02      	ldr	r6, [sp, #8]
 80051ee:	9f01      	ldr	r7, [sp, #4]
 80051f0:	3630      	adds	r6, #48	; 0x30
 80051f2:	f805 6b01 	strb.w	r6, [r5], #1
 80051f6:	9e00      	ldr	r6, [sp, #0]
 80051f8:	1bae      	subs	r6, r5, r6
 80051fa:	42b7      	cmp	r7, r6
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	d137      	bne.n	8005272 <_dtoa_r+0x722>
 8005202:	f7fb f843 	bl	800028c <__adddf3>
 8005206:	4642      	mov	r2, r8
 8005208:	464b      	mov	r3, r9
 800520a:	4606      	mov	r6, r0
 800520c:	460f      	mov	r7, r1
 800520e:	f7fb fc83 	bl	8000b18 <__aeabi_dcmpgt>
 8005212:	b9c8      	cbnz	r0, 8005248 <_dtoa_r+0x6f8>
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	4630      	mov	r0, r6
 800521a:	4639      	mov	r1, r7
 800521c:	f7fb fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 8005220:	b110      	cbz	r0, 8005228 <_dtoa_r+0x6d8>
 8005222:	9b02      	ldr	r3, [sp, #8]
 8005224:	07d9      	lsls	r1, r3, #31
 8005226:	d40f      	bmi.n	8005248 <_dtoa_r+0x6f8>
 8005228:	4620      	mov	r0, r4
 800522a:	4659      	mov	r1, fp
 800522c:	f7fe fcf0 	bl	8003c10 <_Bfree>
 8005230:	2300      	movs	r3, #0
 8005232:	702b      	strb	r3, [r5, #0]
 8005234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005236:	f10a 0001 	add.w	r0, sl, #1
 800523a:	6018      	str	r0, [r3, #0]
 800523c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800523e:	2b00      	cmp	r3, #0
 8005240:	f43f acd8 	beq.w	8004bf4 <_dtoa_r+0xa4>
 8005244:	601d      	str	r5, [r3, #0]
 8005246:	e4d5      	b.n	8004bf4 <_dtoa_r+0xa4>
 8005248:	f8cd a01c 	str.w	sl, [sp, #28]
 800524c:	462b      	mov	r3, r5
 800524e:	461d      	mov	r5, r3
 8005250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005254:	2a39      	cmp	r2, #57	; 0x39
 8005256:	d108      	bne.n	800526a <_dtoa_r+0x71a>
 8005258:	9a00      	ldr	r2, [sp, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d1f7      	bne.n	800524e <_dtoa_r+0x6fe>
 800525e:	9a07      	ldr	r2, [sp, #28]
 8005260:	9900      	ldr	r1, [sp, #0]
 8005262:	3201      	adds	r2, #1
 8005264:	9207      	str	r2, [sp, #28]
 8005266:	2230      	movs	r2, #48	; 0x30
 8005268:	700a      	strb	r2, [r1, #0]
 800526a:	781a      	ldrb	r2, [r3, #0]
 800526c:	3201      	adds	r2, #1
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e78c      	b.n	800518c <_dtoa_r+0x63c>
 8005272:	4b7f      	ldr	r3, [pc, #508]	; (8005470 <_dtoa_r+0x920>)
 8005274:	2200      	movs	r2, #0
 8005276:	f7fb f9bf 	bl	80005f8 <__aeabi_dmul>
 800527a:	2200      	movs	r2, #0
 800527c:	2300      	movs	r3, #0
 800527e:	4606      	mov	r6, r0
 8005280:	460f      	mov	r7, r1
 8005282:	f7fb fc21 	bl	8000ac8 <__aeabi_dcmpeq>
 8005286:	2800      	cmp	r0, #0
 8005288:	d09b      	beq.n	80051c2 <_dtoa_r+0x672>
 800528a:	e7cd      	b.n	8005228 <_dtoa_r+0x6d8>
 800528c:	9a08      	ldr	r2, [sp, #32]
 800528e:	2a00      	cmp	r2, #0
 8005290:	f000 80c4 	beq.w	800541c <_dtoa_r+0x8cc>
 8005294:	9a05      	ldr	r2, [sp, #20]
 8005296:	2a01      	cmp	r2, #1
 8005298:	f300 80a8 	bgt.w	80053ec <_dtoa_r+0x89c>
 800529c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800529e:	2a00      	cmp	r2, #0
 80052a0:	f000 80a0 	beq.w	80053e4 <_dtoa_r+0x894>
 80052a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052a8:	9e06      	ldr	r6, [sp, #24]
 80052aa:	4645      	mov	r5, r8
 80052ac:	9a04      	ldr	r2, [sp, #16]
 80052ae:	2101      	movs	r1, #1
 80052b0:	441a      	add	r2, r3
 80052b2:	4620      	mov	r0, r4
 80052b4:	4498      	add	r8, r3
 80052b6:	9204      	str	r2, [sp, #16]
 80052b8:	f7fe fd66 	bl	8003d88 <__i2b>
 80052bc:	4607      	mov	r7, r0
 80052be:	2d00      	cmp	r5, #0
 80052c0:	dd0b      	ble.n	80052da <_dtoa_r+0x78a>
 80052c2:	9b04      	ldr	r3, [sp, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dd08      	ble.n	80052da <_dtoa_r+0x78a>
 80052c8:	42ab      	cmp	r3, r5
 80052ca:	9a04      	ldr	r2, [sp, #16]
 80052cc:	bfa8      	it	ge
 80052ce:	462b      	movge	r3, r5
 80052d0:	eba8 0803 	sub.w	r8, r8, r3
 80052d4:	1aed      	subs	r5, r5, r3
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	9304      	str	r3, [sp, #16]
 80052da:	9b06      	ldr	r3, [sp, #24]
 80052dc:	b1fb      	cbz	r3, 800531e <_dtoa_r+0x7ce>
 80052de:	9b08      	ldr	r3, [sp, #32]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 809f 	beq.w	8005424 <_dtoa_r+0x8d4>
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	dd11      	ble.n	800530e <_dtoa_r+0x7be>
 80052ea:	4639      	mov	r1, r7
 80052ec:	4632      	mov	r2, r6
 80052ee:	4620      	mov	r0, r4
 80052f0:	f7fe fe06 	bl	8003f00 <__pow5mult>
 80052f4:	465a      	mov	r2, fp
 80052f6:	4601      	mov	r1, r0
 80052f8:	4607      	mov	r7, r0
 80052fa:	4620      	mov	r0, r4
 80052fc:	f7fe fd5a 	bl	8003db4 <__multiply>
 8005300:	4659      	mov	r1, fp
 8005302:	9007      	str	r0, [sp, #28]
 8005304:	4620      	mov	r0, r4
 8005306:	f7fe fc83 	bl	8003c10 <_Bfree>
 800530a:	9b07      	ldr	r3, [sp, #28]
 800530c:	469b      	mov	fp, r3
 800530e:	9b06      	ldr	r3, [sp, #24]
 8005310:	1b9a      	subs	r2, r3, r6
 8005312:	d004      	beq.n	800531e <_dtoa_r+0x7ce>
 8005314:	4659      	mov	r1, fp
 8005316:	4620      	mov	r0, r4
 8005318:	f7fe fdf2 	bl	8003f00 <__pow5mult>
 800531c:	4683      	mov	fp, r0
 800531e:	2101      	movs	r1, #1
 8005320:	4620      	mov	r0, r4
 8005322:	f7fe fd31 	bl	8003d88 <__i2b>
 8005326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005328:	2b00      	cmp	r3, #0
 800532a:	4606      	mov	r6, r0
 800532c:	dd7c      	ble.n	8005428 <_dtoa_r+0x8d8>
 800532e:	461a      	mov	r2, r3
 8005330:	4601      	mov	r1, r0
 8005332:	4620      	mov	r0, r4
 8005334:	f7fe fde4 	bl	8003f00 <__pow5mult>
 8005338:	9b05      	ldr	r3, [sp, #20]
 800533a:	2b01      	cmp	r3, #1
 800533c:	4606      	mov	r6, r0
 800533e:	dd76      	ble.n	800542e <_dtoa_r+0x8de>
 8005340:	2300      	movs	r3, #0
 8005342:	9306      	str	r3, [sp, #24]
 8005344:	6933      	ldr	r3, [r6, #16]
 8005346:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800534a:	6918      	ldr	r0, [r3, #16]
 800534c:	f7fe fccc 	bl	8003ce8 <__hi0bits>
 8005350:	f1c0 0020 	rsb	r0, r0, #32
 8005354:	9b04      	ldr	r3, [sp, #16]
 8005356:	4418      	add	r0, r3
 8005358:	f010 001f 	ands.w	r0, r0, #31
 800535c:	f000 8086 	beq.w	800546c <_dtoa_r+0x91c>
 8005360:	f1c0 0320 	rsb	r3, r0, #32
 8005364:	2b04      	cmp	r3, #4
 8005366:	dd7f      	ble.n	8005468 <_dtoa_r+0x918>
 8005368:	f1c0 001c 	rsb	r0, r0, #28
 800536c:	9b04      	ldr	r3, [sp, #16]
 800536e:	4403      	add	r3, r0
 8005370:	4480      	add	r8, r0
 8005372:	4405      	add	r5, r0
 8005374:	9304      	str	r3, [sp, #16]
 8005376:	f1b8 0f00 	cmp.w	r8, #0
 800537a:	dd05      	ble.n	8005388 <_dtoa_r+0x838>
 800537c:	4659      	mov	r1, fp
 800537e:	4642      	mov	r2, r8
 8005380:	4620      	mov	r0, r4
 8005382:	f7fe fe17 	bl	8003fb4 <__lshift>
 8005386:	4683      	mov	fp, r0
 8005388:	9b04      	ldr	r3, [sp, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	dd05      	ble.n	800539a <_dtoa_r+0x84a>
 800538e:	4631      	mov	r1, r6
 8005390:	461a      	mov	r2, r3
 8005392:	4620      	mov	r0, r4
 8005394:	f7fe fe0e 	bl	8003fb4 <__lshift>
 8005398:	4606      	mov	r6, r0
 800539a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800539c:	2b00      	cmp	r3, #0
 800539e:	d069      	beq.n	8005474 <_dtoa_r+0x924>
 80053a0:	4631      	mov	r1, r6
 80053a2:	4658      	mov	r0, fp
 80053a4:	f7fe fe72 	bl	800408c <__mcmp>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	da63      	bge.n	8005474 <_dtoa_r+0x924>
 80053ac:	2300      	movs	r3, #0
 80053ae:	4659      	mov	r1, fp
 80053b0:	220a      	movs	r2, #10
 80053b2:	4620      	mov	r0, r4
 80053b4:	f7fe fc4e 	bl	8003c54 <__multadd>
 80053b8:	9b08      	ldr	r3, [sp, #32]
 80053ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053be:	4683      	mov	fp, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 818f 	beq.w	80056e4 <_dtoa_r+0xb94>
 80053c6:	4639      	mov	r1, r7
 80053c8:	2300      	movs	r3, #0
 80053ca:	220a      	movs	r2, #10
 80053cc:	4620      	mov	r0, r4
 80053ce:	f7fe fc41 	bl	8003c54 <__multadd>
 80053d2:	f1b9 0f00 	cmp.w	r9, #0
 80053d6:	4607      	mov	r7, r0
 80053d8:	f300 808e 	bgt.w	80054f8 <_dtoa_r+0x9a8>
 80053dc:	9b05      	ldr	r3, [sp, #20]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	dc50      	bgt.n	8005484 <_dtoa_r+0x934>
 80053e2:	e089      	b.n	80054f8 <_dtoa_r+0x9a8>
 80053e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80053ea:	e75d      	b.n	80052a8 <_dtoa_r+0x758>
 80053ec:	9b01      	ldr	r3, [sp, #4]
 80053ee:	1e5e      	subs	r6, r3, #1
 80053f0:	9b06      	ldr	r3, [sp, #24]
 80053f2:	42b3      	cmp	r3, r6
 80053f4:	bfbf      	itttt	lt
 80053f6:	9b06      	ldrlt	r3, [sp, #24]
 80053f8:	9606      	strlt	r6, [sp, #24]
 80053fa:	1af2      	sublt	r2, r6, r3
 80053fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80053fe:	bfb6      	itet	lt
 8005400:	189b      	addlt	r3, r3, r2
 8005402:	1b9e      	subge	r6, r3, r6
 8005404:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005406:	9b01      	ldr	r3, [sp, #4]
 8005408:	bfb8      	it	lt
 800540a:	2600      	movlt	r6, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	bfb5      	itete	lt
 8005410:	eba8 0503 	sublt.w	r5, r8, r3
 8005414:	9b01      	ldrge	r3, [sp, #4]
 8005416:	2300      	movlt	r3, #0
 8005418:	4645      	movge	r5, r8
 800541a:	e747      	b.n	80052ac <_dtoa_r+0x75c>
 800541c:	9e06      	ldr	r6, [sp, #24]
 800541e:	9f08      	ldr	r7, [sp, #32]
 8005420:	4645      	mov	r5, r8
 8005422:	e74c      	b.n	80052be <_dtoa_r+0x76e>
 8005424:	9a06      	ldr	r2, [sp, #24]
 8005426:	e775      	b.n	8005314 <_dtoa_r+0x7c4>
 8005428:	9b05      	ldr	r3, [sp, #20]
 800542a:	2b01      	cmp	r3, #1
 800542c:	dc18      	bgt.n	8005460 <_dtoa_r+0x910>
 800542e:	9b02      	ldr	r3, [sp, #8]
 8005430:	b9b3      	cbnz	r3, 8005460 <_dtoa_r+0x910>
 8005432:	9b03      	ldr	r3, [sp, #12]
 8005434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005438:	b9a3      	cbnz	r3, 8005464 <_dtoa_r+0x914>
 800543a:	9b03      	ldr	r3, [sp, #12]
 800543c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005440:	0d1b      	lsrs	r3, r3, #20
 8005442:	051b      	lsls	r3, r3, #20
 8005444:	b12b      	cbz	r3, 8005452 <_dtoa_r+0x902>
 8005446:	9b04      	ldr	r3, [sp, #16]
 8005448:	3301      	adds	r3, #1
 800544a:	9304      	str	r3, [sp, #16]
 800544c:	f108 0801 	add.w	r8, r8, #1
 8005450:	2301      	movs	r3, #1
 8005452:	9306      	str	r3, [sp, #24]
 8005454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005456:	2b00      	cmp	r3, #0
 8005458:	f47f af74 	bne.w	8005344 <_dtoa_r+0x7f4>
 800545c:	2001      	movs	r0, #1
 800545e:	e779      	b.n	8005354 <_dtoa_r+0x804>
 8005460:	2300      	movs	r3, #0
 8005462:	e7f6      	b.n	8005452 <_dtoa_r+0x902>
 8005464:	9b02      	ldr	r3, [sp, #8]
 8005466:	e7f4      	b.n	8005452 <_dtoa_r+0x902>
 8005468:	d085      	beq.n	8005376 <_dtoa_r+0x826>
 800546a:	4618      	mov	r0, r3
 800546c:	301c      	adds	r0, #28
 800546e:	e77d      	b.n	800536c <_dtoa_r+0x81c>
 8005470:	40240000 	.word	0x40240000
 8005474:	9b01      	ldr	r3, [sp, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	dc38      	bgt.n	80054ec <_dtoa_r+0x99c>
 800547a:	9b05      	ldr	r3, [sp, #20]
 800547c:	2b02      	cmp	r3, #2
 800547e:	dd35      	ble.n	80054ec <_dtoa_r+0x99c>
 8005480:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005484:	f1b9 0f00 	cmp.w	r9, #0
 8005488:	d10d      	bne.n	80054a6 <_dtoa_r+0x956>
 800548a:	4631      	mov	r1, r6
 800548c:	464b      	mov	r3, r9
 800548e:	2205      	movs	r2, #5
 8005490:	4620      	mov	r0, r4
 8005492:	f7fe fbdf 	bl	8003c54 <__multadd>
 8005496:	4601      	mov	r1, r0
 8005498:	4606      	mov	r6, r0
 800549a:	4658      	mov	r0, fp
 800549c:	f7fe fdf6 	bl	800408c <__mcmp>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	f73f adbd 	bgt.w	8005020 <_dtoa_r+0x4d0>
 80054a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a8:	9d00      	ldr	r5, [sp, #0]
 80054aa:	ea6f 0a03 	mvn.w	sl, r3
 80054ae:	f04f 0800 	mov.w	r8, #0
 80054b2:	4631      	mov	r1, r6
 80054b4:	4620      	mov	r0, r4
 80054b6:	f7fe fbab 	bl	8003c10 <_Bfree>
 80054ba:	2f00      	cmp	r7, #0
 80054bc:	f43f aeb4 	beq.w	8005228 <_dtoa_r+0x6d8>
 80054c0:	f1b8 0f00 	cmp.w	r8, #0
 80054c4:	d005      	beq.n	80054d2 <_dtoa_r+0x982>
 80054c6:	45b8      	cmp	r8, r7
 80054c8:	d003      	beq.n	80054d2 <_dtoa_r+0x982>
 80054ca:	4641      	mov	r1, r8
 80054cc:	4620      	mov	r0, r4
 80054ce:	f7fe fb9f 	bl	8003c10 <_Bfree>
 80054d2:	4639      	mov	r1, r7
 80054d4:	4620      	mov	r0, r4
 80054d6:	f7fe fb9b 	bl	8003c10 <_Bfree>
 80054da:	e6a5      	b.n	8005228 <_dtoa_r+0x6d8>
 80054dc:	2600      	movs	r6, #0
 80054de:	4637      	mov	r7, r6
 80054e0:	e7e1      	b.n	80054a6 <_dtoa_r+0x956>
 80054e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80054e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80054e8:	4637      	mov	r7, r6
 80054ea:	e599      	b.n	8005020 <_dtoa_r+0x4d0>
 80054ec:	9b08      	ldr	r3, [sp, #32]
 80054ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80fd 	beq.w	80056f2 <_dtoa_r+0xba2>
 80054f8:	2d00      	cmp	r5, #0
 80054fa:	dd05      	ble.n	8005508 <_dtoa_r+0x9b8>
 80054fc:	4639      	mov	r1, r7
 80054fe:	462a      	mov	r2, r5
 8005500:	4620      	mov	r0, r4
 8005502:	f7fe fd57 	bl	8003fb4 <__lshift>
 8005506:	4607      	mov	r7, r0
 8005508:	9b06      	ldr	r3, [sp, #24]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d05c      	beq.n	80055c8 <_dtoa_r+0xa78>
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4620      	mov	r0, r4
 8005512:	f7fe fb3d 	bl	8003b90 <_Balloc>
 8005516:	4605      	mov	r5, r0
 8005518:	b928      	cbnz	r0, 8005526 <_dtoa_r+0x9d6>
 800551a:	4b80      	ldr	r3, [pc, #512]	; (800571c <_dtoa_r+0xbcc>)
 800551c:	4602      	mov	r2, r0
 800551e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005522:	f7ff bb2e 	b.w	8004b82 <_dtoa_r+0x32>
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	3202      	adds	r2, #2
 800552a:	0092      	lsls	r2, r2, #2
 800552c:	f107 010c 	add.w	r1, r7, #12
 8005530:	300c      	adds	r0, #12
 8005532:	f000 f913 	bl	800575c <memcpy>
 8005536:	2201      	movs	r2, #1
 8005538:	4629      	mov	r1, r5
 800553a:	4620      	mov	r0, r4
 800553c:	f7fe fd3a 	bl	8003fb4 <__lshift>
 8005540:	9b00      	ldr	r3, [sp, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	9b00      	ldr	r3, [sp, #0]
 8005548:	444b      	add	r3, r9
 800554a:	9307      	str	r3, [sp, #28]
 800554c:	9b02      	ldr	r3, [sp, #8]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	46b8      	mov	r8, r7
 8005554:	9306      	str	r3, [sp, #24]
 8005556:	4607      	mov	r7, r0
 8005558:	9b01      	ldr	r3, [sp, #4]
 800555a:	4631      	mov	r1, r6
 800555c:	3b01      	subs	r3, #1
 800555e:	4658      	mov	r0, fp
 8005560:	9302      	str	r3, [sp, #8]
 8005562:	f7ff fa67 	bl	8004a34 <quorem>
 8005566:	4603      	mov	r3, r0
 8005568:	3330      	adds	r3, #48	; 0x30
 800556a:	9004      	str	r0, [sp, #16]
 800556c:	4641      	mov	r1, r8
 800556e:	4658      	mov	r0, fp
 8005570:	9308      	str	r3, [sp, #32]
 8005572:	f7fe fd8b 	bl	800408c <__mcmp>
 8005576:	463a      	mov	r2, r7
 8005578:	4681      	mov	r9, r0
 800557a:	4631      	mov	r1, r6
 800557c:	4620      	mov	r0, r4
 800557e:	f7fe fda1 	bl	80040c4 <__mdiff>
 8005582:	68c2      	ldr	r2, [r0, #12]
 8005584:	9b08      	ldr	r3, [sp, #32]
 8005586:	4605      	mov	r5, r0
 8005588:	bb02      	cbnz	r2, 80055cc <_dtoa_r+0xa7c>
 800558a:	4601      	mov	r1, r0
 800558c:	4658      	mov	r0, fp
 800558e:	f7fe fd7d 	bl	800408c <__mcmp>
 8005592:	9b08      	ldr	r3, [sp, #32]
 8005594:	4602      	mov	r2, r0
 8005596:	4629      	mov	r1, r5
 8005598:	4620      	mov	r0, r4
 800559a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800559e:	f7fe fb37 	bl	8003c10 <_Bfree>
 80055a2:	9b05      	ldr	r3, [sp, #20]
 80055a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a6:	9d01      	ldr	r5, [sp, #4]
 80055a8:	ea43 0102 	orr.w	r1, r3, r2
 80055ac:	9b06      	ldr	r3, [sp, #24]
 80055ae:	430b      	orrs	r3, r1
 80055b0:	9b08      	ldr	r3, [sp, #32]
 80055b2:	d10d      	bne.n	80055d0 <_dtoa_r+0xa80>
 80055b4:	2b39      	cmp	r3, #57	; 0x39
 80055b6:	d029      	beq.n	800560c <_dtoa_r+0xabc>
 80055b8:	f1b9 0f00 	cmp.w	r9, #0
 80055bc:	dd01      	ble.n	80055c2 <_dtoa_r+0xa72>
 80055be:	9b04      	ldr	r3, [sp, #16]
 80055c0:	3331      	adds	r3, #49	; 0x31
 80055c2:	9a02      	ldr	r2, [sp, #8]
 80055c4:	7013      	strb	r3, [r2, #0]
 80055c6:	e774      	b.n	80054b2 <_dtoa_r+0x962>
 80055c8:	4638      	mov	r0, r7
 80055ca:	e7b9      	b.n	8005540 <_dtoa_r+0x9f0>
 80055cc:	2201      	movs	r2, #1
 80055ce:	e7e2      	b.n	8005596 <_dtoa_r+0xa46>
 80055d0:	f1b9 0f00 	cmp.w	r9, #0
 80055d4:	db06      	blt.n	80055e4 <_dtoa_r+0xa94>
 80055d6:	9905      	ldr	r1, [sp, #20]
 80055d8:	ea41 0909 	orr.w	r9, r1, r9
 80055dc:	9906      	ldr	r1, [sp, #24]
 80055de:	ea59 0101 	orrs.w	r1, r9, r1
 80055e2:	d120      	bne.n	8005626 <_dtoa_r+0xad6>
 80055e4:	2a00      	cmp	r2, #0
 80055e6:	ddec      	ble.n	80055c2 <_dtoa_r+0xa72>
 80055e8:	4659      	mov	r1, fp
 80055ea:	2201      	movs	r2, #1
 80055ec:	4620      	mov	r0, r4
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	f7fe fce0 	bl	8003fb4 <__lshift>
 80055f4:	4631      	mov	r1, r6
 80055f6:	4683      	mov	fp, r0
 80055f8:	f7fe fd48 	bl	800408c <__mcmp>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	9b01      	ldr	r3, [sp, #4]
 8005600:	dc02      	bgt.n	8005608 <_dtoa_r+0xab8>
 8005602:	d1de      	bne.n	80055c2 <_dtoa_r+0xa72>
 8005604:	07da      	lsls	r2, r3, #31
 8005606:	d5dc      	bpl.n	80055c2 <_dtoa_r+0xa72>
 8005608:	2b39      	cmp	r3, #57	; 0x39
 800560a:	d1d8      	bne.n	80055be <_dtoa_r+0xa6e>
 800560c:	9a02      	ldr	r2, [sp, #8]
 800560e:	2339      	movs	r3, #57	; 0x39
 8005610:	7013      	strb	r3, [r2, #0]
 8005612:	462b      	mov	r3, r5
 8005614:	461d      	mov	r5, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800561c:	2a39      	cmp	r2, #57	; 0x39
 800561e:	d050      	beq.n	80056c2 <_dtoa_r+0xb72>
 8005620:	3201      	adds	r2, #1
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e745      	b.n	80054b2 <_dtoa_r+0x962>
 8005626:	2a00      	cmp	r2, #0
 8005628:	dd03      	ble.n	8005632 <_dtoa_r+0xae2>
 800562a:	2b39      	cmp	r3, #57	; 0x39
 800562c:	d0ee      	beq.n	800560c <_dtoa_r+0xabc>
 800562e:	3301      	adds	r3, #1
 8005630:	e7c7      	b.n	80055c2 <_dtoa_r+0xa72>
 8005632:	9a01      	ldr	r2, [sp, #4]
 8005634:	9907      	ldr	r1, [sp, #28]
 8005636:	f802 3c01 	strb.w	r3, [r2, #-1]
 800563a:	428a      	cmp	r2, r1
 800563c:	d02a      	beq.n	8005694 <_dtoa_r+0xb44>
 800563e:	4659      	mov	r1, fp
 8005640:	2300      	movs	r3, #0
 8005642:	220a      	movs	r2, #10
 8005644:	4620      	mov	r0, r4
 8005646:	f7fe fb05 	bl	8003c54 <__multadd>
 800564a:	45b8      	cmp	r8, r7
 800564c:	4683      	mov	fp, r0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	f04f 020a 	mov.w	r2, #10
 8005656:	4641      	mov	r1, r8
 8005658:	4620      	mov	r0, r4
 800565a:	d107      	bne.n	800566c <_dtoa_r+0xb1c>
 800565c:	f7fe fafa 	bl	8003c54 <__multadd>
 8005660:	4680      	mov	r8, r0
 8005662:	4607      	mov	r7, r0
 8005664:	9b01      	ldr	r3, [sp, #4]
 8005666:	3301      	adds	r3, #1
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	e775      	b.n	8005558 <_dtoa_r+0xa08>
 800566c:	f7fe faf2 	bl	8003c54 <__multadd>
 8005670:	4639      	mov	r1, r7
 8005672:	4680      	mov	r8, r0
 8005674:	2300      	movs	r3, #0
 8005676:	220a      	movs	r2, #10
 8005678:	4620      	mov	r0, r4
 800567a:	f7fe faeb 	bl	8003c54 <__multadd>
 800567e:	4607      	mov	r7, r0
 8005680:	e7f0      	b.n	8005664 <_dtoa_r+0xb14>
 8005682:	f1b9 0f00 	cmp.w	r9, #0
 8005686:	9a00      	ldr	r2, [sp, #0]
 8005688:	bfcc      	ite	gt
 800568a:	464d      	movgt	r5, r9
 800568c:	2501      	movle	r5, #1
 800568e:	4415      	add	r5, r2
 8005690:	f04f 0800 	mov.w	r8, #0
 8005694:	4659      	mov	r1, fp
 8005696:	2201      	movs	r2, #1
 8005698:	4620      	mov	r0, r4
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	f7fe fc8a 	bl	8003fb4 <__lshift>
 80056a0:	4631      	mov	r1, r6
 80056a2:	4683      	mov	fp, r0
 80056a4:	f7fe fcf2 	bl	800408c <__mcmp>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	dcb2      	bgt.n	8005612 <_dtoa_r+0xac2>
 80056ac:	d102      	bne.n	80056b4 <_dtoa_r+0xb64>
 80056ae:	9b01      	ldr	r3, [sp, #4]
 80056b0:	07db      	lsls	r3, r3, #31
 80056b2:	d4ae      	bmi.n	8005612 <_dtoa_r+0xac2>
 80056b4:	462b      	mov	r3, r5
 80056b6:	461d      	mov	r5, r3
 80056b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056bc:	2a30      	cmp	r2, #48	; 0x30
 80056be:	d0fa      	beq.n	80056b6 <_dtoa_r+0xb66>
 80056c0:	e6f7      	b.n	80054b2 <_dtoa_r+0x962>
 80056c2:	9a00      	ldr	r2, [sp, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d1a5      	bne.n	8005614 <_dtoa_r+0xac4>
 80056c8:	f10a 0a01 	add.w	sl, sl, #1
 80056cc:	2331      	movs	r3, #49	; 0x31
 80056ce:	e779      	b.n	80055c4 <_dtoa_r+0xa74>
 80056d0:	4b13      	ldr	r3, [pc, #76]	; (8005720 <_dtoa_r+0xbd0>)
 80056d2:	f7ff baaf 	b.w	8004c34 <_dtoa_r+0xe4>
 80056d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f47f aa86 	bne.w	8004bea <_dtoa_r+0x9a>
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <_dtoa_r+0xbd4>)
 80056e0:	f7ff baa8 	b.w	8004c34 <_dtoa_r+0xe4>
 80056e4:	f1b9 0f00 	cmp.w	r9, #0
 80056e8:	dc03      	bgt.n	80056f2 <_dtoa_r+0xba2>
 80056ea:	9b05      	ldr	r3, [sp, #20]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	f73f aec9 	bgt.w	8005484 <_dtoa_r+0x934>
 80056f2:	9d00      	ldr	r5, [sp, #0]
 80056f4:	4631      	mov	r1, r6
 80056f6:	4658      	mov	r0, fp
 80056f8:	f7ff f99c 	bl	8004a34 <quorem>
 80056fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005700:	f805 3b01 	strb.w	r3, [r5], #1
 8005704:	9a00      	ldr	r2, [sp, #0]
 8005706:	1aaa      	subs	r2, r5, r2
 8005708:	4591      	cmp	r9, r2
 800570a:	ddba      	ble.n	8005682 <_dtoa_r+0xb32>
 800570c:	4659      	mov	r1, fp
 800570e:	2300      	movs	r3, #0
 8005710:	220a      	movs	r2, #10
 8005712:	4620      	mov	r0, r4
 8005714:	f7fe fa9e 	bl	8003c54 <__multadd>
 8005718:	4683      	mov	fp, r0
 800571a:	e7eb      	b.n	80056f4 <_dtoa_r+0xba4>
 800571c:	08006393 	.word	0x08006393
 8005720:	08006520 	.word	0x08006520
 8005724:	08006513 	.word	0x08006513

08005728 <fiprintf>:
 8005728:	b40e      	push	{r1, r2, r3}
 800572a:	b503      	push	{r0, r1, lr}
 800572c:	4601      	mov	r1, r0
 800572e:	ab03      	add	r3, sp, #12
 8005730:	4805      	ldr	r0, [pc, #20]	; (8005748 <fiprintf+0x20>)
 8005732:	f853 2b04 	ldr.w	r2, [r3], #4
 8005736:	6800      	ldr	r0, [r0, #0]
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	f000 f8c5 	bl	80058c8 <_vfiprintf_r>
 800573e:	b002      	add	sp, #8
 8005740:	f85d eb04 	ldr.w	lr, [sp], #4
 8005744:	b003      	add	sp, #12
 8005746:	4770      	bx	lr
 8005748:	2000000c 	.word	0x2000000c

0800574c <malloc>:
 800574c:	4b02      	ldr	r3, [pc, #8]	; (8005758 <malloc+0xc>)
 800574e:	4601      	mov	r1, r0
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	f7fe bdc9 	b.w	80042e8 <_malloc_r>
 8005756:	bf00      	nop
 8005758:	2000000c 	.word	0x2000000c

0800575c <memcpy>:
 800575c:	440a      	add	r2, r1
 800575e:	4291      	cmp	r1, r2
 8005760:	f100 33ff 	add.w	r3, r0, #4294967295
 8005764:	d100      	bne.n	8005768 <memcpy+0xc>
 8005766:	4770      	bx	lr
 8005768:	b510      	push	{r4, lr}
 800576a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800576e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005772:	4291      	cmp	r1, r2
 8005774:	d1f9      	bne.n	800576a <memcpy+0xe>
 8005776:	bd10      	pop	{r4, pc}

08005778 <memmove>:
 8005778:	4288      	cmp	r0, r1
 800577a:	b510      	push	{r4, lr}
 800577c:	eb01 0402 	add.w	r4, r1, r2
 8005780:	d902      	bls.n	8005788 <memmove+0x10>
 8005782:	4284      	cmp	r4, r0
 8005784:	4623      	mov	r3, r4
 8005786:	d807      	bhi.n	8005798 <memmove+0x20>
 8005788:	1e43      	subs	r3, r0, #1
 800578a:	42a1      	cmp	r1, r4
 800578c:	d008      	beq.n	80057a0 <memmove+0x28>
 800578e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005796:	e7f8      	b.n	800578a <memmove+0x12>
 8005798:	4402      	add	r2, r0
 800579a:	4601      	mov	r1, r0
 800579c:	428a      	cmp	r2, r1
 800579e:	d100      	bne.n	80057a2 <memmove+0x2a>
 80057a0:	bd10      	pop	{r4, pc}
 80057a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057aa:	e7f7      	b.n	800579c <memmove+0x24>

080057ac <__malloc_lock>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__malloc_lock+0x8>)
 80057ae:	f000 bc3b 	b.w	8006028 <__retarget_lock_acquire_recursive>
 80057b2:	bf00      	nop
 80057b4:	20000194 	.word	0x20000194

080057b8 <__malloc_unlock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__malloc_unlock+0x8>)
 80057ba:	f000 bc36 	b.w	800602a <__retarget_lock_release_recursive>
 80057be:	bf00      	nop
 80057c0:	20000194 	.word	0x20000194

080057c4 <_free_r>:
 80057c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057c6:	2900      	cmp	r1, #0
 80057c8:	d048      	beq.n	800585c <_free_r+0x98>
 80057ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ce:	9001      	str	r0, [sp, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f1a1 0404 	sub.w	r4, r1, #4
 80057d6:	bfb8      	it	lt
 80057d8:	18e4      	addlt	r4, r4, r3
 80057da:	f7ff ffe7 	bl	80057ac <__malloc_lock>
 80057de:	4a20      	ldr	r2, [pc, #128]	; (8005860 <_free_r+0x9c>)
 80057e0:	9801      	ldr	r0, [sp, #4]
 80057e2:	6813      	ldr	r3, [r2, #0]
 80057e4:	4615      	mov	r5, r2
 80057e6:	b933      	cbnz	r3, 80057f6 <_free_r+0x32>
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	6014      	str	r4, [r2, #0]
 80057ec:	b003      	add	sp, #12
 80057ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057f2:	f7ff bfe1 	b.w	80057b8 <__malloc_unlock>
 80057f6:	42a3      	cmp	r3, r4
 80057f8:	d90b      	bls.n	8005812 <_free_r+0x4e>
 80057fa:	6821      	ldr	r1, [r4, #0]
 80057fc:	1862      	adds	r2, r4, r1
 80057fe:	4293      	cmp	r3, r2
 8005800:	bf04      	itt	eq
 8005802:	681a      	ldreq	r2, [r3, #0]
 8005804:	685b      	ldreq	r3, [r3, #4]
 8005806:	6063      	str	r3, [r4, #4]
 8005808:	bf04      	itt	eq
 800580a:	1852      	addeq	r2, r2, r1
 800580c:	6022      	streq	r2, [r4, #0]
 800580e:	602c      	str	r4, [r5, #0]
 8005810:	e7ec      	b.n	80057ec <_free_r+0x28>
 8005812:	461a      	mov	r2, r3
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	b10b      	cbz	r3, 800581c <_free_r+0x58>
 8005818:	42a3      	cmp	r3, r4
 800581a:	d9fa      	bls.n	8005812 <_free_r+0x4e>
 800581c:	6811      	ldr	r1, [r2, #0]
 800581e:	1855      	adds	r5, r2, r1
 8005820:	42a5      	cmp	r5, r4
 8005822:	d10b      	bne.n	800583c <_free_r+0x78>
 8005824:	6824      	ldr	r4, [r4, #0]
 8005826:	4421      	add	r1, r4
 8005828:	1854      	adds	r4, r2, r1
 800582a:	42a3      	cmp	r3, r4
 800582c:	6011      	str	r1, [r2, #0]
 800582e:	d1dd      	bne.n	80057ec <_free_r+0x28>
 8005830:	681c      	ldr	r4, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	6053      	str	r3, [r2, #4]
 8005836:	4421      	add	r1, r4
 8005838:	6011      	str	r1, [r2, #0]
 800583a:	e7d7      	b.n	80057ec <_free_r+0x28>
 800583c:	d902      	bls.n	8005844 <_free_r+0x80>
 800583e:	230c      	movs	r3, #12
 8005840:	6003      	str	r3, [r0, #0]
 8005842:	e7d3      	b.n	80057ec <_free_r+0x28>
 8005844:	6825      	ldr	r5, [r4, #0]
 8005846:	1961      	adds	r1, r4, r5
 8005848:	428b      	cmp	r3, r1
 800584a:	bf04      	itt	eq
 800584c:	6819      	ldreq	r1, [r3, #0]
 800584e:	685b      	ldreq	r3, [r3, #4]
 8005850:	6063      	str	r3, [r4, #4]
 8005852:	bf04      	itt	eq
 8005854:	1949      	addeq	r1, r1, r5
 8005856:	6021      	streq	r1, [r4, #0]
 8005858:	6054      	str	r4, [r2, #4]
 800585a:	e7c7      	b.n	80057ec <_free_r+0x28>
 800585c:	b003      	add	sp, #12
 800585e:	bd30      	pop	{r4, r5, pc}
 8005860:	20000098 	.word	0x20000098

08005864 <_malloc_usable_size_r>:
 8005864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005868:	1f18      	subs	r0, r3, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	bfbc      	itt	lt
 800586e:	580b      	ldrlt	r3, [r1, r0]
 8005870:	18c0      	addlt	r0, r0, r3
 8005872:	4770      	bx	lr

08005874 <__sfputc_r>:
 8005874:	6893      	ldr	r3, [r2, #8]
 8005876:	3b01      	subs	r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	b410      	push	{r4}
 800587c:	6093      	str	r3, [r2, #8]
 800587e:	da08      	bge.n	8005892 <__sfputc_r+0x1e>
 8005880:	6994      	ldr	r4, [r2, #24]
 8005882:	42a3      	cmp	r3, r4
 8005884:	db01      	blt.n	800588a <__sfputc_r+0x16>
 8005886:	290a      	cmp	r1, #10
 8005888:	d103      	bne.n	8005892 <__sfputc_r+0x1e>
 800588a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800588e:	f000 b94b 	b.w	8005b28 <__swbuf_r>
 8005892:	6813      	ldr	r3, [r2, #0]
 8005894:	1c58      	adds	r0, r3, #1
 8005896:	6010      	str	r0, [r2, #0]
 8005898:	7019      	strb	r1, [r3, #0]
 800589a:	4608      	mov	r0, r1
 800589c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <__sfputs_r>:
 80058a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a4:	4606      	mov	r6, r0
 80058a6:	460f      	mov	r7, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	18d5      	adds	r5, r2, r3
 80058ac:	42ac      	cmp	r4, r5
 80058ae:	d101      	bne.n	80058b4 <__sfputs_r+0x12>
 80058b0:	2000      	movs	r0, #0
 80058b2:	e007      	b.n	80058c4 <__sfputs_r+0x22>
 80058b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b8:	463a      	mov	r2, r7
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff ffda 	bl	8005874 <__sfputc_r>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d1f3      	bne.n	80058ac <__sfputs_r+0xa>
 80058c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058c8 <_vfiprintf_r>:
 80058c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058cc:	460d      	mov	r5, r1
 80058ce:	b09d      	sub	sp, #116	; 0x74
 80058d0:	4614      	mov	r4, r2
 80058d2:	4698      	mov	r8, r3
 80058d4:	4606      	mov	r6, r0
 80058d6:	b118      	cbz	r0, 80058e0 <_vfiprintf_r+0x18>
 80058d8:	6983      	ldr	r3, [r0, #24]
 80058da:	b90b      	cbnz	r3, 80058e0 <_vfiprintf_r+0x18>
 80058dc:	f000 fb06 	bl	8005eec <__sinit>
 80058e0:	4b89      	ldr	r3, [pc, #548]	; (8005b08 <_vfiprintf_r+0x240>)
 80058e2:	429d      	cmp	r5, r3
 80058e4:	d11b      	bne.n	800591e <_vfiprintf_r+0x56>
 80058e6:	6875      	ldr	r5, [r6, #4]
 80058e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058ea:	07d9      	lsls	r1, r3, #31
 80058ec:	d405      	bmi.n	80058fa <_vfiprintf_r+0x32>
 80058ee:	89ab      	ldrh	r3, [r5, #12]
 80058f0:	059a      	lsls	r2, r3, #22
 80058f2:	d402      	bmi.n	80058fa <_vfiprintf_r+0x32>
 80058f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058f6:	f000 fb97 	bl	8006028 <__retarget_lock_acquire_recursive>
 80058fa:	89ab      	ldrh	r3, [r5, #12]
 80058fc:	071b      	lsls	r3, r3, #28
 80058fe:	d501      	bpl.n	8005904 <_vfiprintf_r+0x3c>
 8005900:	692b      	ldr	r3, [r5, #16]
 8005902:	b9eb      	cbnz	r3, 8005940 <_vfiprintf_r+0x78>
 8005904:	4629      	mov	r1, r5
 8005906:	4630      	mov	r0, r6
 8005908:	f000 f960 	bl	8005bcc <__swsetup_r>
 800590c:	b1c0      	cbz	r0, 8005940 <_vfiprintf_r+0x78>
 800590e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005910:	07dc      	lsls	r4, r3, #31
 8005912:	d50e      	bpl.n	8005932 <_vfiprintf_r+0x6a>
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	b01d      	add	sp, #116	; 0x74
 800591a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591e:	4b7b      	ldr	r3, [pc, #492]	; (8005b0c <_vfiprintf_r+0x244>)
 8005920:	429d      	cmp	r5, r3
 8005922:	d101      	bne.n	8005928 <_vfiprintf_r+0x60>
 8005924:	68b5      	ldr	r5, [r6, #8]
 8005926:	e7df      	b.n	80058e8 <_vfiprintf_r+0x20>
 8005928:	4b79      	ldr	r3, [pc, #484]	; (8005b10 <_vfiprintf_r+0x248>)
 800592a:	429d      	cmp	r5, r3
 800592c:	bf08      	it	eq
 800592e:	68f5      	ldreq	r5, [r6, #12]
 8005930:	e7da      	b.n	80058e8 <_vfiprintf_r+0x20>
 8005932:	89ab      	ldrh	r3, [r5, #12]
 8005934:	0598      	lsls	r0, r3, #22
 8005936:	d4ed      	bmi.n	8005914 <_vfiprintf_r+0x4c>
 8005938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800593a:	f000 fb76 	bl	800602a <__retarget_lock_release_recursive>
 800593e:	e7e9      	b.n	8005914 <_vfiprintf_r+0x4c>
 8005940:	2300      	movs	r3, #0
 8005942:	9309      	str	r3, [sp, #36]	; 0x24
 8005944:	2320      	movs	r3, #32
 8005946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800594a:	f8cd 800c 	str.w	r8, [sp, #12]
 800594e:	2330      	movs	r3, #48	; 0x30
 8005950:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b14 <_vfiprintf_r+0x24c>
 8005954:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005958:	f04f 0901 	mov.w	r9, #1
 800595c:	4623      	mov	r3, r4
 800595e:	469a      	mov	sl, r3
 8005960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005964:	b10a      	cbz	r2, 800596a <_vfiprintf_r+0xa2>
 8005966:	2a25      	cmp	r2, #37	; 0x25
 8005968:	d1f9      	bne.n	800595e <_vfiprintf_r+0x96>
 800596a:	ebba 0b04 	subs.w	fp, sl, r4
 800596e:	d00b      	beq.n	8005988 <_vfiprintf_r+0xc0>
 8005970:	465b      	mov	r3, fp
 8005972:	4622      	mov	r2, r4
 8005974:	4629      	mov	r1, r5
 8005976:	4630      	mov	r0, r6
 8005978:	f7ff ff93 	bl	80058a2 <__sfputs_r>
 800597c:	3001      	adds	r0, #1
 800597e:	f000 80aa 	beq.w	8005ad6 <_vfiprintf_r+0x20e>
 8005982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005984:	445a      	add	r2, fp
 8005986:	9209      	str	r2, [sp, #36]	; 0x24
 8005988:	f89a 3000 	ldrb.w	r3, [sl]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80a2 	beq.w	8005ad6 <_vfiprintf_r+0x20e>
 8005992:	2300      	movs	r3, #0
 8005994:	f04f 32ff 	mov.w	r2, #4294967295
 8005998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800599c:	f10a 0a01 	add.w	sl, sl, #1
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	9307      	str	r3, [sp, #28]
 80059a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059a8:	931a      	str	r3, [sp, #104]	; 0x68
 80059aa:	4654      	mov	r4, sl
 80059ac:	2205      	movs	r2, #5
 80059ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b2:	4858      	ldr	r0, [pc, #352]	; (8005b14 <_vfiprintf_r+0x24c>)
 80059b4:	f7fa fc14 	bl	80001e0 <memchr>
 80059b8:	9a04      	ldr	r2, [sp, #16]
 80059ba:	b9d8      	cbnz	r0, 80059f4 <_vfiprintf_r+0x12c>
 80059bc:	06d1      	lsls	r1, r2, #27
 80059be:	bf44      	itt	mi
 80059c0:	2320      	movmi	r3, #32
 80059c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059c6:	0713      	lsls	r3, r2, #28
 80059c8:	bf44      	itt	mi
 80059ca:	232b      	movmi	r3, #43	; 0x2b
 80059cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d0:	f89a 3000 	ldrb.w	r3, [sl]
 80059d4:	2b2a      	cmp	r3, #42	; 0x2a
 80059d6:	d015      	beq.n	8005a04 <_vfiprintf_r+0x13c>
 80059d8:	9a07      	ldr	r2, [sp, #28]
 80059da:	4654      	mov	r4, sl
 80059dc:	2000      	movs	r0, #0
 80059de:	f04f 0c0a 	mov.w	ip, #10
 80059e2:	4621      	mov	r1, r4
 80059e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059e8:	3b30      	subs	r3, #48	; 0x30
 80059ea:	2b09      	cmp	r3, #9
 80059ec:	d94e      	bls.n	8005a8c <_vfiprintf_r+0x1c4>
 80059ee:	b1b0      	cbz	r0, 8005a1e <_vfiprintf_r+0x156>
 80059f0:	9207      	str	r2, [sp, #28]
 80059f2:	e014      	b.n	8005a1e <_vfiprintf_r+0x156>
 80059f4:	eba0 0308 	sub.w	r3, r0, r8
 80059f8:	fa09 f303 	lsl.w	r3, r9, r3
 80059fc:	4313      	orrs	r3, r2
 80059fe:	9304      	str	r3, [sp, #16]
 8005a00:	46a2      	mov	sl, r4
 8005a02:	e7d2      	b.n	80059aa <_vfiprintf_r+0xe2>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	1d19      	adds	r1, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	9103      	str	r1, [sp, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bfbb      	ittet	lt
 8005a10:	425b      	neglt	r3, r3
 8005a12:	f042 0202 	orrlt.w	r2, r2, #2
 8005a16:	9307      	strge	r3, [sp, #28]
 8005a18:	9307      	strlt	r3, [sp, #28]
 8005a1a:	bfb8      	it	lt
 8005a1c:	9204      	strlt	r2, [sp, #16]
 8005a1e:	7823      	ldrb	r3, [r4, #0]
 8005a20:	2b2e      	cmp	r3, #46	; 0x2e
 8005a22:	d10c      	bne.n	8005a3e <_vfiprintf_r+0x176>
 8005a24:	7863      	ldrb	r3, [r4, #1]
 8005a26:	2b2a      	cmp	r3, #42	; 0x2a
 8005a28:	d135      	bne.n	8005a96 <_vfiprintf_r+0x1ce>
 8005a2a:	9b03      	ldr	r3, [sp, #12]
 8005a2c:	1d1a      	adds	r2, r3, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	9203      	str	r2, [sp, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bfb8      	it	lt
 8005a36:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a3a:	3402      	adds	r4, #2
 8005a3c:	9305      	str	r3, [sp, #20]
 8005a3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b24 <_vfiprintf_r+0x25c>
 8005a42:	7821      	ldrb	r1, [r4, #0]
 8005a44:	2203      	movs	r2, #3
 8005a46:	4650      	mov	r0, sl
 8005a48:	f7fa fbca 	bl	80001e0 <memchr>
 8005a4c:	b140      	cbz	r0, 8005a60 <_vfiprintf_r+0x198>
 8005a4e:	2340      	movs	r3, #64	; 0x40
 8005a50:	eba0 000a 	sub.w	r0, r0, sl
 8005a54:	fa03 f000 	lsl.w	r0, r3, r0
 8005a58:	9b04      	ldr	r3, [sp, #16]
 8005a5a:	4303      	orrs	r3, r0
 8005a5c:	3401      	adds	r4, #1
 8005a5e:	9304      	str	r3, [sp, #16]
 8005a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a64:	482c      	ldr	r0, [pc, #176]	; (8005b18 <_vfiprintf_r+0x250>)
 8005a66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a6a:	2206      	movs	r2, #6
 8005a6c:	f7fa fbb8 	bl	80001e0 <memchr>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d03f      	beq.n	8005af4 <_vfiprintf_r+0x22c>
 8005a74:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <_vfiprintf_r+0x254>)
 8005a76:	bb1b      	cbnz	r3, 8005ac0 <_vfiprintf_r+0x1f8>
 8005a78:	9b03      	ldr	r3, [sp, #12]
 8005a7a:	3307      	adds	r3, #7
 8005a7c:	f023 0307 	bic.w	r3, r3, #7
 8005a80:	3308      	adds	r3, #8
 8005a82:	9303      	str	r3, [sp, #12]
 8005a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a86:	443b      	add	r3, r7
 8005a88:	9309      	str	r3, [sp, #36]	; 0x24
 8005a8a:	e767      	b.n	800595c <_vfiprintf_r+0x94>
 8005a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a90:	460c      	mov	r4, r1
 8005a92:	2001      	movs	r0, #1
 8005a94:	e7a5      	b.n	80059e2 <_vfiprintf_r+0x11a>
 8005a96:	2300      	movs	r3, #0
 8005a98:	3401      	adds	r4, #1
 8005a9a:	9305      	str	r3, [sp, #20]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	f04f 0c0a 	mov.w	ip, #10
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aa8:	3a30      	subs	r2, #48	; 0x30
 8005aaa:	2a09      	cmp	r2, #9
 8005aac:	d903      	bls.n	8005ab6 <_vfiprintf_r+0x1ee>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0c5      	beq.n	8005a3e <_vfiprintf_r+0x176>
 8005ab2:	9105      	str	r1, [sp, #20]
 8005ab4:	e7c3      	b.n	8005a3e <_vfiprintf_r+0x176>
 8005ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aba:	4604      	mov	r4, r0
 8005abc:	2301      	movs	r3, #1
 8005abe:	e7f0      	b.n	8005aa2 <_vfiprintf_r+0x1da>
 8005ac0:	ab03      	add	r3, sp, #12
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	4b16      	ldr	r3, [pc, #88]	; (8005b20 <_vfiprintf_r+0x258>)
 8005ac8:	a904      	add	r1, sp, #16
 8005aca:	4630      	mov	r0, r6
 8005acc:	f3af 8000 	nop.w
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	1c78      	adds	r0, r7, #1
 8005ad4:	d1d6      	bne.n	8005a84 <_vfiprintf_r+0x1bc>
 8005ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ad8:	07d9      	lsls	r1, r3, #31
 8005ada:	d405      	bmi.n	8005ae8 <_vfiprintf_r+0x220>
 8005adc:	89ab      	ldrh	r3, [r5, #12]
 8005ade:	059a      	lsls	r2, r3, #22
 8005ae0:	d402      	bmi.n	8005ae8 <_vfiprintf_r+0x220>
 8005ae2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ae4:	f000 faa1 	bl	800602a <__retarget_lock_release_recursive>
 8005ae8:	89ab      	ldrh	r3, [r5, #12]
 8005aea:	065b      	lsls	r3, r3, #25
 8005aec:	f53f af12 	bmi.w	8005914 <_vfiprintf_r+0x4c>
 8005af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005af2:	e711      	b.n	8005918 <_vfiprintf_r+0x50>
 8005af4:	ab03      	add	r3, sp, #12
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	462a      	mov	r2, r5
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <_vfiprintf_r+0x258>)
 8005afc:	a904      	add	r1, sp, #16
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7fe fe3c 	bl	800477c <_printf_i>
 8005b04:	e7e4      	b.n	8005ad0 <_vfiprintf_r+0x208>
 8005b06:	bf00      	nop
 8005b08:	080065a4 	.word	0x080065a4
 8005b0c:	080065c4 	.word	0x080065c4
 8005b10:	08006584 	.word	0x08006584
 8005b14:	080064a4 	.word	0x080064a4
 8005b18:	080064ae 	.word	0x080064ae
 8005b1c:	00000000 	.word	0x00000000
 8005b20:	080058a3 	.word	0x080058a3
 8005b24:	080064aa 	.word	0x080064aa

08005b28 <__swbuf_r>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	460e      	mov	r6, r1
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	4605      	mov	r5, r0
 8005b30:	b118      	cbz	r0, 8005b3a <__swbuf_r+0x12>
 8005b32:	6983      	ldr	r3, [r0, #24]
 8005b34:	b90b      	cbnz	r3, 8005b3a <__swbuf_r+0x12>
 8005b36:	f000 f9d9 	bl	8005eec <__sinit>
 8005b3a:	4b21      	ldr	r3, [pc, #132]	; (8005bc0 <__swbuf_r+0x98>)
 8005b3c:	429c      	cmp	r4, r3
 8005b3e:	d12b      	bne.n	8005b98 <__swbuf_r+0x70>
 8005b40:	686c      	ldr	r4, [r5, #4]
 8005b42:	69a3      	ldr	r3, [r4, #24]
 8005b44:	60a3      	str	r3, [r4, #8]
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	071a      	lsls	r2, r3, #28
 8005b4a:	d52f      	bpl.n	8005bac <__swbuf_r+0x84>
 8005b4c:	6923      	ldr	r3, [r4, #16]
 8005b4e:	b36b      	cbz	r3, 8005bac <__swbuf_r+0x84>
 8005b50:	6923      	ldr	r3, [r4, #16]
 8005b52:	6820      	ldr	r0, [r4, #0]
 8005b54:	1ac0      	subs	r0, r0, r3
 8005b56:	6963      	ldr	r3, [r4, #20]
 8005b58:	b2f6      	uxtb	r6, r6
 8005b5a:	4283      	cmp	r3, r0
 8005b5c:	4637      	mov	r7, r6
 8005b5e:	dc04      	bgt.n	8005b6a <__swbuf_r+0x42>
 8005b60:	4621      	mov	r1, r4
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 f92e 	bl	8005dc4 <_fflush_r>
 8005b68:	bb30      	cbnz	r0, 8005bb8 <__swbuf_r+0x90>
 8005b6a:	68a3      	ldr	r3, [r4, #8]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	60a3      	str	r3, [r4, #8]
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	6022      	str	r2, [r4, #0]
 8005b76:	701e      	strb	r6, [r3, #0]
 8005b78:	6963      	ldr	r3, [r4, #20]
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	4283      	cmp	r3, r0
 8005b7e:	d004      	beq.n	8005b8a <__swbuf_r+0x62>
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	07db      	lsls	r3, r3, #31
 8005b84:	d506      	bpl.n	8005b94 <__swbuf_r+0x6c>
 8005b86:	2e0a      	cmp	r6, #10
 8005b88:	d104      	bne.n	8005b94 <__swbuf_r+0x6c>
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f000 f919 	bl	8005dc4 <_fflush_r>
 8005b92:	b988      	cbnz	r0, 8005bb8 <__swbuf_r+0x90>
 8005b94:	4638      	mov	r0, r7
 8005b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b98:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <__swbuf_r+0x9c>)
 8005b9a:	429c      	cmp	r4, r3
 8005b9c:	d101      	bne.n	8005ba2 <__swbuf_r+0x7a>
 8005b9e:	68ac      	ldr	r4, [r5, #8]
 8005ba0:	e7cf      	b.n	8005b42 <__swbuf_r+0x1a>
 8005ba2:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <__swbuf_r+0xa0>)
 8005ba4:	429c      	cmp	r4, r3
 8005ba6:	bf08      	it	eq
 8005ba8:	68ec      	ldreq	r4, [r5, #12]
 8005baa:	e7ca      	b.n	8005b42 <__swbuf_r+0x1a>
 8005bac:	4621      	mov	r1, r4
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 f80c 	bl	8005bcc <__swsetup_r>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d0cb      	beq.n	8005b50 <__swbuf_r+0x28>
 8005bb8:	f04f 37ff 	mov.w	r7, #4294967295
 8005bbc:	e7ea      	b.n	8005b94 <__swbuf_r+0x6c>
 8005bbe:	bf00      	nop
 8005bc0:	080065a4 	.word	0x080065a4
 8005bc4:	080065c4 	.word	0x080065c4
 8005bc8:	08006584 	.word	0x08006584

08005bcc <__swsetup_r>:
 8005bcc:	4b32      	ldr	r3, [pc, #200]	; (8005c98 <__swsetup_r+0xcc>)
 8005bce:	b570      	push	{r4, r5, r6, lr}
 8005bd0:	681d      	ldr	r5, [r3, #0]
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	b125      	cbz	r5, 8005be2 <__swsetup_r+0x16>
 8005bd8:	69ab      	ldr	r3, [r5, #24]
 8005bda:	b913      	cbnz	r3, 8005be2 <__swsetup_r+0x16>
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f000 f985 	bl	8005eec <__sinit>
 8005be2:	4b2e      	ldr	r3, [pc, #184]	; (8005c9c <__swsetup_r+0xd0>)
 8005be4:	429c      	cmp	r4, r3
 8005be6:	d10f      	bne.n	8005c08 <__swsetup_r+0x3c>
 8005be8:	686c      	ldr	r4, [r5, #4]
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bf0:	0719      	lsls	r1, r3, #28
 8005bf2:	d42c      	bmi.n	8005c4e <__swsetup_r+0x82>
 8005bf4:	06dd      	lsls	r5, r3, #27
 8005bf6:	d411      	bmi.n	8005c1c <__swsetup_r+0x50>
 8005bf8:	2309      	movs	r3, #9
 8005bfa:	6033      	str	r3, [r6, #0]
 8005bfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	f04f 30ff 	mov.w	r0, #4294967295
 8005c06:	e03e      	b.n	8005c86 <__swsetup_r+0xba>
 8005c08:	4b25      	ldr	r3, [pc, #148]	; (8005ca0 <__swsetup_r+0xd4>)
 8005c0a:	429c      	cmp	r4, r3
 8005c0c:	d101      	bne.n	8005c12 <__swsetup_r+0x46>
 8005c0e:	68ac      	ldr	r4, [r5, #8]
 8005c10:	e7eb      	b.n	8005bea <__swsetup_r+0x1e>
 8005c12:	4b24      	ldr	r3, [pc, #144]	; (8005ca4 <__swsetup_r+0xd8>)
 8005c14:	429c      	cmp	r4, r3
 8005c16:	bf08      	it	eq
 8005c18:	68ec      	ldreq	r4, [r5, #12]
 8005c1a:	e7e6      	b.n	8005bea <__swsetup_r+0x1e>
 8005c1c:	0758      	lsls	r0, r3, #29
 8005c1e:	d512      	bpl.n	8005c46 <__swsetup_r+0x7a>
 8005c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c22:	b141      	cbz	r1, 8005c36 <__swsetup_r+0x6a>
 8005c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c28:	4299      	cmp	r1, r3
 8005c2a:	d002      	beq.n	8005c32 <__swsetup_r+0x66>
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f7ff fdc9 	bl	80057c4 <_free_r>
 8005c32:	2300      	movs	r3, #0
 8005c34:	6363      	str	r3, [r4, #52]	; 0x34
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c3c:	81a3      	strh	r3, [r4, #12]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6063      	str	r3, [r4, #4]
 8005c42:	6923      	ldr	r3, [r4, #16]
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	f043 0308 	orr.w	r3, r3, #8
 8005c4c:	81a3      	strh	r3, [r4, #12]
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	b94b      	cbnz	r3, 8005c66 <__swsetup_r+0x9a>
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c5c:	d003      	beq.n	8005c66 <__swsetup_r+0x9a>
 8005c5e:	4621      	mov	r1, r4
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 fa07 	bl	8006074 <__smakebuf_r>
 8005c66:	89a0      	ldrh	r0, [r4, #12]
 8005c68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c6c:	f010 0301 	ands.w	r3, r0, #1
 8005c70:	d00a      	beq.n	8005c88 <__swsetup_r+0xbc>
 8005c72:	2300      	movs	r3, #0
 8005c74:	60a3      	str	r3, [r4, #8]
 8005c76:	6963      	ldr	r3, [r4, #20]
 8005c78:	425b      	negs	r3, r3
 8005c7a:	61a3      	str	r3, [r4, #24]
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	b943      	cbnz	r3, 8005c92 <__swsetup_r+0xc6>
 8005c80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c84:	d1ba      	bne.n	8005bfc <__swsetup_r+0x30>
 8005c86:	bd70      	pop	{r4, r5, r6, pc}
 8005c88:	0781      	lsls	r1, r0, #30
 8005c8a:	bf58      	it	pl
 8005c8c:	6963      	ldrpl	r3, [r4, #20]
 8005c8e:	60a3      	str	r3, [r4, #8]
 8005c90:	e7f4      	b.n	8005c7c <__swsetup_r+0xb0>
 8005c92:	2000      	movs	r0, #0
 8005c94:	e7f7      	b.n	8005c86 <__swsetup_r+0xba>
 8005c96:	bf00      	nop
 8005c98:	2000000c 	.word	0x2000000c
 8005c9c:	080065a4 	.word	0x080065a4
 8005ca0:	080065c4 	.word	0x080065c4
 8005ca4:	08006584 	.word	0x08006584

08005ca8 <abort>:
 8005ca8:	b508      	push	{r3, lr}
 8005caa:	2006      	movs	r0, #6
 8005cac:	f000 fa4a 	bl	8006144 <raise>
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f7fb fdc7 	bl	8001844 <_exit>
	...

08005cb8 <__sflush_r>:
 8005cb8:	898a      	ldrh	r2, [r1, #12]
 8005cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	0710      	lsls	r0, r2, #28
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	d458      	bmi.n	8005d78 <__sflush_r+0xc0>
 8005cc6:	684b      	ldr	r3, [r1, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dc05      	bgt.n	8005cd8 <__sflush_r+0x20>
 8005ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dc02      	bgt.n	8005cd8 <__sflush_r+0x20>
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cda:	2e00      	cmp	r6, #0
 8005cdc:	d0f9      	beq.n	8005cd2 <__sflush_r+0x1a>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ce4:	682f      	ldr	r7, [r5, #0]
 8005ce6:	602b      	str	r3, [r5, #0]
 8005ce8:	d032      	beq.n	8005d50 <__sflush_r+0x98>
 8005cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	075a      	lsls	r2, r3, #29
 8005cf0:	d505      	bpl.n	8005cfe <__sflush_r+0x46>
 8005cf2:	6863      	ldr	r3, [r4, #4]
 8005cf4:	1ac0      	subs	r0, r0, r3
 8005cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cf8:	b10b      	cbz	r3, 8005cfe <__sflush_r+0x46>
 8005cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cfc:	1ac0      	subs	r0, r0, r3
 8005cfe:	2300      	movs	r3, #0
 8005d00:	4602      	mov	r2, r0
 8005d02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d04:	6a21      	ldr	r1, [r4, #32]
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b0      	blx	r6
 8005d0a:	1c43      	adds	r3, r0, #1
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	d106      	bne.n	8005d1e <__sflush_r+0x66>
 8005d10:	6829      	ldr	r1, [r5, #0]
 8005d12:	291d      	cmp	r1, #29
 8005d14:	d82c      	bhi.n	8005d70 <__sflush_r+0xb8>
 8005d16:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <__sflush_r+0x108>)
 8005d18:	40ca      	lsrs	r2, r1
 8005d1a:	07d6      	lsls	r6, r2, #31
 8005d1c:	d528      	bpl.n	8005d70 <__sflush_r+0xb8>
 8005d1e:	2200      	movs	r2, #0
 8005d20:	6062      	str	r2, [r4, #4]
 8005d22:	04d9      	lsls	r1, r3, #19
 8005d24:	6922      	ldr	r2, [r4, #16]
 8005d26:	6022      	str	r2, [r4, #0]
 8005d28:	d504      	bpl.n	8005d34 <__sflush_r+0x7c>
 8005d2a:	1c42      	adds	r2, r0, #1
 8005d2c:	d101      	bne.n	8005d32 <__sflush_r+0x7a>
 8005d2e:	682b      	ldr	r3, [r5, #0]
 8005d30:	b903      	cbnz	r3, 8005d34 <__sflush_r+0x7c>
 8005d32:	6560      	str	r0, [r4, #84]	; 0x54
 8005d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d36:	602f      	str	r7, [r5, #0]
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	d0ca      	beq.n	8005cd2 <__sflush_r+0x1a>
 8005d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d40:	4299      	cmp	r1, r3
 8005d42:	d002      	beq.n	8005d4a <__sflush_r+0x92>
 8005d44:	4628      	mov	r0, r5
 8005d46:	f7ff fd3d 	bl	80057c4 <_free_r>
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	6360      	str	r0, [r4, #52]	; 0x34
 8005d4e:	e7c1      	b.n	8005cd4 <__sflush_r+0x1c>
 8005d50:	6a21      	ldr	r1, [r4, #32]
 8005d52:	2301      	movs	r3, #1
 8005d54:	4628      	mov	r0, r5
 8005d56:	47b0      	blx	r6
 8005d58:	1c41      	adds	r1, r0, #1
 8005d5a:	d1c7      	bne.n	8005cec <__sflush_r+0x34>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0c4      	beq.n	8005cec <__sflush_r+0x34>
 8005d62:	2b1d      	cmp	r3, #29
 8005d64:	d001      	beq.n	8005d6a <__sflush_r+0xb2>
 8005d66:	2b16      	cmp	r3, #22
 8005d68:	d101      	bne.n	8005d6e <__sflush_r+0xb6>
 8005d6a:	602f      	str	r7, [r5, #0]
 8005d6c:	e7b1      	b.n	8005cd2 <__sflush_r+0x1a>
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d74:	81a3      	strh	r3, [r4, #12]
 8005d76:	e7ad      	b.n	8005cd4 <__sflush_r+0x1c>
 8005d78:	690f      	ldr	r7, [r1, #16]
 8005d7a:	2f00      	cmp	r7, #0
 8005d7c:	d0a9      	beq.n	8005cd2 <__sflush_r+0x1a>
 8005d7e:	0793      	lsls	r3, r2, #30
 8005d80:	680e      	ldr	r6, [r1, #0]
 8005d82:	bf08      	it	eq
 8005d84:	694b      	ldreq	r3, [r1, #20]
 8005d86:	600f      	str	r7, [r1, #0]
 8005d88:	bf18      	it	ne
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	eba6 0807 	sub.w	r8, r6, r7
 8005d90:	608b      	str	r3, [r1, #8]
 8005d92:	f1b8 0f00 	cmp.w	r8, #0
 8005d96:	dd9c      	ble.n	8005cd2 <__sflush_r+0x1a>
 8005d98:	6a21      	ldr	r1, [r4, #32]
 8005d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d9c:	4643      	mov	r3, r8
 8005d9e:	463a      	mov	r2, r7
 8005da0:	4628      	mov	r0, r5
 8005da2:	47b0      	blx	r6
 8005da4:	2800      	cmp	r0, #0
 8005da6:	dc06      	bgt.n	8005db6 <__sflush_r+0xfe>
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	e78e      	b.n	8005cd4 <__sflush_r+0x1c>
 8005db6:	4407      	add	r7, r0
 8005db8:	eba8 0800 	sub.w	r8, r8, r0
 8005dbc:	e7e9      	b.n	8005d92 <__sflush_r+0xda>
 8005dbe:	bf00      	nop
 8005dc0:	20400001 	.word	0x20400001

08005dc4 <_fflush_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	690b      	ldr	r3, [r1, #16]
 8005dc8:	4605      	mov	r5, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	b913      	cbnz	r3, 8005dd4 <_fflush_r+0x10>
 8005dce:	2500      	movs	r5, #0
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	b118      	cbz	r0, 8005dde <_fflush_r+0x1a>
 8005dd6:	6983      	ldr	r3, [r0, #24]
 8005dd8:	b90b      	cbnz	r3, 8005dde <_fflush_r+0x1a>
 8005dda:	f000 f887 	bl	8005eec <__sinit>
 8005dde:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <_fflush_r+0x6c>)
 8005de0:	429c      	cmp	r4, r3
 8005de2:	d11b      	bne.n	8005e1c <_fflush_r+0x58>
 8005de4:	686c      	ldr	r4, [r5, #4]
 8005de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0ef      	beq.n	8005dce <_fflush_r+0xa>
 8005dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005df0:	07d0      	lsls	r0, r2, #31
 8005df2:	d404      	bmi.n	8005dfe <_fflush_r+0x3a>
 8005df4:	0599      	lsls	r1, r3, #22
 8005df6:	d402      	bmi.n	8005dfe <_fflush_r+0x3a>
 8005df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dfa:	f000 f915 	bl	8006028 <__retarget_lock_acquire_recursive>
 8005dfe:	4628      	mov	r0, r5
 8005e00:	4621      	mov	r1, r4
 8005e02:	f7ff ff59 	bl	8005cb8 <__sflush_r>
 8005e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e08:	07da      	lsls	r2, r3, #31
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	d4e0      	bmi.n	8005dd0 <_fflush_r+0xc>
 8005e0e:	89a3      	ldrh	r3, [r4, #12]
 8005e10:	059b      	lsls	r3, r3, #22
 8005e12:	d4dd      	bmi.n	8005dd0 <_fflush_r+0xc>
 8005e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e16:	f000 f908 	bl	800602a <__retarget_lock_release_recursive>
 8005e1a:	e7d9      	b.n	8005dd0 <_fflush_r+0xc>
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <_fflush_r+0x70>)
 8005e1e:	429c      	cmp	r4, r3
 8005e20:	d101      	bne.n	8005e26 <_fflush_r+0x62>
 8005e22:	68ac      	ldr	r4, [r5, #8]
 8005e24:	e7df      	b.n	8005de6 <_fflush_r+0x22>
 8005e26:	4b04      	ldr	r3, [pc, #16]	; (8005e38 <_fflush_r+0x74>)
 8005e28:	429c      	cmp	r4, r3
 8005e2a:	bf08      	it	eq
 8005e2c:	68ec      	ldreq	r4, [r5, #12]
 8005e2e:	e7da      	b.n	8005de6 <_fflush_r+0x22>
 8005e30:	080065a4 	.word	0x080065a4
 8005e34:	080065c4 	.word	0x080065c4
 8005e38:	08006584 	.word	0x08006584

08005e3c <std>:
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	b510      	push	{r4, lr}
 8005e40:	4604      	mov	r4, r0
 8005e42:	e9c0 3300 	strd	r3, r3, [r0]
 8005e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e4a:	6083      	str	r3, [r0, #8]
 8005e4c:	8181      	strh	r1, [r0, #12]
 8005e4e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e50:	81c2      	strh	r2, [r0, #14]
 8005e52:	6183      	str	r3, [r0, #24]
 8005e54:	4619      	mov	r1, r3
 8005e56:	2208      	movs	r2, #8
 8005e58:	305c      	adds	r0, #92	; 0x5c
 8005e5a:	f7fd fd37 	bl	80038cc <memset>
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <std+0x38>)
 8005e60:	6263      	str	r3, [r4, #36]	; 0x24
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <std+0x3c>)
 8005e64:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e66:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <std+0x40>)
 8005e68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <std+0x44>)
 8005e6c:	6224      	str	r4, [r4, #32]
 8005e6e:	6323      	str	r3, [r4, #48]	; 0x30
 8005e70:	bd10      	pop	{r4, pc}
 8005e72:	bf00      	nop
 8005e74:	0800617d 	.word	0x0800617d
 8005e78:	0800619f 	.word	0x0800619f
 8005e7c:	080061d7 	.word	0x080061d7
 8005e80:	080061fb 	.word	0x080061fb

08005e84 <_cleanup_r>:
 8005e84:	4901      	ldr	r1, [pc, #4]	; (8005e8c <_cleanup_r+0x8>)
 8005e86:	f000 b8af 	b.w	8005fe8 <_fwalk_reent>
 8005e8a:	bf00      	nop
 8005e8c:	08005dc5 	.word	0x08005dc5

08005e90 <__sfmoreglue>:
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	1e4a      	subs	r2, r1, #1
 8005e94:	2568      	movs	r5, #104	; 0x68
 8005e96:	4355      	muls	r5, r2
 8005e98:	460e      	mov	r6, r1
 8005e9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e9e:	f7fe fa23 	bl	80042e8 <_malloc_r>
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	b140      	cbz	r0, 8005eb8 <__sfmoreglue+0x28>
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	e9c0 1600 	strd	r1, r6, [r0]
 8005eac:	300c      	adds	r0, #12
 8005eae:	60a0      	str	r0, [r4, #8]
 8005eb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005eb4:	f7fd fd0a 	bl	80038cc <memset>
 8005eb8:	4620      	mov	r0, r4
 8005eba:	bd70      	pop	{r4, r5, r6, pc}

08005ebc <__sfp_lock_acquire>:
 8005ebc:	4801      	ldr	r0, [pc, #4]	; (8005ec4 <__sfp_lock_acquire+0x8>)
 8005ebe:	f000 b8b3 	b.w	8006028 <__retarget_lock_acquire_recursive>
 8005ec2:	bf00      	nop
 8005ec4:	20000198 	.word	0x20000198

08005ec8 <__sfp_lock_release>:
 8005ec8:	4801      	ldr	r0, [pc, #4]	; (8005ed0 <__sfp_lock_release+0x8>)
 8005eca:	f000 b8ae 	b.w	800602a <__retarget_lock_release_recursive>
 8005ece:	bf00      	nop
 8005ed0:	20000198 	.word	0x20000198

08005ed4 <__sinit_lock_acquire>:
 8005ed4:	4801      	ldr	r0, [pc, #4]	; (8005edc <__sinit_lock_acquire+0x8>)
 8005ed6:	f000 b8a7 	b.w	8006028 <__retarget_lock_acquire_recursive>
 8005eda:	bf00      	nop
 8005edc:	20000193 	.word	0x20000193

08005ee0 <__sinit_lock_release>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	; (8005ee8 <__sinit_lock_release+0x8>)
 8005ee2:	f000 b8a2 	b.w	800602a <__retarget_lock_release_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	20000193 	.word	0x20000193

08005eec <__sinit>:
 8005eec:	b510      	push	{r4, lr}
 8005eee:	4604      	mov	r4, r0
 8005ef0:	f7ff fff0 	bl	8005ed4 <__sinit_lock_acquire>
 8005ef4:	69a3      	ldr	r3, [r4, #24]
 8005ef6:	b11b      	cbz	r3, 8005f00 <__sinit+0x14>
 8005ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005efc:	f7ff bff0 	b.w	8005ee0 <__sinit_lock_release>
 8005f00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f04:	6523      	str	r3, [r4, #80]	; 0x50
 8005f06:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <__sinit+0x68>)
 8005f08:	4a13      	ldr	r2, [pc, #76]	; (8005f58 <__sinit+0x6c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f0e:	42a3      	cmp	r3, r4
 8005f10:	bf04      	itt	eq
 8005f12:	2301      	moveq	r3, #1
 8005f14:	61a3      	streq	r3, [r4, #24]
 8005f16:	4620      	mov	r0, r4
 8005f18:	f000 f820 	bl	8005f5c <__sfp>
 8005f1c:	6060      	str	r0, [r4, #4]
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f000 f81c 	bl	8005f5c <__sfp>
 8005f24:	60a0      	str	r0, [r4, #8]
 8005f26:	4620      	mov	r0, r4
 8005f28:	f000 f818 	bl	8005f5c <__sfp>
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	60e0      	str	r0, [r4, #12]
 8005f30:	2104      	movs	r1, #4
 8005f32:	6860      	ldr	r0, [r4, #4]
 8005f34:	f7ff ff82 	bl	8005e3c <std>
 8005f38:	68a0      	ldr	r0, [r4, #8]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	2109      	movs	r1, #9
 8005f3e:	f7ff ff7d 	bl	8005e3c <std>
 8005f42:	68e0      	ldr	r0, [r4, #12]
 8005f44:	2202      	movs	r2, #2
 8005f46:	2112      	movs	r1, #18
 8005f48:	f7ff ff78 	bl	8005e3c <std>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	61a3      	str	r3, [r4, #24]
 8005f50:	e7d2      	b.n	8005ef8 <__sinit+0xc>
 8005f52:	bf00      	nop
 8005f54:	08006318 	.word	0x08006318
 8005f58:	08005e85 	.word	0x08005e85

08005f5c <__sfp>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	4607      	mov	r7, r0
 8005f60:	f7ff ffac 	bl	8005ebc <__sfp_lock_acquire>
 8005f64:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <__sfp+0x84>)
 8005f66:	681e      	ldr	r6, [r3, #0]
 8005f68:	69b3      	ldr	r3, [r6, #24]
 8005f6a:	b913      	cbnz	r3, 8005f72 <__sfp+0x16>
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f7ff ffbd 	bl	8005eec <__sinit>
 8005f72:	3648      	adds	r6, #72	; 0x48
 8005f74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	d503      	bpl.n	8005f84 <__sfp+0x28>
 8005f7c:	6833      	ldr	r3, [r6, #0]
 8005f7e:	b30b      	cbz	r3, 8005fc4 <__sfp+0x68>
 8005f80:	6836      	ldr	r6, [r6, #0]
 8005f82:	e7f7      	b.n	8005f74 <__sfp+0x18>
 8005f84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f88:	b9d5      	cbnz	r5, 8005fc0 <__sfp+0x64>
 8005f8a:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <__sfp+0x88>)
 8005f8c:	60e3      	str	r3, [r4, #12]
 8005f8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f92:	6665      	str	r5, [r4, #100]	; 0x64
 8005f94:	f000 f847 	bl	8006026 <__retarget_lock_init_recursive>
 8005f98:	f7ff ff96 	bl	8005ec8 <__sfp_lock_release>
 8005f9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fa4:	6025      	str	r5, [r4, #0]
 8005fa6:	61a5      	str	r5, [r4, #24]
 8005fa8:	2208      	movs	r2, #8
 8005faa:	4629      	mov	r1, r5
 8005fac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fb0:	f7fd fc8c 	bl	80038cc <memset>
 8005fb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc0:	3468      	adds	r4, #104	; 0x68
 8005fc2:	e7d9      	b.n	8005f78 <__sfp+0x1c>
 8005fc4:	2104      	movs	r1, #4
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	f7ff ff62 	bl	8005e90 <__sfmoreglue>
 8005fcc:	4604      	mov	r4, r0
 8005fce:	6030      	str	r0, [r6, #0]
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d1d5      	bne.n	8005f80 <__sfp+0x24>
 8005fd4:	f7ff ff78 	bl	8005ec8 <__sfp_lock_release>
 8005fd8:	230c      	movs	r3, #12
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	e7ee      	b.n	8005fbc <__sfp+0x60>
 8005fde:	bf00      	nop
 8005fe0:	08006318 	.word	0x08006318
 8005fe4:	ffff0001 	.word	0xffff0001

08005fe8 <_fwalk_reent>:
 8005fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fec:	4606      	mov	r6, r0
 8005fee:	4688      	mov	r8, r1
 8005ff0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ff4:	2700      	movs	r7, #0
 8005ff6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ffa:	f1b9 0901 	subs.w	r9, r9, #1
 8005ffe:	d505      	bpl.n	800600c <_fwalk_reent+0x24>
 8006000:	6824      	ldr	r4, [r4, #0]
 8006002:	2c00      	cmp	r4, #0
 8006004:	d1f7      	bne.n	8005ff6 <_fwalk_reent+0xe>
 8006006:	4638      	mov	r0, r7
 8006008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800600c:	89ab      	ldrh	r3, [r5, #12]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d907      	bls.n	8006022 <_fwalk_reent+0x3a>
 8006012:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006016:	3301      	adds	r3, #1
 8006018:	d003      	beq.n	8006022 <_fwalk_reent+0x3a>
 800601a:	4629      	mov	r1, r5
 800601c:	4630      	mov	r0, r6
 800601e:	47c0      	blx	r8
 8006020:	4307      	orrs	r7, r0
 8006022:	3568      	adds	r5, #104	; 0x68
 8006024:	e7e9      	b.n	8005ffa <_fwalk_reent+0x12>

08006026 <__retarget_lock_init_recursive>:
 8006026:	4770      	bx	lr

08006028 <__retarget_lock_acquire_recursive>:
 8006028:	4770      	bx	lr

0800602a <__retarget_lock_release_recursive>:
 800602a:	4770      	bx	lr

0800602c <__swhatbuf_r>:
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	460e      	mov	r6, r1
 8006030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006034:	2900      	cmp	r1, #0
 8006036:	b096      	sub	sp, #88	; 0x58
 8006038:	4614      	mov	r4, r2
 800603a:	461d      	mov	r5, r3
 800603c:	da07      	bge.n	800604e <__swhatbuf_r+0x22>
 800603e:	2300      	movs	r3, #0
 8006040:	602b      	str	r3, [r5, #0]
 8006042:	89b3      	ldrh	r3, [r6, #12]
 8006044:	061a      	lsls	r2, r3, #24
 8006046:	d410      	bmi.n	800606a <__swhatbuf_r+0x3e>
 8006048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800604c:	e00e      	b.n	800606c <__swhatbuf_r+0x40>
 800604e:	466a      	mov	r2, sp
 8006050:	f000 f8fa 	bl	8006248 <_fstat_r>
 8006054:	2800      	cmp	r0, #0
 8006056:	dbf2      	blt.n	800603e <__swhatbuf_r+0x12>
 8006058:	9a01      	ldr	r2, [sp, #4]
 800605a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800605e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006062:	425a      	negs	r2, r3
 8006064:	415a      	adcs	r2, r3
 8006066:	602a      	str	r2, [r5, #0]
 8006068:	e7ee      	b.n	8006048 <__swhatbuf_r+0x1c>
 800606a:	2340      	movs	r3, #64	; 0x40
 800606c:	2000      	movs	r0, #0
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	b016      	add	sp, #88	; 0x58
 8006072:	bd70      	pop	{r4, r5, r6, pc}

08006074 <__smakebuf_r>:
 8006074:	898b      	ldrh	r3, [r1, #12]
 8006076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006078:	079d      	lsls	r5, r3, #30
 800607a:	4606      	mov	r6, r0
 800607c:	460c      	mov	r4, r1
 800607e:	d507      	bpl.n	8006090 <__smakebuf_r+0x1c>
 8006080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	2301      	movs	r3, #1
 800608a:	6163      	str	r3, [r4, #20]
 800608c:	b002      	add	sp, #8
 800608e:	bd70      	pop	{r4, r5, r6, pc}
 8006090:	ab01      	add	r3, sp, #4
 8006092:	466a      	mov	r2, sp
 8006094:	f7ff ffca 	bl	800602c <__swhatbuf_r>
 8006098:	9900      	ldr	r1, [sp, #0]
 800609a:	4605      	mov	r5, r0
 800609c:	4630      	mov	r0, r6
 800609e:	f7fe f923 	bl	80042e8 <_malloc_r>
 80060a2:	b948      	cbnz	r0, 80060b8 <__smakebuf_r+0x44>
 80060a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a8:	059a      	lsls	r2, r3, #22
 80060aa:	d4ef      	bmi.n	800608c <__smakebuf_r+0x18>
 80060ac:	f023 0303 	bic.w	r3, r3, #3
 80060b0:	f043 0302 	orr.w	r3, r3, #2
 80060b4:	81a3      	strh	r3, [r4, #12]
 80060b6:	e7e3      	b.n	8006080 <__smakebuf_r+0xc>
 80060b8:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <__smakebuf_r+0x7c>)
 80060ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	6020      	str	r0, [r4, #0]
 80060c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c4:	81a3      	strh	r3, [r4, #12]
 80060c6:	9b00      	ldr	r3, [sp, #0]
 80060c8:	6163      	str	r3, [r4, #20]
 80060ca:	9b01      	ldr	r3, [sp, #4]
 80060cc:	6120      	str	r0, [r4, #16]
 80060ce:	b15b      	cbz	r3, 80060e8 <__smakebuf_r+0x74>
 80060d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060d4:	4630      	mov	r0, r6
 80060d6:	f000 f8c9 	bl	800626c <_isatty_r>
 80060da:	b128      	cbz	r0, 80060e8 <__smakebuf_r+0x74>
 80060dc:	89a3      	ldrh	r3, [r4, #12]
 80060de:	f023 0303 	bic.w	r3, r3, #3
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	81a3      	strh	r3, [r4, #12]
 80060e8:	89a0      	ldrh	r0, [r4, #12]
 80060ea:	4305      	orrs	r5, r0
 80060ec:	81a5      	strh	r5, [r4, #12]
 80060ee:	e7cd      	b.n	800608c <__smakebuf_r+0x18>
 80060f0:	08005e85 	.word	0x08005e85

080060f4 <_raise_r>:
 80060f4:	291f      	cmp	r1, #31
 80060f6:	b538      	push	{r3, r4, r5, lr}
 80060f8:	4604      	mov	r4, r0
 80060fa:	460d      	mov	r5, r1
 80060fc:	d904      	bls.n	8006108 <_raise_r+0x14>
 80060fe:	2316      	movs	r3, #22
 8006100:	6003      	str	r3, [r0, #0]
 8006102:	f04f 30ff 	mov.w	r0, #4294967295
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800610a:	b112      	cbz	r2, 8006112 <_raise_r+0x1e>
 800610c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006110:	b94b      	cbnz	r3, 8006126 <_raise_r+0x32>
 8006112:	4620      	mov	r0, r4
 8006114:	f000 f830 	bl	8006178 <_getpid_r>
 8006118:	462a      	mov	r2, r5
 800611a:	4601      	mov	r1, r0
 800611c:	4620      	mov	r0, r4
 800611e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006122:	f000 b817 	b.w	8006154 <_kill_r>
 8006126:	2b01      	cmp	r3, #1
 8006128:	d00a      	beq.n	8006140 <_raise_r+0x4c>
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	d103      	bne.n	8006136 <_raise_r+0x42>
 800612e:	2316      	movs	r3, #22
 8006130:	6003      	str	r3, [r0, #0]
 8006132:	2001      	movs	r0, #1
 8006134:	e7e7      	b.n	8006106 <_raise_r+0x12>
 8006136:	2400      	movs	r4, #0
 8006138:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800613c:	4628      	mov	r0, r5
 800613e:	4798      	blx	r3
 8006140:	2000      	movs	r0, #0
 8006142:	e7e0      	b.n	8006106 <_raise_r+0x12>

08006144 <raise>:
 8006144:	4b02      	ldr	r3, [pc, #8]	; (8006150 <raise+0xc>)
 8006146:	4601      	mov	r1, r0
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	f7ff bfd3 	b.w	80060f4 <_raise_r>
 800614e:	bf00      	nop
 8006150:	2000000c 	.word	0x2000000c

08006154 <_kill_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d07      	ldr	r5, [pc, #28]	; (8006174 <_kill_r+0x20>)
 8006158:	2300      	movs	r3, #0
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	4611      	mov	r1, r2
 8006160:	602b      	str	r3, [r5, #0]
 8006162:	f7fb fb5f 	bl	8001824 <_kill>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	d102      	bne.n	8006170 <_kill_r+0x1c>
 800616a:	682b      	ldr	r3, [r5, #0]
 800616c:	b103      	cbz	r3, 8006170 <_kill_r+0x1c>
 800616e:	6023      	str	r3, [r4, #0]
 8006170:	bd38      	pop	{r3, r4, r5, pc}
 8006172:	bf00      	nop
 8006174:	2000018c 	.word	0x2000018c

08006178 <_getpid_r>:
 8006178:	f7fb bb4c 	b.w	8001814 <_getpid>

0800617c <__sread>:
 800617c:	b510      	push	{r4, lr}
 800617e:	460c      	mov	r4, r1
 8006180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006184:	f000 f894 	bl	80062b0 <_read_r>
 8006188:	2800      	cmp	r0, #0
 800618a:	bfab      	itete	ge
 800618c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800618e:	89a3      	ldrhlt	r3, [r4, #12]
 8006190:	181b      	addge	r3, r3, r0
 8006192:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006196:	bfac      	ite	ge
 8006198:	6563      	strge	r3, [r4, #84]	; 0x54
 800619a:	81a3      	strhlt	r3, [r4, #12]
 800619c:	bd10      	pop	{r4, pc}

0800619e <__swrite>:
 800619e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a2:	461f      	mov	r7, r3
 80061a4:	898b      	ldrh	r3, [r1, #12]
 80061a6:	05db      	lsls	r3, r3, #23
 80061a8:	4605      	mov	r5, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	4616      	mov	r6, r2
 80061ae:	d505      	bpl.n	80061bc <__swrite+0x1e>
 80061b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b4:	2302      	movs	r3, #2
 80061b6:	2200      	movs	r2, #0
 80061b8:	f000 f868 	bl	800628c <_lseek_r>
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061c6:	81a3      	strh	r3, [r4, #12]
 80061c8:	4632      	mov	r2, r6
 80061ca:	463b      	mov	r3, r7
 80061cc:	4628      	mov	r0, r5
 80061ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061d2:	f000 b817 	b.w	8006204 <_write_r>

080061d6 <__sseek>:
 80061d6:	b510      	push	{r4, lr}
 80061d8:	460c      	mov	r4, r1
 80061da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061de:	f000 f855 	bl	800628c <_lseek_r>
 80061e2:	1c43      	adds	r3, r0, #1
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	bf15      	itete	ne
 80061e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80061ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061f2:	81a3      	strheq	r3, [r4, #12]
 80061f4:	bf18      	it	ne
 80061f6:	81a3      	strhne	r3, [r4, #12]
 80061f8:	bd10      	pop	{r4, pc}

080061fa <__sclose>:
 80061fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061fe:	f000 b813 	b.w	8006228 <_close_r>
	...

08006204 <_write_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4d07      	ldr	r5, [pc, #28]	; (8006224 <_write_r+0x20>)
 8006208:	4604      	mov	r4, r0
 800620a:	4608      	mov	r0, r1
 800620c:	4611      	mov	r1, r2
 800620e:	2200      	movs	r2, #0
 8006210:	602a      	str	r2, [r5, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	f7fb fb3d 	bl	8001892 <_write>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_write_r+0x1e>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b103      	cbz	r3, 8006222 <_write_r+0x1e>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	2000018c 	.word	0x2000018c

08006228 <_close_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4d06      	ldr	r5, [pc, #24]	; (8006244 <_close_r+0x1c>)
 800622c:	2300      	movs	r3, #0
 800622e:	4604      	mov	r4, r0
 8006230:	4608      	mov	r0, r1
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	f7fb fb49 	bl	80018ca <_close>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_close_r+0x1a>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_close_r+0x1a>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	2000018c 	.word	0x2000018c

08006248 <_fstat_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d07      	ldr	r5, [pc, #28]	; (8006268 <_fstat_r+0x20>)
 800624c:	2300      	movs	r3, #0
 800624e:	4604      	mov	r4, r0
 8006250:	4608      	mov	r0, r1
 8006252:	4611      	mov	r1, r2
 8006254:	602b      	str	r3, [r5, #0]
 8006256:	f7fb fb44 	bl	80018e2 <_fstat>
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	d102      	bne.n	8006264 <_fstat_r+0x1c>
 800625e:	682b      	ldr	r3, [r5, #0]
 8006260:	b103      	cbz	r3, 8006264 <_fstat_r+0x1c>
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	bd38      	pop	{r3, r4, r5, pc}
 8006266:	bf00      	nop
 8006268:	2000018c 	.word	0x2000018c

0800626c <_isatty_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4d06      	ldr	r5, [pc, #24]	; (8006288 <_isatty_r+0x1c>)
 8006270:	2300      	movs	r3, #0
 8006272:	4604      	mov	r4, r0
 8006274:	4608      	mov	r0, r1
 8006276:	602b      	str	r3, [r5, #0]
 8006278:	f7fb fb43 	bl	8001902 <_isatty>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_isatty_r+0x1a>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	b103      	cbz	r3, 8006286 <_isatty_r+0x1a>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	2000018c 	.word	0x2000018c

0800628c <_lseek_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	4d07      	ldr	r5, [pc, #28]	; (80062ac <_lseek_r+0x20>)
 8006290:	4604      	mov	r4, r0
 8006292:	4608      	mov	r0, r1
 8006294:	4611      	mov	r1, r2
 8006296:	2200      	movs	r2, #0
 8006298:	602a      	str	r2, [r5, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	f7fb fb3c 	bl	8001918 <_lseek>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d102      	bne.n	80062aa <_lseek_r+0x1e>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	b103      	cbz	r3, 80062aa <_lseek_r+0x1e>
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	2000018c 	.word	0x2000018c

080062b0 <_read_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4d07      	ldr	r5, [pc, #28]	; (80062d0 <_read_r+0x20>)
 80062b4:	4604      	mov	r4, r0
 80062b6:	4608      	mov	r0, r1
 80062b8:	4611      	mov	r1, r2
 80062ba:	2200      	movs	r2, #0
 80062bc:	602a      	str	r2, [r5, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	f7fb faca 	bl	8001858 <_read>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_read_r+0x1e>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_read_r+0x1e>
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	2000018c 	.word	0x2000018c

080062d4 <_init>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	bf00      	nop
 80062d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062da:	bc08      	pop	{r3}
 80062dc:	469e      	mov	lr, r3
 80062de:	4770      	bx	lr

080062e0 <_fini>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	bf00      	nop
 80062e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e6:	bc08      	pop	{r3}
 80062e8:	469e      	mov	lr, r3
 80062ea:	4770      	bx	lr

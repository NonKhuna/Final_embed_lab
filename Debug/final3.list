
final3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000704c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  080071f0  080071f0  000171f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e4  080074e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074ec  080074ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074ec  080074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080074f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  08007564  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08007564  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101bf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a5  00000000  00000000  0003025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00032408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  000331b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181d0  00000000  00000000  00033ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1b4  00000000  00000000  0004c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a88c  00000000  00000000  0005b224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5ab0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b30  00000000  00000000  000f5b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071d4 	.word	0x080071d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080071d4 	.word	0x080071d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b96e 	b.w	8000f10 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468c      	mov	ip, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8083 	bne.w	8000d62 <__udivmoddi4+0x116>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d947      	bls.n	8000cf2 <__udivmoddi4+0xa6>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b142      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	f1c2 0020 	rsb	r0, r2, #32
 8000c6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea40 0c01 	orr.w	ip, r0, r1
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbc f6f8 	udiv	r6, ip, r8
 8000c84:	fa1f fe87 	uxth.w	lr, r7
 8000c88:	fb08 c116 	mls	r1, r8, r6, ip
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f10e 	mul.w	r1, r6, lr
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 8119 	bcs.w	8000ed4 <__udivmoddi4+0x288>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8116 	bls.w	8000ed4 <__udivmoddi4+0x288>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8105 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8102 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xaa>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d150      	bne.n	8000da0 <__udivmoddi4+0x154>
 8000cfe:	1bcb      	subs	r3, r1, r7
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	2601      	movs	r6, #1
 8000d0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb08 f30c 	mul.w	r3, r8, ip
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0xe2>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f200 80e9 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x10c>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x10a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80d9 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e7bf      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x12e>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80b1 	beq.w	8000ece <__udivmoddi4+0x282>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x1cc>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0x140>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80b8 	bhi.w	8000efc <__udivmoddi4+0x2b0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	468c      	mov	ip, r1
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0a8      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0xa0>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f603 	lsr.w	r6, r0, r3
 8000da8:	4097      	lsls	r7, r2
 8000daa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db2:	40d9      	lsrs	r1, r3
 8000db4:	4330      	orrs	r0, r6
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f108 	mul.w	r1, r6, r8
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x19c>
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dda:	f080 808d 	bcs.w	8000ef8 <__udivmoddi4+0x2ac>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 808a 	bls.w	8000ef8 <__udivmoddi4+0x2ac>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	443b      	add	r3, r7
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b281      	uxth	r1, r0
 8000dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb00 f308 	mul.w	r3, r0, r8
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x1c4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e06:	d273      	bcs.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d971      	bls.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4439      	add	r1, r7
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e16:	e778      	b.n	8000d0a <__udivmoddi4+0xbe>
 8000e18:	f1c6 0c20 	rsb	ip, r6, #32
 8000e1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e24:	431c      	orrs	r4, r3
 8000e26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e36:	431f      	orrs	r7, r3
 8000e38:	0c3b      	lsrs	r3, r7, #16
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fa1f f884 	uxth.w	r8, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	fa02 f206 	lsl.w	r2, r2, r6
 8000e54:	fa00 f306 	lsl.w	r3, r0, r6
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x220>
 8000e5a:	1861      	adds	r1, r4, r1
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e60:	d248      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e62:	458a      	cmp	sl, r1
 8000e64:	d946      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4421      	add	r1, r4
 8000e6c:	eba1 010a 	sub.w	r1, r1, sl
 8000e70:	b2bf      	uxth	r7, r7
 8000e72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7e:	fb00 f808 	mul.w	r8, r0, r8
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x24a>
 8000e86:	19e7      	adds	r7, r4, r7
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8c:	d22e      	bcs.n	8000eec <__udivmoddi4+0x2a0>
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d92c      	bls.n	8000eec <__udivmoddi4+0x2a0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4427      	add	r7, r4
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	eba7 0708 	sub.w	r7, r7, r8
 8000e9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea2:	454f      	cmp	r7, r9
 8000ea4:	46c6      	mov	lr, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	d31a      	bcc.n	8000ee0 <__udivmoddi4+0x294>
 8000eaa:	d017      	beq.n	8000edc <__udivmoddi4+0x290>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x27a>
 8000eae:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec0:	40f7      	lsrs	r7, r6
 8000ec2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e70b      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fd      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000edc:	4543      	cmp	r3, r8
 8000ede:	d2e5      	bcs.n	8000eac <__udivmoddi4+0x260>
 8000ee0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7df      	b.n	8000eac <__udivmoddi4+0x260>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e7d2      	b.n	8000e96 <__udivmoddi4+0x24a>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	e78d      	b.n	8000e10 <__udivmoddi4+0x1c4>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	e7b9      	b.n	8000e6c <__udivmoddi4+0x220>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	e775      	b.n	8000de8 <__udivmoddi4+0x19c>
 8000efc:	4630      	mov	r0, r6
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0x14a>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	4439      	add	r1, r7
 8000f06:	e713      	b.n	8000d30 <__udivmoddi4+0xe4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	e724      	b.n	8000d58 <__udivmoddi4+0x10c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <DWT_Delay_Init+0x58>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <DWT_Delay_Init+0x58>)
 8000f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f22:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <DWT_Delay_Init+0x58>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <DWT_Delay_Init+0x58>)
 8000f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f2e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <DWT_Delay_Init+0x5c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <DWT_Delay_Init+0x5c>)
 8000f36:	f023 0301 	bic.w	r3, r3, #1
 8000f3a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <DWT_Delay_Init+0x5c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <DWT_Delay_Init+0x5c>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <DWT_Delay_Init+0x5c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000f4e:	bf00      	nop
     __ASM volatile ("NOP");
 8000f50:	bf00      	nop
  __ASM volatile ("NOP");
 8000f52:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <DWT_Delay_Init+0x5c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e000      	b.n	8000f62 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000f60:	2301      	movs	r3, #1
  }
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000edf0 	.word	0xe000edf0
 8000f70:	e0001000 	.word	0xe0001000

08000f74 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <delay+0x40>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f82:	f002 fab5 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <delay+0x44>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	0c9b      	lsrs	r3, r3, #18
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f98:	bf00      	nop
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <delay+0x40>)
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1ad2      	subs	r2, r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3f8      	bcc.n	8000f9a <delay+0x26>
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e0001000 	.word	0xe0001000
 8000fb8:	431bde83 	.word	0x431bde83

08000fbc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4619      	mov	r1, r3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f001 fc8a 	bl	8002904 <HAL_GPIO_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f001 fc6c 	bl	8002904 <HAL_GPIO_Init>
}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <DHT_Start>:


void DHT_Start (void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001038:	f7ff ff6c 	bl	8000f14 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 800103c:	2102      	movs	r1, #2
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <DHT_Start+0x40>)
 8001040:	f7ff ffbc 	bl	8000fbc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001044:	2200      	movs	r2, #0
 8001046:	2102      	movs	r1, #2
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <DHT_Start+0x40>)
 800104a:	f001 fdf7 	bl	8002c3c <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
 800104e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001052:	f7ff ff8f 	bl	8000f74 <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8001056:	2201      	movs	r2, #1
 8001058:	2102      	movs	r1, #2
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <DHT_Start+0x40>)
 800105c:	f001 fdee 	bl	8002c3c <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001060:	2014      	movs	r0, #20
 8001062:	f7ff ff87 	bl	8000f74 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8001066:	2102      	movs	r1, #2
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <DHT_Start+0x40>)
 800106a:	f7ff ffc5 	bl	8000ff8 <Set_Pin_Input>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40020000 	.word	0x40020000

08001078 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001082:	2028      	movs	r0, #40	; 0x28
 8001084:	f7ff ff76 	bl	8000f74 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001088:	2102      	movs	r1, #2
 800108a:	4811      	ldr	r0, [pc, #68]	; (80010d0 <DHT_Check_Response+0x58>)
 800108c:	f001 fdbe 	bl	8002c0c <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10e      	bne.n	80010b4 <DHT_Check_Response+0x3c>
	{
		delay (80);
 8001096:	2050      	movs	r0, #80	; 0x50
 8001098:	f7ff ff6c 	bl	8000f74 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 800109c:	2102      	movs	r1, #2
 800109e:	480c      	ldr	r0, [pc, #48]	; (80010d0 <DHT_Check_Response+0x58>)
 80010a0:	f001 fdb4 	bl	8002c0c <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <DHT_Check_Response+0x38>
 80010aa:	2301      	movs	r3, #1
 80010ac:	71fb      	strb	r3, [r7, #7]
 80010ae:	e001      	b.n	80010b4 <DHT_Check_Response+0x3c>
		else Response = -1;
 80010b0:	23ff      	movs	r3, #255	; 0xff
 80010b2:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80010b4:	bf00      	nop
 80010b6:	2102      	movs	r1, #2
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <DHT_Check_Response+0x58>)
 80010ba:	f001 fda7 	bl	8002c0c <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f8      	bne.n	80010b6 <DHT_Check_Response+0x3e>

	return Response;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40020000 	.word	0x40020000

080010d4 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80010da:	2300      	movs	r3, #0
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	e037      	b.n	8001150 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80010e0:	bf00      	nop
 80010e2:	2102      	movs	r1, #2
 80010e4:	481e      	ldr	r0, [pc, #120]	; (8001160 <DHT_Read+0x8c>)
 80010e6:	f001 fd91 	bl	8002c0c <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f8      	beq.n	80010e2 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80010f0:	2028      	movs	r0, #40	; 0x28
 80010f2:	f7ff ff3f 	bl	8000f74 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80010f6:	2102      	movs	r1, #2
 80010f8:	4819      	ldr	r0, [pc, #100]	; (8001160 <DHT_Read+0x8c>)
 80010fa:	f001 fd87 	bl	8002c0c <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10e      	bne.n	8001122 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2201      	movs	r2, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	b25b      	sxtb	r3, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	b25a      	sxtb	r2, r3
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	4013      	ands	r3, r2
 800111c:	b25b      	sxtb	r3, r3
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	e00b      	b.n	800113a <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	f1c3 0307 	rsb	r3, r3, #7
 8001128:	2201      	movs	r2, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	b25a      	sxtb	r2, r3
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4313      	orrs	r3, r2
 8001136:	b25b      	sxtb	r3, r3
 8001138:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 800113a:	bf00      	nop
 800113c:	2102      	movs	r1, #2
 800113e:	4808      	ldr	r0, [pc, #32]	; (8001160 <DHT_Read+0x8c>)
 8001140:	f001 fd64 	bl	8002c0c <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f8      	bne.n	800113c <DHT_Read+0x68>
	for (j=0;j<8;j++)
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	3301      	adds	r3, #1
 800114e:	71bb      	strb	r3, [r7, #6]
 8001150:	79bb      	ldrb	r3, [r7, #6]
 8001152:	2b07      	cmp	r3, #7
 8001154:	d9c4      	bls.n	80010e0 <DHT_Read+0xc>
	}
	return i;
 8001156:	79fb      	ldrb	r3, [r7, #7]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020000 	.word	0x40020000

08001164 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 800116c:	f7ff ff62 	bl	8001034 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001170:	f7ff ff82 	bl	8001078 <DHT_Check_Response>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <DHT_GetData+0xb4>)
 800117a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800117c:	f7ff ffaa 	bl	80010d4 <DHT_Read>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <DHT_GetData+0xb8>)
 8001186:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001188:	f7ff ffa4 	bl	80010d4 <DHT_Read>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <DHT_GetData+0xbc>)
 8001192:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001194:	f7ff ff9e 	bl	80010d4 <DHT_Read>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <DHT_GetData+0xc0>)
 800119e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80011a0:	f7ff ff98 	bl	80010d4 <DHT_Read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <DHT_GetData+0xc4>)
 80011aa:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80011ac:	f7ff ff92 	bl	80010d4 <DHT_Read>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <DHT_GetData+0xc8>)
 80011b6:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <DHT_GetData+0xc8>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <DHT_GetData+0xb8>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <DHT_GetData+0xbc>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <DHT_GetData+0xc0>)
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a15      	ldr	r2, [pc, #84]	; (8001228 <DHT_GetData+0xc4>)
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	4299      	cmp	r1, r3
 80011d8:	d119      	bne.n	800120e <DHT_GetData+0xaa>
			DHT_Data->Temperature = Temp_byte1;
			DHT_Data->Humidity = Rh_byte1;
		#endif

		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <DHT_GetData+0xc0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	4a11      	ldr	r2, [pc, #68]	; (8001228 <DHT_GetData+0xc4>)
 80011e2:	7812      	ldrb	r2, [r2, #0]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <DHT_GetData+0xb8>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	4a09      	ldr	r2, [pc, #36]	; (8001220 <DHT_GetData+0xbc>)
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	4313      	orrs	r3, r2
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	edc3 7a01 	vstr	s15, [r3, #4]
		#endif
	}
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000008c 	.word	0x2000008c
 800121c:	200000a0 	.word	0x200000a0
 8001220:	200000a2 	.word	0x200000a2
 8001224:	200000a1 	.word	0x200000a1
 8001228:	200000a6 	.word	0x200000a6
 800122c:	200000a4 	.word	0x200000a4

08001230 <sendData>:
DHT_DataTypedef DHT22_Data;
float Temperature, Humidity, sigVolt;
float dustLevel=0.0;
int value[2];

void sendData(){
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b092      	sub	sp, #72	; 0x48
 8001234:	af02      	add	r7, sp, #8
	char buffer[40] = {};
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	2224      	movs	r2, #36	; 0x24
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fac2 	bl	80047cc <memset>
	char temp[7], humi[7], dust[7];
	gcvt(Temperature, 5, temp);
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <sendData+0xa8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f97b 	bl	8000548 <__aeabi_f2d>
 8001252:	4604      	mov	r4, r0
 8001254:	460d      	mov	r5, r1
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	2005      	movs	r0, #5
 800125e:	ec45 4b10 	vmov	d0, r4, r5
 8001262:	f003 fa65 	bl	8004730 <gcvt>
	gcvt(Humidity, 5, humi);
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <sendData+0xac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f96c 	bl	8000548 <__aeabi_f2d>
 8001270:	4604      	mov	r4, r0
 8001272:	460d      	mov	r5, r1
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	4619      	mov	r1, r3
 800127a:	2005      	movs	r0, #5
 800127c:	ec45 4b10 	vmov	d0, r4, r5
 8001280:	f003 fa56 	bl	8004730 <gcvt>
	gcvt(dustLevel, 5, dust);
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <sendData+0xb0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f95d 	bl	8000548 <__aeabi_f2d>
 800128e:	4604      	mov	r4, r0
 8001290:	460d      	mov	r5, r1
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	2005      	movs	r0, #5
 8001298:	ec45 4b10 	vmov	d0, r4, r5
 800129c:	f003 fa48 	bl	8004730 <gcvt>
	sprintf(buffer, "[%s,%s,%d,%s]",temp, humi,value[0],dust);
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <sendData+0xb4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f107 0408 	add.w	r4, r7, #8
 80012a8:	f107 0110 	add.w	r1, r7, #16
 80012ac:	f107 0018 	add.w	r0, r7, #24
 80012b0:	463a      	mov	r2, r7
 80012b2:	9201      	str	r2, [sp, #4]
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	4623      	mov	r3, r4
 80012b8:	460a      	mov	r2, r1
 80012ba:	490b      	ldr	r1, [pc, #44]	; (80012e8 <sendData+0xb8>)
 80012bc:	f003 fa8e 	bl	80047dc <siprintf>
	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80012c0:	f107 0118 	add.w	r1, r7, #24
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	2228      	movs	r2, #40	; 0x28
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <sendData+0xbc>)
 80012cc:	f002 fec5 	bl	800405a <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
}
 80012d0:	bf00      	nop
 80012d2:	3740      	adds	r7, #64	; 0x40
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdb0      	pop	{r4, r5, r7, pc}
 80012d8:	200000fc 	.word	0x200000fc
 80012dc:	200001d0 	.word	0x200001d0
 80012e0:	20000090 	.word	0x20000090
 80012e4:	200001d4 	.word	0x200001d4
 80012e8:	080071f0 	.word	0x080071f0
 80012ec:	20000148 	.word	0x20000148

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f6:	f000 fd7b 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f8d9 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f000 fa43 	bl	8001788 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001302:	f000 fa17 	bl	8001734 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001306:	f000 f93f 	bl	8001588 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800130a:	f000 f9e9 	bl	80016e0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800130e:	f000 f98d 	bl	800162c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  int max_eb=-1e9,min_eb=1e9;
 8001312:	4b59      	ldr	r3, [pc, #356]	; (8001478 <main+0x188>)
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001316:	4b59      	ldr	r3, [pc, #356]	; (800147c <main+0x18c>)
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_TIM_Base_Start(&htim4);
 800131a:	4859      	ldr	r0, [pc, #356]	; (8001480 <main+0x190>)
 800131c:	f002 f91c 	bl	8003558 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // DHT22
	  DHT_GetData(&DHT22_Data);
 8001320:	4858      	ldr	r0, [pc, #352]	; (8001484 <main+0x194>)
 8001322:	f7ff ff1f 	bl	8001164 <DHT_GetData>
	  Temperature = DHT22_Data.Temperature/10.0;
 8001326:	4b57      	ldr	r3, [pc, #348]	; (8001484 <main+0x194>)
 8001328:	ed93 7a00 	vldr	s14, [r3]
 800132c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001334:	4b54      	ldr	r3, [pc, #336]	; (8001488 <main+0x198>)
 8001336:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = DHT22_Data.Humidity/10.0;
 800133a:	4b52      	ldr	r3, [pc, #328]	; (8001484 <main+0x194>)
 800133c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001340:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001348:	4b50      	ldr	r3, [pc, #320]	; (800148c <main+0x19c>)
 800134a:	edc3 7a00 	vstr	s15, [r3]

	  // light sensor
	  ADC_Select_CH0();
 800134e:	f000 fa89 	bl	8001864 <ADC_Select_CH0>
	  HAL_ADC_Start(&hadc1);
 8001352:	484f      	ldr	r0, [pc, #316]	; (8001490 <main+0x1a0>)
 8001354:	f000 fe26 	bl	8001fa4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001358:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800135c:	484c      	ldr	r0, [pc, #304]	; (8001490 <main+0x1a0>)
 800135e:	f000 ff08 	bl	8002172 <HAL_ADC_PollForConversion>
	  value[0] = HAL_ADC_GetValue(&hadc1);
 8001362:	484b      	ldr	r0, [pc, #300]	; (8001490 <main+0x1a0>)
 8001364:	f000 ff90 	bl	8002288 <HAL_ADC_GetValue>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b49      	ldr	r3, [pc, #292]	; (8001494 <main+0x1a4>)
 800136e:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8001370:	4847      	ldr	r0, [pc, #284]	; (8001490 <main+0x1a0>)
 8001372:	f000 fecb 	bl	800210c <HAL_ADC_Stop>

	  // Dust Sensor
	  ADC_Select_CH4();
 8001376:	f000 fa95 	bl	80018a4 <ADC_Select_CH4>
	  HAL_ADC_Start(&hadc1);
 800137a:	4845      	ldr	r0, [pc, #276]	; (8001490 <main+0x1a0>)
 800137c:	f000 fe12 	bl	8001fa4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001380:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001384:	4842      	ldr	r0, [pc, #264]	; (8001490 <main+0x1a0>)
 8001386:	f000 fef4 	bl	8002172 <HAL_ADC_PollForConversion>
	  HAL_GPIO_WritePin(led_Port, led_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001390:	4841      	ldr	r0, [pc, #260]	; (8001498 <main+0x1a8>)
 8001392:	f001 fc53 	bl	8002c3c <HAL_GPIO_WritePin>
//	  delay(280);
	  value[1] = HAL_ADC_GetValue(&hadc1)*5;
 8001396:	483e      	ldr	r0, [pc, #248]	; (8001490 <main+0x1a0>)
 8001398:	f000 ff76 	bl	8002288 <HAL_ADC_GetValue>
 800139c:	4602      	mov	r2, r0
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <main+0x1a4>)
 80013a8:	605a      	str	r2, [r3, #4]
//	  delay(40);
	  sigVolt = ((float)value[1]) * (3.3/4096);
 80013aa:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <main+0x1a4>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	ee17 0a90 	vmov	r0, s15
 80013ba:	f7ff f8c5 	bl	8000548 <__aeabi_f2d>
 80013be:	a328      	add	r3, pc, #160	; (adr r3, 8001460 <main+0x170>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff f918 	bl	80005f8 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fbd4 	bl	8000b7c <__aeabi_d2f>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a31      	ldr	r2, [pc, #196]	; (800149c <main+0x1ac>)
 80013d8:	6013      	str	r3, [r2, #0]
	  dustLevel = 0.17 * sigVolt - 0.1;
 80013da:	4b30      	ldr	r3, [pc, #192]	; (800149c <main+0x1ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8b2 	bl	8000548 <__aeabi_f2d>
 80013e4:	a320      	add	r3, pc, #128	; (adr r3, 8001468 <main+0x178>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7ff f905 	bl	80005f8 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	a31e      	add	r3, pc, #120	; (adr r3, 8001470 <main+0x180>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7fe ff44 	bl	8000288 <__aeabi_dsub>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fbb8 	bl	8000b7c <__aeabi_d2f>
 800140c:	4603      	mov	r3, r0
 800140e:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <main+0x1b0>)
 8001410:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(led_Port, led_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001418:	481f      	ldr	r0, [pc, #124]	; (8001498 <main+0x1a8>)
 800141a:	f001 fc0f 	bl	8002c3c <HAL_GPIO_WritePin>
//	  delay(9680);
//	  if(dustLevel < 0.0){
//	  }
	  dustLevel = 0.0;
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <main+0x1b0>)
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8001426:	481a      	ldr	r0, [pc, #104]	; (8001490 <main+0x1a0>)
 8001428:	f000 fe70 	bl	800210c <HAL_ADC_Stop>


	  // PM2.5

	  sendData();
 800142c:	f7ff ff00 	bl	8001230 <sendData>
	  char rbuffer[40];
	  if (HAL_UART_Receive(&huart1, rbuffer, sizeof(rbuffer), 100000) == HAL_OK){
 8001430:	4639      	mov	r1, r7
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <main+0x1b4>)
 8001434:	2228      	movs	r2, #40	; 0x28
 8001436:	481c      	ldr	r0, [pc, #112]	; (80014a8 <main+0x1b8>)
 8001438:	f002 fea1 	bl	800417e <HAL_UART_Receive>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <main+0x160>
		  HAL_UART_Transmit(&huart2, rbuffer, sizeof(rbuffer), HAL_MAX_DELAY);
 8001442:	4639      	mov	r1, r7
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	2228      	movs	r2, #40	; 0x28
 800144a:	4818      	ldr	r0, [pc, #96]	; (80014ac <main+0x1bc>)
 800144c:	f002 fe05 	bl	800405a <HAL_UART_Transmit>
	  }
	  HAL_Delay(500);
 8001450:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001454:	f000 fd3e 	bl	8001ed4 <HAL_Delay>
  {
 8001458:	e762      	b.n	8001320 <main+0x30>
 800145a:	bf00      	nop
 800145c:	f3af 8000 	nop.w
 8001460:	66666666 	.word	0x66666666
 8001464:	3f4a6666 	.word	0x3f4a6666
 8001468:	5c28f5c3 	.word	0x5c28f5c3
 800146c:	3fc5c28f 	.word	0x3fc5c28f
 8001470:	9999999a 	.word	0x9999999a
 8001474:	3fb99999 	.word	0x3fb99999
 8001478:	c4653600 	.word	0xc4653600
 800147c:	3b9aca00 	.word	0x3b9aca00
 8001480:	200000b4 	.word	0x200000b4
 8001484:	200000ac 	.word	0x200000ac
 8001488:	200000fc 	.word	0x200000fc
 800148c:	200001d0 	.word	0x200001d0
 8001490:	20000100 	.word	0x20000100
 8001494:	200001d4 	.word	0x200001d4
 8001498:	40020000 	.word	0x40020000
 800149c:	200000a8 	.word	0x200000a8
 80014a0:	20000090 	.word	0x20000090
 80014a4:	000186a0 	.word	0x000186a0
 80014a8:	20000148 	.word	0x20000148
 80014ac:	2000018c 	.word	0x2000018c

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	; 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2230      	movs	r2, #48	; 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 f984 	bl	80047cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	4b29      	ldr	r3, [pc, #164]	; (8001580 <SystemClock_Config+0xd0>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4a28      	ldr	r2, [pc, #160]	; (8001580 <SystemClock_Config+0xd0>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <SystemClock_Config+0xd0>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <SystemClock_Config+0xd4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <SystemClock_Config+0xd4>)
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <SystemClock_Config+0xd4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001510:	2302      	movs	r3, #2
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001518:	2310      	movs	r3, #16
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151c:	2302      	movs	r3, #2
 800151e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001520:	2300      	movs	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001524:	2310      	movs	r3, #16
 8001526:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001528:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800152c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800152e:	2304      	movs	r3, #4
 8001530:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001532:	2307      	movs	r3, #7
 8001534:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fb98 	bl	8002c70 <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001546:	f000 f9cd 	bl	80018e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	230f      	movs	r3, #15
 800154c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154e:	2302      	movs	r3, #2
 8001550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2102      	movs	r1, #2
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fdfa 	bl	8003160 <HAL_RCC_ClockConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001572:	f000 f9b7 	bl	80018e4 <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3750      	adds	r7, #80	; 0x50
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40007000 	.word	0x40007000

08001588 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158e:	463b      	mov	r3, r7
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <MX_ADC1_Init+0x98>)
 800159c:	4a21      	ldr	r2, [pc, #132]	; (8001624 <MX_ADC1_Init+0x9c>)
 800159e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <MX_ADC1_Init+0x98>)
 80015a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_ADC1_Init+0x98>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <MX_ADC1_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_ADC1_Init+0x98>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_ADC1_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_ADC1_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <MX_ADC1_Init+0x98>)
 80015ca:	4a17      	ldr	r2, [pc, #92]	; (8001628 <MX_ADC1_Init+0xa0>)
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_ADC1_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_ADC1_Init+0x98>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_ADC1_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_ADC1_Init+0x98>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <MX_ADC1_Init+0x98>)
 80015ea:	f000 fc97 	bl	8001f1c <HAL_ADC_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015f4:	f000 f976 	bl	80018e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_ADC1_Init+0x98>)
 800160a:	f000 fe4b 	bl	80022a4 <HAL_ADC_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001614:	f000 f966 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000100 	.word	0x20000100
 8001624:	40012000 	.word	0x40012000
 8001628:	0f000001 	.word	0x0f000001

0800162c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_TIM4_Init+0xac>)
 8001650:	4a22      	ldr	r2, [pc, #136]	; (80016dc <MX_TIM4_Init+0xb0>)
 8001652:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <MX_TIM4_Init+0xac>)
 8001656:	2253      	movs	r2, #83	; 0x53
 8001658:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <MX_TIM4_Init+0xac>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MX_TIM4_Init+0xac>)
 8001662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001666:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <MX_TIM4_Init+0xac>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_TIM4_Init+0xac>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001674:	4818      	ldr	r0, [pc, #96]	; (80016d8 <MX_TIM4_Init+0xac>)
 8001676:	f001 ffc9 	bl	800360c <HAL_TIM_PWM_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001680:	f000 f930 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	4619      	mov	r1, r3
 8001692:	4811      	ldr	r0, [pc, #68]	; (80016d8 <MX_TIM4_Init+0xac>)
 8001694:	f002 fc12 	bl	8003ebc <HAL_TIMEx_MasterConfigSynchronization>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800169e:	f000 f921 	bl	80018e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a2:	2360      	movs	r3, #96	; 0x60
 80016a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <MX_TIM4_Init+0xac>)
 80016ba:	f002 f8ff 	bl	80038bc <HAL_TIM_PWM_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80016c4:	f000 f90e 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <MX_TIM4_Init+0xac>)
 80016ca:	f000 f9a5 	bl	8001a18 <HAL_TIM_MspPostInit>

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000b4 	.word	0x200000b4
 80016dc:	40000800 	.word	0x40000800

080016e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_USART1_UART_Init+0x4c>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <MX_USART1_UART_Init+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <MX_USART1_UART_Init+0x4c>)
 80016ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_USART1_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_USART1_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_USART1_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_USART1_UART_Init+0x4c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_USART1_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_USART1_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_USART1_UART_Init+0x4c>)
 8001718:	f002 fc52 	bl	8003fc0 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001722:	f000 f8df 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000148 	.word	0x20000148
 8001730:	40011000 	.word	0x40011000

08001734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_USART2_UART_Init+0x4c>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <MX_USART2_UART_Init+0x50>)
 800173c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_USART2_UART_Init+0x4c>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_USART2_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_USART2_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_USART2_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_USART2_UART_Init+0x4c>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_USART2_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_USART2_UART_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_USART2_UART_Init+0x4c>)
 800176c:	f002 fc28 	bl	8003fc0 <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001776:	f000 f8b5 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000018c 	.word	0x2000018c
 8001784:	40004400 	.word	0x40004400

08001788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a2c      	ldr	r2, [pc, #176]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a25      	ldr	r2, [pc, #148]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a17      	ldr	r2, [pc, #92]	; (8001858 <MX_GPIO_Init+0xd0>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <MX_GPIO_Init+0xd0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2120      	movs	r1, #32
 8001812:	4812      	ldr	r0, [pc, #72]	; (800185c <MX_GPIO_Init+0xd4>)
 8001814:	f001 fa12 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800181e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_GPIO_Init+0xd8>)
 8001830:	f001 f868 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001834:	2320      	movs	r3, #32
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_GPIO_Init+0xd4>)
 800184c:	f001 f85a 	bl	8002904 <HAL_GPIO_Init>

}
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	; 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000
 8001860:	40020800 	.word	0x40020800

08001864 <ADC_Select_CH0>:

/* USER CODE BEGIN 4 */
void ADC_Select_CH0 (void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800186a:	463b      	mov	r3, r7
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800187a:	2301      	movs	r3, #1
 800187c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800187e:	2302      	movs	r3, #2
 8001880:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001882:	463b      	mov	r3, r7
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <ADC_Select_CH0+0x3c>)
 8001888:	f000 fd0c 	bl	80022a4 <HAL_ADC_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <ADC_Select_CH0+0x32>
	  {
	    Error_Handler();
 8001892:	f000 f827 	bl	80018e4 <Error_Handler>
	  }
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000100 	.word	0x20000100

080018a4 <ADC_Select_CH4>:

void ADC_Select_CH4 (void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80018aa:	463b      	mov	r3, r7
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 80018b6:	2304      	movs	r3, #4
 80018b8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80018be:	2302      	movs	r3, #2
 80018c0:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c2:	463b      	mov	r3, r7
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <ADC_Select_CH4+0x3c>)
 80018c8:	f000 fcec 	bl	80022a4 <HAL_ADC_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <ADC_Select_CH4+0x32>
	  {
	    Error_Handler();
 80018d2:	f000 f807 	bl	80018e4 <Error_Handler>
	  }
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000100 	.word	0x20000100

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	e7fe      	b.n	80018ec <Error_Handler+0x8>
	...

080018f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_MspInit+0x4c>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	4a0f      	ldr	r2, [pc, #60]	; (800193c <HAL_MspInit+0x4c>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001904:	6453      	str	r3, [r2, #68]	; 0x44
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_MspInit+0x4c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_MspInit+0x4c>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a08      	ldr	r2, [pc, #32]	; (800193c <HAL_MspInit+0x4c>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_MspInit+0x4c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800192e:	2006      	movs	r0, #6
 8001930:	f000 ffa6 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800

08001940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a17      	ldr	r2, [pc, #92]	; (80019bc <HAL_ADC_MspInit+0x7c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d127      	bne.n	80019b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_ADC_MspInit+0x80>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <HAL_ADC_MspInit+0x80>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_ADC_MspInit+0x80>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_ADC_MspInit+0x80>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_ADC_MspInit+0x80>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_ADC_MspInit+0x80>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800199a:	2311      	movs	r3, #17
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199e:	2303      	movs	r3, #3
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <HAL_ADC_MspInit+0x84>)
 80019ae:	f000 ffa9 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	; 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40012000 	.word	0x40012000
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020000 	.word	0x40020000

080019c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_TIM_PWM_MspInit+0x48>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d115      	bne.n	8001a06 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_TIM_PWM_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <HAL_TIM_PWM_MspInit+0x4c>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_TIM_PWM_MspInit+0x4c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2101      	movs	r1, #1
 80019fa:	201e      	movs	r0, #30
 80019fc:	f000 ff4b 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a00:	201e      	movs	r0, #30
 8001a02:	f000 ff64 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40000800 	.word	0x40000800
 8001a14:	40023800 	.word	0x40023800

08001a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <HAL_TIM_MspPostInit+0x68>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d11d      	bne.n	8001a76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_TIM_MspPostInit+0x6c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <HAL_TIM_MspPostInit+0x6c>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_TIM_MspPostInit+0x6c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a56:	2340      	movs	r3, #64	; 0x40
 8001a58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <HAL_TIM_MspPostInit+0x70>)
 8001a72:	f000 ff47 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a76:	bf00      	nop
 8001a78:	3720      	adds	r7, #32
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40000800 	.word	0x40000800
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020400 	.word	0x40020400

08001a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	; 0x30
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <HAL_UART_MspInit+0xe8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d12d      	bne.n	8001b0a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a30      	ldr	r2, [pc, #192]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001ab8:	f043 0310 	orr.w	r3, r3, #16
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a29      	ldr	r2, [pc, #164]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ae6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af8:	2307      	movs	r3, #7
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	481e      	ldr	r0, [pc, #120]	; (8001b7c <HAL_UART_MspInit+0xf0>)
 8001b04:	f000 fefe 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b08:	e030      	b.n	8001b6c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <HAL_UART_MspInit+0xf4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d12b      	bne.n	8001b6c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b22:	6413      	str	r3, [r2, #64]	; 0x40
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_UART_MspInit+0xec>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b4c:	230c      	movs	r3, #12
 8001b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	4619      	mov	r1, r3
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_UART_MspInit+0xf0>)
 8001b68:	f000 fecc 	bl	8002904 <HAL_GPIO_Init>
}
 8001b6c:	bf00      	nop
 8001b6e:	3730      	adds	r7, #48	; 0x30
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40011000 	.word	0x40011000
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40004400 	.word	0x40004400

08001b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <NMI_Handler+0x4>

08001b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <HardFault_Handler+0x4>

08001b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <MemManage_Handler+0x4>

08001b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <BusFault_Handler+0x4>

08001b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <UsageFault_Handler+0x4>

08001ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd0:	f000 f960 	bl	8001e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <TIM4_IRQHandler+0x10>)
 8001bde:	f001 fd64 	bl	80036aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200000b4 	.word	0x200000b4

08001bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
	return 1;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_kill>:

int _kill(int pid, int sig)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c06:	f002 fdb7 	bl	8004778 <__errno>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2216      	movs	r2, #22
 8001c0e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_exit>:

void _exit (int status)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ffe7 	bl	8001bfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c2e:	e7fe      	b.n	8001c2e <_exit+0x12>

08001c30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e00a      	b.n	8001c58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c42:	f3af 8000 	nop.w
 8001c46:	4601      	mov	r1, r0
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60ba      	str	r2, [r7, #8]
 8001c4e:	b2ca      	uxtb	r2, r1
 8001c50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbf0      	blt.n	8001c42 <_read+0x12>
	}

return len;
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e009      	b.n	8001c90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	60ba      	str	r2, [r7, #8]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbf1      	blt.n	8001c7c <_write+0x12>
	}
	return len;
 8001c98:	687b      	ldr	r3, [r7, #4]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_close>:

int _close(int file)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	return -1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cca:	605a      	str	r2, [r3, #4]
	return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_isatty>:

int _isatty(int file)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
	return 0;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f002 fd1c 	bl	8004778 <__errno>
 8001d40:	4603      	mov	r3, r0
 8001d42:	220c      	movs	r2, #12
 8001d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20018000 	.word	0x20018000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	20000094 	.word	0x20000094
 8001d74:	200001f0 	.word	0x200001f0

08001d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <SystemInit+0x20>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <SystemInit+0x20>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da0:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001da2:	490e      	ldr	r1, [pc, #56]	; (8001ddc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001da4:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001db8:	4c0b      	ldr	r4, [pc, #44]	; (8001de8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dc6:	f7ff ffd7 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dca:	f002 fcdb 	bl	8004784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dce:	f7ff fa8f 	bl	80012f0 <main>
  bx  lr    
 8001dd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ddc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001de0:	080074f4 	.word	0x080074f4
  ldr r2, =_sbss
 8001de4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001de8:	200001f0 	.word	0x200001f0

08001dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dec:	e7fe      	b.n	8001dec <ADC_IRQHandler>
	...

08001df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <HAL_Init+0x40>)
 8001dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_Init+0x40>)
 8001e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_Init+0x40>)
 8001e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f000 fd31 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f808 	bl	8001e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e24:	f7ff fd64 	bl	80018f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x54>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_InitTick+0x58>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fd49 	bl	80028ea <HAL_SYSTICK_Config>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00e      	b.n	8001e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0f      	cmp	r3, #15
 8001e66:	d80a      	bhi.n	8001e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f000 fd11 	bl	8002896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <HAL_InitTick+0x5c>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	200001dc 	.word	0x200001dc

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	200001dc 	.word	0x200001dc

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff ffee 	bl	8001ebc <HAL_GetTick>
 8001ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_Delay+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001efa:	bf00      	nop
 8001efc:	f7ff ffde 	bl	8001ebc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000008 	.word	0x20000008

08001f1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e033      	b.n	8001f9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff fd00 	bl	8001940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d118      	bne.n	8001f8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f62:	f023 0302 	bic.w	r3, r3, #2
 8001f66:	f043 0202 	orr.w	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 faba 	bl	80024e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f023 0303 	bic.w	r3, r3, #3
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
 8001f8a:	e001      	b.n	8001f90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_Start+0x1a>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e097      	b.n	80020ee <HAL_ADC_Start+0x14a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d018      	beq.n	8002006 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe4:	4b45      	ldr	r3, [pc, #276]	; (80020fc <HAL_ADC_Start+0x158>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a45      	ldr	r2, [pc, #276]	; (8002100 <HAL_ADC_Start+0x15c>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0c9a      	lsrs	r2, r3, #18
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ff8:	e002      	b.n	8002000 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f9      	bne.n	8001ffa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d15f      	bne.n	80020d4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800203e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002052:	d106      	bne.n	8002062 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	f023 0206 	bic.w	r2, r3, #6
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	645a      	str	r2, [r3, #68]	; 0x44
 8002060:	e002      	b.n	8002068 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_ADC_Start+0x160>)
 8002072:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800207c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d129      	bne.n	80020ec <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	e020      	b.n	80020ec <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a16      	ldr	r2, [pc, #88]	; (8002108 <HAL_ADC_Start+0x164>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d11b      	bne.n	80020ec <HAL_ADC_Start+0x148>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d114      	bne.n	80020ec <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	e00b      	b.n	80020ec <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0210 	orr.w	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000000 	.word	0x20000000
 8002100:	431bde83 	.word	0x431bde83
 8002104:	40012300 	.word	0x40012300
 8002108:	40012000 	.word	0x40012000

0800210c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Stop+0x16>
 800211e:	2302      	movs	r3, #2
 8002120:	e021      	b.n	8002166 <HAL_ADC_Stop+0x5a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218e:	d113      	bne.n	80021b8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800219a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219e:	d10b      	bne.n	80021b8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e063      	b.n	8002280 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80021b8:	f7ff fe80 	bl	8001ebc <HAL_GetTick>
 80021bc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021be:	e021      	b.n	8002204 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c6:	d01d      	beq.n	8002204 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_ADC_PollForConversion+0x6c>
 80021ce:	f7ff fe75 	bl	8001ebc <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d212      	bcs.n	8002204 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d00b      	beq.n	8002204 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f043 0204 	orr.w	r2, r3, #4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e03d      	b.n	8002280 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d1d6      	bne.n	80021c0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f06f 0212 	mvn.w	r2, #18
 800221a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d123      	bne.n	800227e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800223a:	2b00      	cmp	r3, #0
 800223c:	d11f      	bne.n	800227e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002256:	2b00      	cmp	r3, #0
 8002258:	d111      	bne.n	800227e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1c>
 80022bc:	2302      	movs	r3, #2
 80022be:	e105      	b.n	80024cc <HAL_ADC_ConfigChannel+0x228>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d925      	bls.n	800231c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68d9      	ldr	r1, [r3, #12]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	3b1e      	subs	r3, #30
 80022e6:	2207      	movs	r2, #7
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43da      	mvns	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	400a      	ands	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68d9      	ldr	r1, [r3, #12]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4618      	mov	r0, r3
 8002308:	4603      	mov	r3, r0
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4403      	add	r3, r0
 800230e:	3b1e      	subs	r3, #30
 8002310:	409a      	lsls	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	e022      	b.n	8002362 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6919      	ldr	r1, [r3, #16]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	2207      	movs	r2, #7
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	400a      	ands	r2, r1
 800233e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6919      	ldr	r1, [r3, #16]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	4618      	mov	r0, r3
 8002352:	4603      	mov	r3, r0
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4403      	add	r3, r0
 8002358:	409a      	lsls	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b06      	cmp	r3, #6
 8002368:	d824      	bhi.n	80023b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b05      	subs	r3, #5
 800237c:	221f      	movs	r2, #31
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	400a      	ands	r2, r1
 800238a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	4618      	mov	r0, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	3b05      	subs	r3, #5
 80023a6:	fa00 f203 	lsl.w	r2, r0, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34
 80023b2:	e04c      	b.n	800244e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	d824      	bhi.n	8002406 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	3b23      	subs	r3, #35	; 0x23
 80023ce:	221f      	movs	r2, #31
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43da      	mvns	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	400a      	ands	r2, r1
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	3b23      	subs	r3, #35	; 0x23
 80023f8:	fa00 f203 	lsl.w	r2, r0, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
 8002404:	e023      	b.n	800244e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b41      	subs	r3, #65	; 0x41
 8002418:	221f      	movs	r2, #31
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	400a      	ands	r2, r1
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b41      	subs	r3, #65	; 0x41
 8002442:	fa00 f203 	lsl.w	r2, r0, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800244e:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_ADC_ConfigChannel+0x234>)
 8002450:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a21      	ldr	r2, [pc, #132]	; (80024dc <HAL_ADC_ConfigChannel+0x238>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d109      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1cc>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b12      	cmp	r3, #18
 8002462:	d105      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a19      	ldr	r2, [pc, #100]	; (80024dc <HAL_ADC_ConfigChannel+0x238>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d123      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x21e>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d003      	beq.n	800248a <HAL_ADC_ConfigChannel+0x1e6>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b11      	cmp	r3, #17
 8002488:	d11b      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b10      	cmp	r3, #16
 800249c:	d111      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_ADC_ConfigChannel+0x23c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <HAL_ADC_ConfigChannel+0x240>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	0c9a      	lsrs	r2, r3, #18
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b4:	e002      	b.n	80024bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40012300 	.word	0x40012300
 80024dc:	40012000 	.word	0x40012000
 80024e0:	20000000 	.word	0x20000000
 80024e4:	431bde83 	.word	0x431bde83

080024e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f0:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <ADC_Init+0x1f0>)
 80024f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	431a      	orrs	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800251c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	021a      	lsls	r2, r3, #8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6899      	ldr	r1, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	4a58      	ldr	r2, [pc, #352]	; (80026dc <ADC_Init+0x1f4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d022      	beq.n	80025c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800258e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6899      	ldr	r1, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6899      	ldr	r1, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	e00f      	b.n	80025e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0202 	bic.w	r2, r2, #2
 80025f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7e1b      	ldrb	r3, [r3, #24]
 8002600:	005a      	lsls	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01b      	beq.n	800264c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002622:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002632:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	3b01      	subs	r3, #1
 8002640:	035a      	lsls	r2, r3, #13
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	e007      	b.n	800265c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	3b01      	subs	r3, #1
 8002678:	051a      	lsls	r2, r3, #20
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800269e:	025a      	lsls	r2, r3, #9
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6899      	ldr	r1, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	029a      	lsls	r2, r3, #10
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40012300 	.word	0x40012300
 80026dc:	0f000001 	.word	0x0f000001

080026e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800270c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db0b      	blt.n	800276e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	4907      	ldr	r1, [pc, #28]	; (800277c <__NVIC_EnableIRQ+0x38>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	; (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	; (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800284c:	d301      	bcc.n	8002852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <SysTick_Config+0x40>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285a:	210f      	movs	r1, #15
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f7ff ff8e 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <SysTick_Config+0x40>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <SysTick_Config+0x40>)
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff29 	bl	80026e0 <__NVIC_SetPriorityGrouping>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a8:	f7ff ff3e 	bl	8002728 <__NVIC_GetPriorityGrouping>
 80028ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff ff8e 	bl	80027d4 <NVIC_EncodePriority>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff5d 	bl	8002780 <__NVIC_SetPriority>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff31 	bl	8002744 <__NVIC_EnableIRQ>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ffa2 	bl	800283c <SysTick_Config>
 80028f8:	4603      	mov	r3, r0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	e159      	b.n	8002bd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002920:	2201      	movs	r2, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	f040 8148 	bne.w	8002bce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d005      	beq.n	8002956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002952:	2b02      	cmp	r3, #2
 8002954:	d130      	bne.n	80029b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 0201 	and.w	r2, r3, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d017      	beq.n	80029f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d123      	bne.n	8002a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	08da      	lsrs	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3208      	adds	r2, #8
 8002a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	08da      	lsrs	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	69b9      	ldr	r1, [r7, #24]
 8002a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0203 	and.w	r2, r3, #3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80a2 	beq.w	8002bce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b57      	ldr	r3, [pc, #348]	; (8002bec <HAL_GPIO_Init+0x2e8>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a56      	ldr	r2, [pc, #344]	; (8002bec <HAL_GPIO_Init+0x2e8>)
 8002a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_GPIO_Init+0x2e8>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa6:	4a52      	ldr	r2, [pc, #328]	; (8002bf0 <HAL_GPIO_Init+0x2ec>)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	220f      	movs	r2, #15
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a49      	ldr	r2, [pc, #292]	; (8002bf4 <HAL_GPIO_Init+0x2f0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x202>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a48      	ldr	r2, [pc, #288]	; (8002bf8 <HAL_GPIO_Init+0x2f4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x1fe>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a47      	ldr	r2, [pc, #284]	; (8002bfc <HAL_GPIO_Init+0x2f8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x1fa>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a46      	ldr	r2, [pc, #280]	; (8002c00 <HAL_GPIO_Init+0x2fc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x1f6>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a45      	ldr	r2, [pc, #276]	; (8002c04 <HAL_GPIO_Init+0x300>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x1f2>
 8002af2:	2304      	movs	r3, #4
 8002af4:	e008      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002af6:	2307      	movs	r3, #7
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002afa:	2303      	movs	r3, #3
 8002afc:	e004      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e002      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002b06:	2300      	movs	r3, #0
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f002 0203 	and.w	r2, r2, #3
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	4093      	lsls	r3, r2
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b18:	4935      	ldr	r1, [pc, #212]	; (8002bf0 <HAL_GPIO_Init+0x2ec>)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b26:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b4a:	4a2f      	ldr	r2, [pc, #188]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b74:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7a:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc8:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <HAL_GPIO_Init+0x304>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b0f      	cmp	r3, #15
 8002bd8:	f67f aea2 	bls.w	8002920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3724      	adds	r7, #36	; 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020c00 	.word	0x40020c00
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40013c00 	.word	0x40013c00

08002c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	887b      	ldrh	r3, [r7, #2]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e001      	b.n	8002c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c4c:	787b      	ldrb	r3, [r7, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c58:	e003      	b.n	8002c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	041a      	lsls	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e264      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d075      	beq.n	8002d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8e:	4ba3      	ldr	r3, [pc, #652]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d00c      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9a:	4ba0      	ldr	r3, [pc, #640]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d112      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca6:	4b9d      	ldr	r3, [pc, #628]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb2:	d10b      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	4b99      	ldr	r3, [pc, #612]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d05b      	beq.n	8002d78 <HAL_RCC_OscConfig+0x108>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d157      	bne.n	8002d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e23f      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd4:	d106      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x74>
 8002cd6:	4b91      	ldr	r3, [pc, #580]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a90      	ldr	r2, [pc, #576]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e01d      	b.n	8002d20 <HAL_RCC_OscConfig+0xb0>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x98>
 8002cee:	4b8b      	ldr	r3, [pc, #556]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a8a      	ldr	r2, [pc, #552]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b88      	ldr	r3, [pc, #544]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a87      	ldr	r2, [pc, #540]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e00b      	b.n	8002d20 <HAL_RCC_OscConfig+0xb0>
 8002d08:	4b84      	ldr	r3, [pc, #528]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a83      	ldr	r2, [pc, #524]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a80      	ldr	r2, [pc, #512]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d013      	beq.n	8002d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7ff f8c8 	bl	8001ebc <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d30:	f7ff f8c4 	bl	8001ebc <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e204      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0xc0>
 8002d4e:	e014      	b.n	8002d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7ff f8b4 	bl	8001ebc <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d58:	f7ff f8b0 	bl	8001ebc <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1f0      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	4b6c      	ldr	r3, [pc, #432]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0xe8>
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d063      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d92:	4b62      	ldr	r3, [pc, #392]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d11c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9e:	4b5f      	ldr	r3, [pc, #380]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x152>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e1c4      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4952      	ldr	r1, [pc, #328]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	e03a      	b.n	8002e4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de0:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <HAL_RCC_OscConfig+0x2b0>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7ff f869 	bl	8001ebc <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dee:	f7ff f865 	bl	8001ebc <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1a5      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4940      	ldr	r1, [pc, #256]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_OscConfig+0x2b0>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7ff f848 	bl	8001ebc <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e30:	f7ff f844 	bl	8001ebc <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e184      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d030      	beq.n	8002ebc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e62:	4b30      	ldr	r3, [pc, #192]	; (8002f24 <HAL_RCC_OscConfig+0x2b4>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7ff f828 	bl	8001ebc <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e70:	f7ff f824 	bl	8001ebc <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e164      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x200>
 8002e8e:	e015      	b.n	8002ebc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_RCC_OscConfig+0x2b4>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7ff f811 	bl	8001ebc <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7ff f80d 	bl	8001ebc <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e14d      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a0 	beq.w	800300a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_OscConfig+0x2b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d121      	bne.n	8002f4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_RCC_OscConfig+0x2b8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <HAL_RCC_OscConfig+0x2b8>)
 8002f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f12:	f7fe ffd3 	bl	8001ebc <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f18:	e011      	b.n	8002f3e <HAL_RCC_OscConfig+0x2ce>
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	42470000 	.word	0x42470000
 8002f24:	42470e80 	.word	0x42470e80
 8002f28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fe ffc6 	bl	8001ebc <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e106      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b85      	ldr	r3, [pc, #532]	; (8003154 <HAL_RCC_OscConfig+0x4e4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d106      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2f0>
 8002f52:	4b81      	ldr	r3, [pc, #516]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a80      	ldr	r2, [pc, #512]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	e01c      	b.n	8002f9a <HAL_RCC_OscConfig+0x32a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d10c      	bne.n	8002f82 <HAL_RCC_OscConfig+0x312>
 8002f68:	4b7b      	ldr	r3, [pc, #492]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4a7a      	ldr	r2, [pc, #488]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f6e:	f043 0304 	orr.w	r3, r3, #4
 8002f72:	6713      	str	r3, [r2, #112]	; 0x70
 8002f74:	4b78      	ldr	r3, [pc, #480]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a77      	ldr	r2, [pc, #476]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f80:	e00b      	b.n	8002f9a <HAL_RCC_OscConfig+0x32a>
 8002f82:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	4a74      	ldr	r2, [pc, #464]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8e:	4b72      	ldr	r3, [pc, #456]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a71      	ldr	r2, [pc, #452]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f94:	f023 0304 	bic.w	r3, r3, #4
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d015      	beq.n	8002fce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fe ff8b 	bl	8001ebc <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fe ff87 	bl	8001ebc <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0c5      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc0:	4b65      	ldr	r3, [pc, #404]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ee      	beq.n	8002faa <HAL_RCC_OscConfig+0x33a>
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7fe ff75 	bl	8001ebc <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7fe ff71 	bl	8001ebc <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0af      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fec:	4b5a      	ldr	r3, [pc, #360]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ee      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffe:	4b56      	ldr	r3, [pc, #344]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a55      	ldr	r2, [pc, #340]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8003004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 809b 	beq.w	800314a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003014:	4b50      	ldr	r3, [pc, #320]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d05c      	beq.n	80030da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d141      	bne.n	80030ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_OscConfig+0x4ec>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7fe ff45 	bl	8001ebc <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003036:	f7fe ff41 	bl	8001ebc <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e081      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003048:	4b43      	ldr	r3, [pc, #268]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	019b      	lsls	r3, r3, #6
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	3b01      	subs	r3, #1
 800306e:	041b      	lsls	r3, r3, #16
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	061b      	lsls	r3, r3, #24
 8003078:	4937      	ldr	r1, [pc, #220]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <HAL_RCC_OscConfig+0x4ec>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe ff1a 	bl	8001ebc <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe ff16 	bl	8001ebc <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e056      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309e:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x41c>
 80030aa:	e04e      	b.n	800314a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ac:	4b2b      	ldr	r3, [pc, #172]	; (800315c <HAL_RCC_OscConfig+0x4ec>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fe ff03 	bl	8001ebc <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe feff 	bl	8001ebc <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e03f      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030cc:	4b22      	ldr	r3, [pc, #136]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x44a>
 80030d8:	e037      	b.n	800314a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e032      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030e6:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d028      	beq.n	8003146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d121      	bne.n	8003146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d11a      	bne.n	8003146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003116:	4013      	ands	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800311c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311e:	4293      	cmp	r3, r2
 8003120:	d111      	bne.n	8003146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	3b01      	subs	r3, #1
 8003130:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d107      	bne.n	8003146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40007000 	.word	0x40007000
 8003158:	40023800 	.word	0x40023800
 800315c:	42470060 	.word	0x42470060

08003160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0cc      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003174:	4b68      	ldr	r3, [pc, #416]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d90c      	bls.n	800319c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b65      	ldr	r3, [pc, #404]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b63      	ldr	r3, [pc, #396]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0b8      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b4:	4b59      	ldr	r3, [pc, #356]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a58      	ldr	r2, [pc, #352]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031cc:	4b53      	ldr	r3, [pc, #332]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a52      	ldr	r2, [pc, #328]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d8:	4b50      	ldr	r3, [pc, #320]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	494d      	ldr	r1, [pc, #308]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d044      	beq.n	8003280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d119      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e07f      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d003      	beq.n	800321e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321a:	2b03      	cmp	r3, #3
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321e:	4b3f      	ldr	r3, [pc, #252]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e06f      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e067      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323e:	4b37      	ldr	r3, [pc, #220]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f023 0203 	bic.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4934      	ldr	r1, [pc, #208]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003250:	f7fe fe34 	bl	8001ebc <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	e00a      	b.n	800326e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003258:	f7fe fe30 	bl	8001ebc <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e04f      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 020c 	and.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	429a      	cmp	r2, r3
 800327e:	d1eb      	bne.n	8003258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d20c      	bcs.n	80032a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328e:	4b22      	ldr	r3, [pc, #136]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b20      	ldr	r3, [pc, #128]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e032      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4916      	ldr	r1, [pc, #88]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d2:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	490e      	ldr	r1, [pc, #56]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032e6:	f000 f821 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80032ea:	4602      	mov	r2, r0
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	490a      	ldr	r1, [pc, #40]	; (8003320 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	5ccb      	ldrb	r3, [r1, r3]
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	4a09      	ldr	r2, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fd94 	bl	8001e34 <HAL_InitTick>

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40023c00 	.word	0x40023c00
 800331c:	40023800 	.word	0x40023800
 8003320:	08007200 	.word	0x08007200
 8003324:	20000000 	.word	0x20000000
 8003328:	20000004 	.word	0x20000004

0800332c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800332c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	2300      	movs	r3, #0
 800333e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003344:	4b67      	ldr	r3, [pc, #412]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d00d      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x40>
 8003350:	2b08      	cmp	r3, #8
 8003352:	f200 80bd 	bhi.w	80034d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x34>
 800335a:	2b04      	cmp	r3, #4
 800335c:	d003      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x3a>
 800335e:	e0b7      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003360:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003362:	60bb      	str	r3, [r7, #8]
       break;
 8003364:	e0b7      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003366:	4b61      	ldr	r3, [pc, #388]	; (80034ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003368:	60bb      	str	r3, [r7, #8]
      break;
 800336a:	e0b4      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800336c:	4b5d      	ldr	r3, [pc, #372]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003374:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003376:	4b5b      	ldr	r3, [pc, #364]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d04d      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003382:	4b58      	ldr	r3, [pc, #352]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	461a      	mov	r2, r3
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	ea02 0800 	and.w	r8, r2, r0
 800339a:	ea03 0901 	and.w	r9, r3, r1
 800339e:	4640      	mov	r0, r8
 80033a0:	4649      	mov	r1, r9
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	014b      	lsls	r3, r1, #5
 80033ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033b0:	0142      	lsls	r2, r0, #5
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	ebb0 0008 	subs.w	r0, r0, r8
 80033ba:	eb61 0109 	sbc.w	r1, r1, r9
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	018b      	lsls	r3, r1, #6
 80033c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033cc:	0182      	lsls	r2, r0, #6
 80033ce:	1a12      	subs	r2, r2, r0
 80033d0:	eb63 0301 	sbc.w	r3, r3, r1
 80033d4:	f04f 0000 	mov.w	r0, #0
 80033d8:	f04f 0100 	mov.w	r1, #0
 80033dc:	00d9      	lsls	r1, r3, #3
 80033de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033e2:	00d0      	lsls	r0, r2, #3
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	eb12 0208 	adds.w	r2, r2, r8
 80033ec:	eb43 0309 	adc.w	r3, r3, r9
 80033f0:	f04f 0000 	mov.w	r0, #0
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	0259      	lsls	r1, r3, #9
 80033fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033fe:	0250      	lsls	r0, r2, #9
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	461a      	mov	r2, r3
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	f7fd fc04 	bl	8000c1c <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4613      	mov	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e04a      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	099b      	lsrs	r3, r3, #6
 8003424:	461a      	mov	r2, r3
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800342e:	f04f 0100 	mov.w	r1, #0
 8003432:	ea02 0400 	and.w	r4, r2, r0
 8003436:	ea03 0501 	and.w	r5, r3, r1
 800343a:	4620      	mov	r0, r4
 800343c:	4629      	mov	r1, r5
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	014b      	lsls	r3, r1, #5
 8003448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800344c:	0142      	lsls	r2, r0, #5
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	1b00      	subs	r0, r0, r4
 8003454:	eb61 0105 	sbc.w	r1, r1, r5
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	018b      	lsls	r3, r1, #6
 8003462:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003466:	0182      	lsls	r2, r0, #6
 8003468:	1a12      	subs	r2, r2, r0
 800346a:	eb63 0301 	sbc.w	r3, r3, r1
 800346e:	f04f 0000 	mov.w	r0, #0
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	00d9      	lsls	r1, r3, #3
 8003478:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800347c:	00d0      	lsls	r0, r2, #3
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	1912      	adds	r2, r2, r4
 8003484:	eb45 0303 	adc.w	r3, r5, r3
 8003488:	f04f 0000 	mov.w	r0, #0
 800348c:	f04f 0100 	mov.w	r1, #0
 8003490:	0299      	lsls	r1, r3, #10
 8003492:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003496:	0290      	lsls	r0, r2, #10
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	f7fd fbb8 	bl	8000c1c <__aeabi_uldivmod>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4613      	mov	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	3301      	adds	r3, #1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	60bb      	str	r3, [r7, #8]
      break;
 80034ce:	e002      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034d2:	60bb      	str	r3, [r7, #8]
      break;
 80034d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d6:	68bb      	ldr	r3, [r7, #8]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	00f42400 	.word	0x00f42400
 80034ec:	007a1200 	.word	0x007a1200

080034f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000000 	.word	0x20000000

08003508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800350c:	f7ff fff0 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0a9b      	lsrs	r3, r3, #10
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCC_GetPCLK1Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	08007210 	.word	0x08007210

08003530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003534:	f7ff ffdc 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0b5b      	lsrs	r3, r3, #13
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4903      	ldr	r1, [pc, #12]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	08007210 	.word	0x08007210

08003558 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d001      	beq.n	8003570 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e03c      	b.n	80035ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1e      	ldr	r2, [pc, #120]	; (80035f8 <HAL_TIM_Base_Start+0xa0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d018      	beq.n	80035b4 <HAL_TIM_Base_Start+0x5c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358a:	d013      	beq.n	80035b4 <HAL_TIM_Base_Start+0x5c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <HAL_TIM_Base_Start+0xa4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00e      	beq.n	80035b4 <HAL_TIM_Base_Start+0x5c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a19      	ldr	r2, [pc, #100]	; (8003600 <HAL_TIM_Base_Start+0xa8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d009      	beq.n	80035b4 <HAL_TIM_Base_Start+0x5c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a17      	ldr	r2, [pc, #92]	; (8003604 <HAL_TIM_Base_Start+0xac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_TIM_Base_Start+0x5c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a16      	ldr	r2, [pc, #88]	; (8003608 <HAL_TIM_Base_Start+0xb0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d111      	bne.n	80035d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d010      	beq.n	80035e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d6:	e007      	b.n	80035e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40014000 	.word	0x40014000

0800360c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e041      	b.n	80036a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fe f9c8 	bl	80019c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f000 fa2a 	bl	8003aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d122      	bne.n	8003706 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d11b      	bne.n	8003706 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f06f 0202 	mvn.w	r2, #2
 80036d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f9bb 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 80036f2:	e005      	b.n	8003700 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f9ad 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f9be 	bl	8003a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b04      	cmp	r3, #4
 8003712:	d122      	bne.n	800375a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d11b      	bne.n	800375a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f06f 0204 	mvn.w	r2, #4
 800372a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f991 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 8003746:	e005      	b.n	8003754 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f983 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f994 	bl	8003a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b08      	cmp	r3, #8
 8003766:	d122      	bne.n	80037ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d11b      	bne.n	80037ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f06f 0208 	mvn.w	r2, #8
 800377e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2204      	movs	r2, #4
 8003784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f967 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 800379a:	e005      	b.n	80037a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f959 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f96a 	bl	8003a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d122      	bne.n	8003802 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d11b      	bne.n	8003802 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0210 	mvn.w	r2, #16
 80037d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2208      	movs	r2, #8
 80037d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f93d 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 80037ee:	e005      	b.n	80037fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f92f 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f940 	bl	8003a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10e      	bne.n	800382e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f06f 0201 	mvn.w	r2, #1
 8003826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f909 	bl	8003a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d10e      	bne.n	800385a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b80      	cmp	r3, #128	; 0x80
 8003848:	d107      	bne.n	800385a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fba9 	bl	8003fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d10e      	bne.n	8003886 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d107      	bne.n	8003886 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800387e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f905 	bl	8003a90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b20      	cmp	r3, #32
 8003892:	d10e      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d107      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0220 	mvn.w	r2, #32
 80038aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fb73 	bl	8003f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e0ae      	b.n	8003a38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	f200 809f 	bhi.w	8003a28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038ea:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	08003925 	.word	0x08003925
 80038f4:	08003a29 	.word	0x08003a29
 80038f8:	08003a29 	.word	0x08003a29
 80038fc:	08003a29 	.word	0x08003a29
 8003900:	08003965 	.word	0x08003965
 8003904:	08003a29 	.word	0x08003a29
 8003908:	08003a29 	.word	0x08003a29
 800390c:	08003a29 	.word	0x08003a29
 8003910:	080039a7 	.word	0x080039a7
 8003914:	08003a29 	.word	0x08003a29
 8003918:	08003a29 	.word	0x08003a29
 800391c:	08003a29 	.word	0x08003a29
 8003920:	080039e7 	.word	0x080039e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f93a 	bl	8003ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0208 	orr.w	r2, r2, #8
 800393e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699a      	ldr	r2, [r3, #24]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0204 	bic.w	r2, r2, #4
 800394e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6999      	ldr	r1, [r3, #24]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	619a      	str	r2, [r3, #24]
      break;
 8003962:	e064      	b.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f980 	bl	8003c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800397e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6999      	ldr	r1, [r3, #24]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	021a      	lsls	r2, r3, #8
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	619a      	str	r2, [r3, #24]
      break;
 80039a4:	e043      	b.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f9cb 	bl	8003d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0208 	orr.w	r2, r2, #8
 80039c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0204 	bic.w	r2, r2, #4
 80039d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69d9      	ldr	r1, [r3, #28]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	61da      	str	r2, [r3, #28]
      break;
 80039e4:	e023      	b.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fa15 	bl	8003e1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69da      	ldr	r2, [r3, #28]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69d9      	ldr	r1, [r3, #28]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	021a      	lsls	r2, r3, #8
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	61da      	str	r2, [r3, #28]
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a34      	ldr	r2, [pc, #208]	; (8003b88 <TIM_Base_SetConfig+0xe4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00f      	beq.n	8003adc <TIM_Base_SetConfig+0x38>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac2:	d00b      	beq.n	8003adc <TIM_Base_SetConfig+0x38>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a31      	ldr	r2, [pc, #196]	; (8003b8c <TIM_Base_SetConfig+0xe8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <TIM_Base_SetConfig+0x38>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <TIM_Base_SetConfig+0xec>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_Base_SetConfig+0x38>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a2f      	ldr	r2, [pc, #188]	; (8003b94 <TIM_Base_SetConfig+0xf0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d108      	bne.n	8003aee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <TIM_Base_SetConfig+0xe4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01b      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afc:	d017      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a22      	ldr	r2, [pc, #136]	; (8003b8c <TIM_Base_SetConfig+0xe8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <TIM_Base_SetConfig+0xec>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00f      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a20      	ldr	r2, [pc, #128]	; (8003b94 <TIM_Base_SetConfig+0xf0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <TIM_Base_SetConfig+0xf4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <TIM_Base_SetConfig+0xf8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1d      	ldr	r2, [pc, #116]	; (8003ba0 <TIM_Base_SetConfig+0xfc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <TIM_Base_SetConfig+0xe4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d103      	bne.n	8003b74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	615a      	str	r2, [r3, #20]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40014400 	.word	0x40014400
 8003ba0:	40014800 	.word	0x40014800

08003ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f023 0201 	bic.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f023 0302 	bic.w	r3, r3, #2
 8003bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <TIM_OC1_SetConfig+0xc8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10c      	bne.n	8003c1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0308 	bic.w	r3, r3, #8
 8003c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <TIM_OC1_SetConfig+0xc8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d111      	bne.n	8003c46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	621a      	str	r2, [r3, #32]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40010000 	.word	0x40010000

08003c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f023 0210 	bic.w	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 0320 	bic.w	r3, r3, #32
 8003cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a1e      	ldr	r2, [pc, #120]	; (8003d44 <TIM_OC2_SetConfig+0xd4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d10d      	bne.n	8003cec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <TIM_OC2_SetConfig+0xd4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d113      	bne.n	8003d1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	621a      	str	r2, [r3, #32]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40010000 	.word	0x40010000

08003d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a1d      	ldr	r2, [pc, #116]	; (8003e18 <TIM_OC3_SetConfig+0xd0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10d      	bne.n	8003dc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <TIM_OC3_SetConfig+0xd0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d113      	bne.n	8003df2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	621a      	str	r2, [r3, #32]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	40010000 	.word	0x40010000

08003e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	031b      	lsls	r3, r3, #12
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <TIM_OC4_SetConfig+0x9c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d109      	bne.n	8003e90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	019b      	lsls	r3, r3, #6
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40010000 	.word	0x40010000

08003ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e050      	b.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d018      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f20:	d013      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00e      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d009      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a13      	ldr	r2, [pc, #76]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d10c      	bne.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40014000 	.word	0x40014000

08003f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e03f      	b.n	8004052 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fd fd50 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2224      	movs	r2, #36	; 0x24
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f9cb 	bl	80043a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08a      	sub	sp, #40	; 0x28
 800405e:	af02      	add	r7, sp, #8
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	d17c      	bne.n	8004174 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_UART_Transmit+0x2c>
 8004080:	88fb      	ldrh	r3, [r7, #6]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e075      	b.n	8004176 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_UART_Transmit+0x3e>
 8004094:	2302      	movs	r3, #2
 8004096:	e06e      	b.n	8004176 <HAL_UART_Transmit+0x11c>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2221      	movs	r2, #33	; 0x21
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ae:	f7fd ff05 	bl	8001ebc <HAL_GetTick>
 80040b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c8:	d108      	bne.n	80040dc <HAL_UART_Transmit+0x82>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	e003      	b.n	80040e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040ec:	e02a      	b.n	8004144 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2180      	movs	r1, #128	; 0x80
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f8e2 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e036      	b.n	8004176 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	3302      	adds	r3, #2
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	e007      	b.n	8004136 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	781a      	ldrb	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	3301      	adds	r3, #1
 8004134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1cf      	bne.n	80040ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2200      	movs	r2, #0
 8004156:	2140      	movs	r1, #64	; 0x40
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f8b2 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e006      	b.n	8004176 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b08a      	sub	sp, #40	; 0x28
 8004182:	af02      	add	r7, sp, #8
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b20      	cmp	r3, #32
 800419c:	f040 808c 	bne.w	80042b8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_UART_Receive+0x2e>
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e084      	b.n	80042ba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_UART_Receive+0x40>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e07d      	b.n	80042ba <HAL_UART_Receive+0x13c>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2222      	movs	r2, #34	; 0x22
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041da:	f7fd fe6f 	bl	8001ebc <HAL_GetTick>
 80041de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	88fa      	ldrh	r2, [r7, #6]
 80041e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	88fa      	ldrh	r2, [r7, #6]
 80041ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f4:	d108      	bne.n	8004208 <HAL_UART_Receive+0x8a>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	e003      	b.n	8004210 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800420c:	2300      	movs	r3, #0
 800420e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004218:	e043      	b.n	80042a2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	2120      	movs	r1, #32
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f84c 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e042      	b.n	80042ba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10c      	bne.n	8004254 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	b29b      	uxth	r3, r3
 8004242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004246:	b29a      	uxth	r2, r3
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	3302      	adds	r3, #2
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	e01f      	b.n	8004294 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425c:	d007      	beq.n	800426e <HAL_UART_Receive+0xf0>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <HAL_UART_Receive+0xfe>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	e008      	b.n	800428e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004288:	b2da      	uxtb	r2, r3
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3301      	adds	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1b6      	bne.n	800421a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e000      	b.n	80042ba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b090      	sub	sp, #64	; 0x40
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	4613      	mov	r3, r2
 80042d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d2:	e050      	b.n	8004376 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d04c      	beq.n	8004376 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80042e2:	f7fd fdeb 	bl	8001ebc <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d241      	bcs.n	8004376 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004312:	637a      	str	r2, [r7, #52]	; 0x34
 8004314:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	613b      	str	r3, [r7, #16]
   return(result);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3314      	adds	r3, #20
 8004344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004346:	623a      	str	r2, [r7, #32]
 8004348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	69f9      	ldr	r1, [r7, #28]
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	61bb      	str	r3, [r7, #24]
   return(result);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e00f      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	429a      	cmp	r2, r3
 8004392:	d09f      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3740      	adds	r7, #64	; 0x40
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a4:	b09f      	sub	sp, #124	; 0x7c
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b6:	68d9      	ldr	r1, [r3, #12]
 80043b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	ea40 0301 	orr.w	r3, r0, r1
 80043c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80043da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043e4:	f021 010c 	bic.w	r1, r1, #12
 80043e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043ee:	430b      	orrs	r3, r1
 80043f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fe:	6999      	ldr	r1, [r3, #24]
 8004400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	ea40 0301 	orr.w	r3, r0, r1
 8004408:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800440a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4bc5      	ldr	r3, [pc, #788]	; (8004724 <UART_SetConfig+0x384>)
 8004410:	429a      	cmp	r2, r3
 8004412:	d004      	beq.n	800441e <UART_SetConfig+0x7e>
 8004414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4bc3      	ldr	r3, [pc, #780]	; (8004728 <UART_SetConfig+0x388>)
 800441a:	429a      	cmp	r2, r3
 800441c:	d103      	bne.n	8004426 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800441e:	f7ff f887 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 8004422:	6778      	str	r0, [r7, #116]	; 0x74
 8004424:	e002      	b.n	800442c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004426:	f7ff f86f 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 800442a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800442c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004434:	f040 80b6 	bne.w	80045a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443a:	461c      	mov	r4, r3
 800443c:	f04f 0500 	mov.w	r5, #0
 8004440:	4622      	mov	r2, r4
 8004442:	462b      	mov	r3, r5
 8004444:	1891      	adds	r1, r2, r2
 8004446:	6439      	str	r1, [r7, #64]	; 0x40
 8004448:	415b      	adcs	r3, r3
 800444a:	647b      	str	r3, [r7, #68]	; 0x44
 800444c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004450:	1912      	adds	r2, r2, r4
 8004452:	eb45 0303 	adc.w	r3, r5, r3
 8004456:	f04f 0000 	mov.w	r0, #0
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	00d9      	lsls	r1, r3, #3
 8004460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004464:	00d0      	lsls	r0, r2, #3
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	1911      	adds	r1, r2, r4
 800446c:	6639      	str	r1, [r7, #96]	; 0x60
 800446e:	416b      	adcs	r3, r5
 8004470:	667b      	str	r3, [r7, #100]	; 0x64
 8004472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	461a      	mov	r2, r3
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	1891      	adds	r1, r2, r2
 800447e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004480:	415b      	adcs	r3, r3
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004488:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800448c:	f7fc fbc6 	bl	8000c1c <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4ba5      	ldr	r3, [pc, #660]	; (800472c <UART_SetConfig+0x38c>)
 8004496:	fba3 2302 	umull	r2, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	011e      	lsls	r6, r3, #4
 800449e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a0:	461c      	mov	r4, r3
 80044a2:	f04f 0500 	mov.w	r5, #0
 80044a6:	4622      	mov	r2, r4
 80044a8:	462b      	mov	r3, r5
 80044aa:	1891      	adds	r1, r2, r2
 80044ac:	6339      	str	r1, [r7, #48]	; 0x30
 80044ae:	415b      	adcs	r3, r3
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
 80044b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044b6:	1912      	adds	r2, r2, r4
 80044b8:	eb45 0303 	adc.w	r3, r5, r3
 80044bc:	f04f 0000 	mov.w	r0, #0
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	00d9      	lsls	r1, r3, #3
 80044c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044ca:	00d0      	lsls	r0, r2, #3
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	1911      	adds	r1, r2, r4
 80044d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80044d4:	416b      	adcs	r3, r5
 80044d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	461a      	mov	r2, r3
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	1891      	adds	r1, r2, r2
 80044e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80044e6:	415b      	adcs	r3, r3
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80044f2:	f7fc fb93 	bl	8000c1c <__aeabi_uldivmod>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4b8c      	ldr	r3, [pc, #560]	; (800472c <UART_SetConfig+0x38c>)
 80044fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	2164      	movs	r1, #100	; 0x64
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	3332      	adds	r3, #50	; 0x32
 800450e:	4a87      	ldr	r2, [pc, #540]	; (800472c <UART_SetConfig+0x38c>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800451c:	441e      	add	r6, r3
 800451e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004520:	4618      	mov	r0, r3
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	1894      	adds	r4, r2, r2
 800452c:	623c      	str	r4, [r7, #32]
 800452e:	415b      	adcs	r3, r3
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004536:	1812      	adds	r2, r2, r0
 8004538:	eb41 0303 	adc.w	r3, r1, r3
 800453c:	f04f 0400 	mov.w	r4, #0
 8004540:	f04f 0500 	mov.w	r5, #0
 8004544:	00dd      	lsls	r5, r3, #3
 8004546:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800454a:	00d4      	lsls	r4, r2, #3
 800454c:	4622      	mov	r2, r4
 800454e:	462b      	mov	r3, r5
 8004550:	1814      	adds	r4, r2, r0
 8004552:	653c      	str	r4, [r7, #80]	; 0x50
 8004554:	414b      	adcs	r3, r1
 8004556:	657b      	str	r3, [r7, #84]	; 0x54
 8004558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	461a      	mov	r2, r3
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	1891      	adds	r1, r2, r2
 8004564:	61b9      	str	r1, [r7, #24]
 8004566:	415b      	adcs	r3, r3
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004572:	f7fc fb53 	bl	8000c1c <__aeabi_uldivmod>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4b6c      	ldr	r3, [pc, #432]	; (800472c <UART_SetConfig+0x38c>)
 800457c:	fba3 1302 	umull	r1, r3, r3, r2
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	2164      	movs	r1, #100	; 0x64
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	3332      	adds	r3, #50	; 0x32
 800458e:	4a67      	ldr	r2, [pc, #412]	; (800472c <UART_SetConfig+0x38c>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	f003 0207 	and.w	r2, r3, #7
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4432      	add	r2, r6
 80045a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045a2:	e0b9      	b.n	8004718 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a6:	461c      	mov	r4, r3
 80045a8:	f04f 0500 	mov.w	r5, #0
 80045ac:	4622      	mov	r2, r4
 80045ae:	462b      	mov	r3, r5
 80045b0:	1891      	adds	r1, r2, r2
 80045b2:	6139      	str	r1, [r7, #16]
 80045b4:	415b      	adcs	r3, r3
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045bc:	1912      	adds	r2, r2, r4
 80045be:	eb45 0303 	adc.w	r3, r5, r3
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f04f 0100 	mov.w	r1, #0
 80045ca:	00d9      	lsls	r1, r3, #3
 80045cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d0:	00d0      	lsls	r0, r2, #3
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	eb12 0804 	adds.w	r8, r2, r4
 80045da:	eb43 0905 	adc.w	r9, r3, r5
 80045de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	008b      	lsls	r3, r1, #2
 80045f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045f6:	0082      	lsls	r2, r0, #2
 80045f8:	4640      	mov	r0, r8
 80045fa:	4649      	mov	r1, r9
 80045fc:	f7fc fb0e 	bl	8000c1c <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4b49      	ldr	r3, [pc, #292]	; (800472c <UART_SetConfig+0x38c>)
 8004606:	fba3 2302 	umull	r2, r3, r3, r2
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	011e      	lsls	r6, r3, #4
 800460e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004610:	4618      	mov	r0, r3
 8004612:	f04f 0100 	mov.w	r1, #0
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	1894      	adds	r4, r2, r2
 800461c:	60bc      	str	r4, [r7, #8]
 800461e:	415b      	adcs	r3, r3
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004626:	1812      	adds	r2, r2, r0
 8004628:	eb41 0303 	adc.w	r3, r1, r3
 800462c:	f04f 0400 	mov.w	r4, #0
 8004630:	f04f 0500 	mov.w	r5, #0
 8004634:	00dd      	lsls	r5, r3, #3
 8004636:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800463a:	00d4      	lsls	r4, r2, #3
 800463c:	4622      	mov	r2, r4
 800463e:	462b      	mov	r3, r5
 8004640:	1814      	adds	r4, r2, r0
 8004642:	64bc      	str	r4, [r7, #72]	; 0x48
 8004644:	414b      	adcs	r3, r1
 8004646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4618      	mov	r0, r3
 800464e:	f04f 0100 	mov.w	r1, #0
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	008b      	lsls	r3, r1, #2
 800465c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004660:	0082      	lsls	r2, r0, #2
 8004662:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004666:	f7fc fad9 	bl	8000c1c <__aeabi_uldivmod>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4b2f      	ldr	r3, [pc, #188]	; (800472c <UART_SetConfig+0x38c>)
 8004670:	fba3 1302 	umull	r1, r3, r3, r2
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	2164      	movs	r1, #100	; 0x64
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	3332      	adds	r3, #50	; 0x32
 8004682:	4a2a      	ldr	r2, [pc, #168]	; (800472c <UART_SetConfig+0x38c>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468e:	441e      	add	r6, r3
 8004690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004692:	4618      	mov	r0, r3
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	1894      	adds	r4, r2, r2
 800469e:	603c      	str	r4, [r7, #0]
 80046a0:	415b      	adcs	r3, r3
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a8:	1812      	adds	r2, r2, r0
 80046aa:	eb41 0303 	adc.w	r3, r1, r3
 80046ae:	f04f 0400 	mov.w	r4, #0
 80046b2:	f04f 0500 	mov.w	r5, #0
 80046b6:	00dd      	lsls	r5, r3, #3
 80046b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046bc:	00d4      	lsls	r4, r2, #3
 80046be:	4622      	mov	r2, r4
 80046c0:	462b      	mov	r3, r5
 80046c2:	eb12 0a00 	adds.w	sl, r2, r0
 80046c6:	eb43 0b01 	adc.w	fp, r3, r1
 80046ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f04f 0100 	mov.w	r1, #0
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	008b      	lsls	r3, r1, #2
 80046de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046e2:	0082      	lsls	r2, r0, #2
 80046e4:	4650      	mov	r0, sl
 80046e6:	4659      	mov	r1, fp
 80046e8:	f7fc fa98 	bl	8000c1c <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4b0e      	ldr	r3, [pc, #56]	; (800472c <UART_SetConfig+0x38c>)
 80046f2:	fba3 1302 	umull	r1, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2164      	movs	r1, #100	; 0x64
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	3332      	adds	r3, #50	; 0x32
 8004704:	4a09      	ldr	r2, [pc, #36]	; (800472c <UART_SetConfig+0x38c>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	f003 020f 	and.w	r2, r3, #15
 8004710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4432      	add	r2, r6
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	377c      	adds	r7, #124	; 0x7c
 800471c:	46bd      	mov	sp, r7
 800471e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004722:	bf00      	nop
 8004724:	40011000 	.word	0x40011000
 8004728:	40011400 	.word	0x40011400
 800472c:	51eb851f 	.word	0x51eb851f

08004730 <gcvt>:
 8004730:	b530      	push	{r4, r5, lr}
 8004732:	2200      	movs	r2, #0
 8004734:	b085      	sub	sp, #20
 8004736:	460c      	mov	r4, r1
 8004738:	4605      	mov	r5, r0
 800473a:	2300      	movs	r3, #0
 800473c:	ec51 0b10 	vmov	r0, r1, d0
 8004740:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004744:	f7fc f9ca 	bl	8000adc <__aeabi_dcmplt>
 8004748:	ed9d 0b02 	vldr	d0, [sp, #8]
 800474c:	4622      	mov	r2, r4
 800474e:	b118      	cbz	r0, 8004758 <gcvt+0x28>
 8004750:	232d      	movs	r3, #45	; 0x2d
 8004752:	f802 3b01 	strb.w	r3, [r2], #1
 8004756:	3d01      	subs	r5, #1
 8004758:	2300      	movs	r3, #0
 800475a:	4806      	ldr	r0, [pc, #24]	; (8004774 <gcvt+0x44>)
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	4629      	mov	r1, r5
 8004760:	2367      	movs	r3, #103	; 0x67
 8004762:	6800      	ldr	r0, [r0, #0]
 8004764:	f000 f8d4 	bl	8004910 <_gcvt>
 8004768:	2800      	cmp	r0, #0
 800476a:	bf14      	ite	ne
 800476c:	4620      	movne	r0, r4
 800476e:	2000      	moveq	r0, #0
 8004770:	b005      	add	sp, #20
 8004772:	bd30      	pop	{r4, r5, pc}
 8004774:	2000000c 	.word	0x2000000c

08004778 <__errno>:
 8004778:	4b01      	ldr	r3, [pc, #4]	; (8004780 <__errno+0x8>)
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	2000000c 	.word	0x2000000c

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4d0d      	ldr	r5, [pc, #52]	; (80047bc <__libc_init_array+0x38>)
 8004788:	4c0d      	ldr	r4, [pc, #52]	; (80047c0 <__libc_init_array+0x3c>)
 800478a:	1b64      	subs	r4, r4, r5
 800478c:	10a4      	asrs	r4, r4, #2
 800478e:	2600      	movs	r6, #0
 8004790:	42a6      	cmp	r6, r4
 8004792:	d109      	bne.n	80047a8 <__libc_init_array+0x24>
 8004794:	4d0b      	ldr	r5, [pc, #44]	; (80047c4 <__libc_init_array+0x40>)
 8004796:	4c0c      	ldr	r4, [pc, #48]	; (80047c8 <__libc_init_array+0x44>)
 8004798:	f002 fd1c 	bl	80071d4 <_init>
 800479c:	1b64      	subs	r4, r4, r5
 800479e:	10a4      	asrs	r4, r4, #2
 80047a0:	2600      	movs	r6, #0
 80047a2:	42a6      	cmp	r6, r4
 80047a4:	d105      	bne.n	80047b2 <__libc_init_array+0x2e>
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ac:	4798      	blx	r3
 80047ae:	3601      	adds	r6, #1
 80047b0:	e7ee      	b.n	8004790 <__libc_init_array+0xc>
 80047b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b6:	4798      	blx	r3
 80047b8:	3601      	adds	r6, #1
 80047ba:	e7f2      	b.n	80047a2 <__libc_init_array+0x1e>
 80047bc:	080074ec 	.word	0x080074ec
 80047c0:	080074ec 	.word	0x080074ec
 80047c4:	080074ec 	.word	0x080074ec
 80047c8:	080074f0 	.word	0x080074f0

080047cc <memset>:
 80047cc:	4402      	add	r2, r0
 80047ce:	4603      	mov	r3, r0
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d100      	bne.n	80047d6 <memset+0xa>
 80047d4:	4770      	bx	lr
 80047d6:	f803 1b01 	strb.w	r1, [r3], #1
 80047da:	e7f9      	b.n	80047d0 <memset+0x4>

080047dc <siprintf>:
 80047dc:	b40e      	push	{r1, r2, r3}
 80047de:	b500      	push	{lr}
 80047e0:	b09c      	sub	sp, #112	; 0x70
 80047e2:	ab1d      	add	r3, sp, #116	; 0x74
 80047e4:	9002      	str	r0, [sp, #8]
 80047e6:	9006      	str	r0, [sp, #24]
 80047e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047ec:	4809      	ldr	r0, [pc, #36]	; (8004814 <siprintf+0x38>)
 80047ee:	9107      	str	r1, [sp, #28]
 80047f0:	9104      	str	r1, [sp, #16]
 80047f2:	4909      	ldr	r1, [pc, #36]	; (8004818 <siprintf+0x3c>)
 80047f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80047f8:	9105      	str	r1, [sp, #20]
 80047fa:	6800      	ldr	r0, [r0, #0]
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	a902      	add	r1, sp, #8
 8004800:	f000 fdce 	bl	80053a0 <_svfiprintf_r>
 8004804:	9b02      	ldr	r3, [sp, #8]
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	b01c      	add	sp, #112	; 0x70
 800480c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004810:	b003      	add	sp, #12
 8004812:	4770      	bx	lr
 8004814:	2000000c 	.word	0x2000000c
 8004818:	ffff0208 	.word	0xffff0208

0800481c <print_e>:
 800481c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481e:	b087      	sub	sp, #28
 8004820:	ec43 2b10 	vmov	d0, r2, r3
 8004824:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004826:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800482a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800482c:	ab04      	add	r3, sp, #16
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	ab03      	add	r3, sp, #12
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	1c62      	adds	r2, r4, #1
 8004836:	ab05      	add	r3, sp, #20
 8004838:	460f      	mov	r7, r1
 800483a:	2102      	movs	r1, #2
 800483c:	f001 f908 	bl	8005a50 <_dtoa_r>
 8004840:	9a05      	ldr	r2, [sp, #20]
 8004842:	f242 730f 	movw	r3, #9999	; 0x270f
 8004846:	429a      	cmp	r2, r3
 8004848:	d105      	bne.n	8004856 <print_e+0x3a>
 800484a:	4601      	mov	r1, r0
 800484c:	4638      	mov	r0, r7
 800484e:	f001 f84b 	bl	80058e8 <strcpy>
 8004852:	b007      	add	sp, #28
 8004854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004856:	463b      	mov	r3, r7
 8004858:	7801      	ldrb	r1, [r0, #0]
 800485a:	f803 1b01 	strb.w	r1, [r3], #1
 800485e:	2c00      	cmp	r4, #0
 8004860:	bfc8      	it	gt
 8004862:	2501      	movgt	r5, #1
 8004864:	212e      	movs	r1, #46	; 0x2e
 8004866:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800486a:	b10f      	cbz	r7, 8004870 <print_e+0x54>
 800486c:	2c00      	cmp	r4, #0
 800486e:	dc37      	bgt.n	80048e0 <print_e+0xc4>
 8004870:	2e67      	cmp	r6, #103	; 0x67
 8004872:	d046      	beq.n	8004902 <print_e+0xe6>
 8004874:	2e47      	cmp	r6, #71	; 0x47
 8004876:	d046      	beq.n	8004906 <print_e+0xea>
 8004878:	212e      	movs	r1, #46	; 0x2e
 800487a:	2030      	movs	r0, #48	; 0x30
 800487c:	2c00      	cmp	r4, #0
 800487e:	dc38      	bgt.n	80048f2 <print_e+0xd6>
 8004880:	1e51      	subs	r1, r2, #1
 8004882:	2900      	cmp	r1, #0
 8004884:	bfb8      	it	lt
 8004886:	f1c2 0201 	rsblt	r2, r2, #1
 800488a:	4618      	mov	r0, r3
 800488c:	9105      	str	r1, [sp, #20]
 800488e:	bfbc      	itt	lt
 8004890:	212d      	movlt	r1, #45	; 0x2d
 8004892:	9205      	strlt	r2, [sp, #20]
 8004894:	f800 6b02 	strb.w	r6, [r0], #2
 8004898:	bfb8      	it	lt
 800489a:	7059      	strblt	r1, [r3, #1]
 800489c:	9905      	ldr	r1, [sp, #20]
 800489e:	bfa4      	itt	ge
 80048a0:	222b      	movge	r2, #43	; 0x2b
 80048a2:	705a      	strbge	r2, [r3, #1]
 80048a4:	2963      	cmp	r1, #99	; 0x63
 80048a6:	dd0b      	ble.n	80048c0 <print_e+0xa4>
 80048a8:	2264      	movs	r2, #100	; 0x64
 80048aa:	fb91 f2f2 	sdiv	r2, r1, r2
 80048ae:	f102 0430 	add.w	r4, r2, #48	; 0x30
 80048b2:	1cd8      	adds	r0, r3, #3
 80048b4:	709c      	strb	r4, [r3, #2]
 80048b6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80048ba:	fb03 1202 	mla	r2, r3, r2, r1
 80048be:	9205      	str	r2, [sp, #20]
 80048c0:	9a05      	ldr	r2, [sp, #20]
 80048c2:	230a      	movs	r3, #10
 80048c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80048c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80048cc:	7001      	strb	r1, [r0, #0]
 80048ce:	f06f 0109 	mvn.w	r1, #9
 80048d2:	fb01 2303 	mla	r3, r1, r3, r2
 80048d6:	3330      	adds	r3, #48	; 0x30
 80048d8:	7043      	strb	r3, [r0, #1]
 80048da:	2300      	movs	r3, #0
 80048dc:	7083      	strb	r3, [r0, #2]
 80048de:	e7b8      	b.n	8004852 <print_e+0x36>
 80048e0:	b10d      	cbz	r5, 80048e6 <print_e+0xca>
 80048e2:	f803 1b01 	strb.w	r1, [r3], #1
 80048e6:	7805      	ldrb	r5, [r0, #0]
 80048e8:	f803 5b01 	strb.w	r5, [r3], #1
 80048ec:	3c01      	subs	r4, #1
 80048ee:	2500      	movs	r5, #0
 80048f0:	e7b9      	b.n	8004866 <print_e+0x4a>
 80048f2:	b10d      	cbz	r5, 80048f8 <print_e+0xdc>
 80048f4:	f803 1b01 	strb.w	r1, [r3], #1
 80048f8:	f803 0b01 	strb.w	r0, [r3], #1
 80048fc:	3c01      	subs	r4, #1
 80048fe:	2500      	movs	r5, #0
 8004900:	e7bc      	b.n	800487c <print_e+0x60>
 8004902:	2665      	movs	r6, #101	; 0x65
 8004904:	e7bc      	b.n	8004880 <print_e+0x64>
 8004906:	2645      	movs	r6, #69	; 0x45
 8004908:	e7ba      	b.n	8004880 <print_e+0x64>
 800490a:	0000      	movs	r0, r0
 800490c:	0000      	movs	r0, r0
	...

08004910 <_gcvt>:
 8004910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004914:	ec55 4b10 	vmov	r4, r5, d0
 8004918:	b088      	sub	sp, #32
 800491a:	4681      	mov	r9, r0
 800491c:	4688      	mov	r8, r1
 800491e:	4616      	mov	r6, r2
 8004920:	469a      	mov	sl, r3
 8004922:	ee10 0a10 	vmov	r0, s0
 8004926:	2200      	movs	r2, #0
 8004928:	2300      	movs	r3, #0
 800492a:	4629      	mov	r1, r5
 800492c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800492e:	f7fc f8d5 	bl	8000adc <__aeabi_dcmplt>
 8004932:	b110      	cbz	r0, 800493a <_gcvt+0x2a>
 8004934:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004938:	461d      	mov	r5, r3
 800493a:	2200      	movs	r2, #0
 800493c:	2300      	movs	r3, #0
 800493e:	4620      	mov	r0, r4
 8004940:	4629      	mov	r1, r5
 8004942:	f7fc f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004946:	b138      	cbz	r0, 8004958 <_gcvt+0x48>
 8004948:	2330      	movs	r3, #48	; 0x30
 800494a:	7033      	strb	r3, [r6, #0]
 800494c:	2300      	movs	r3, #0
 800494e:	7073      	strb	r3, [r6, #1]
 8004950:	4630      	mov	r0, r6
 8004952:	b008      	add	sp, #32
 8004954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004958:	a34b      	add	r3, pc, #300	; (adr r3, 8004a88 <_gcvt+0x178>)
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	4620      	mov	r0, r4
 8004960:	4629      	mov	r1, r5
 8004962:	f7fc f8c5 	bl	8000af0 <__aeabi_dcmple>
 8004966:	b158      	cbz	r0, 8004980 <_gcvt+0x70>
 8004968:	f108 31ff 	add.w	r1, r8, #4294967295
 800496c:	9100      	str	r1, [sp, #0]
 800496e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8004972:	4622      	mov	r2, r4
 8004974:	462b      	mov	r3, r5
 8004976:	4631      	mov	r1, r6
 8004978:	4648      	mov	r0, r9
 800497a:	f7ff ff4f 	bl	800481c <print_e>
 800497e:	e7e7      	b.n	8004950 <_gcvt+0x40>
 8004980:	4640      	mov	r0, r8
 8004982:	f000 fc03 	bl	800518c <_mprec_log10>
 8004986:	4622      	mov	r2, r4
 8004988:	ec51 0b10 	vmov	r0, r1, d0
 800498c:	462b      	mov	r3, r5
 800498e:	f7fc f8af 	bl	8000af0 <__aeabi_dcmple>
 8004992:	2800      	cmp	r0, #0
 8004994:	d1e8      	bne.n	8004968 <_gcvt+0x58>
 8004996:	ab07      	add	r3, sp, #28
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	ab06      	add	r3, sp, #24
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	4642      	mov	r2, r8
 80049a0:	ab05      	add	r3, sp, #20
 80049a2:	ec45 4b10 	vmov	d0, r4, r5
 80049a6:	2102      	movs	r1, #2
 80049a8:	4648      	mov	r0, r9
 80049aa:	f001 f851 	bl	8005a50 <_dtoa_r>
 80049ae:	9a05      	ldr	r2, [sp, #20]
 80049b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d00e      	beq.n	80049d6 <_gcvt+0xc6>
 80049b8:	4633      	mov	r3, r6
 80049ba:	44b0      	add	r8, r6
 80049bc:	4604      	mov	r4, r0
 80049be:	f810 5b01 	ldrb.w	r5, [r0], #1
 80049c2:	9905      	ldr	r1, [sp, #20]
 80049c4:	eba8 0203 	sub.w	r2, r8, r3
 80049c8:	b10d      	cbz	r5, 80049ce <_gcvt+0xbe>
 80049ca:	2900      	cmp	r1, #0
 80049cc:	dc08      	bgt.n	80049e0 <_gcvt+0xd0>
 80049ce:	2000      	movs	r0, #0
 80049d0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80049d4:	e00d      	b.n	80049f2 <_gcvt+0xe2>
 80049d6:	4601      	mov	r1, r0
 80049d8:	4630      	mov	r0, r6
 80049da:	f000 ff85 	bl	80058e8 <strcpy>
 80049de:	e7b7      	b.n	8004950 <_gcvt+0x40>
 80049e0:	3901      	subs	r1, #1
 80049e2:	f803 5b01 	strb.w	r5, [r3], #1
 80049e6:	9105      	str	r1, [sp, #20]
 80049e8:	e7e8      	b.n	80049bc <_gcvt+0xac>
 80049ea:	f803 cb01 	strb.w	ip, [r3], #1
 80049ee:	3a01      	subs	r2, #1
 80049f0:	2001      	movs	r0, #1
 80049f2:	2900      	cmp	r1, #0
 80049f4:	460d      	mov	r5, r1
 80049f6:	dc2a      	bgt.n	8004a4e <_gcvt+0x13e>
 80049f8:	b100      	cbz	r0, 80049fc <_gcvt+0xec>
 80049fa:	9105      	str	r1, [sp, #20]
 80049fc:	b90f      	cbnz	r7, 8004a02 <_gcvt+0xf2>
 80049fe:	7821      	ldrb	r1, [r4, #0]
 8004a00:	b311      	cbz	r1, 8004a48 <_gcvt+0x138>
 8004a02:	42b3      	cmp	r3, r6
 8004a04:	bf04      	itt	eq
 8004a06:	2130      	moveq	r1, #48	; 0x30
 8004a08:	f803 1b01 	strbeq.w	r1, [r3], #1
 8004a0c:	212e      	movs	r1, #46	; 0x2e
 8004a0e:	7019      	strb	r1, [r3, #0]
 8004a10:	9905      	ldr	r1, [sp, #20]
 8004a12:	4618      	mov	r0, r3
 8004a14:	2500      	movs	r5, #0
 8004a16:	eba1 0c03 	sub.w	ip, r1, r3
 8004a1a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8004a1e:	eb1c 0f00 	cmn.w	ip, r0
 8004a22:	d41c      	bmi.n	8004a5e <_gcvt+0x14e>
 8004a24:	2900      	cmp	r1, #0
 8004a26:	f1c1 0000 	rsb	r0, r1, #0
 8004a2a:	bfc8      	it	gt
 8004a2c:	2000      	movgt	r0, #0
 8004a2e:	f100 0c01 	add.w	ip, r0, #1
 8004a32:	4463      	add	r3, ip
 8004a34:	4401      	add	r1, r0
 8004a36:	b105      	cbz	r5, 8004a3a <_gcvt+0x12a>
 8004a38:	9105      	str	r1, [sp, #20]
 8004a3a:	1e61      	subs	r1, r4, #1
 8004a3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004a40:	b108      	cbz	r0, 8004a46 <_gcvt+0x136>
 8004a42:	2a00      	cmp	r2, #0
 8004a44:	dc0f      	bgt.n	8004a66 <_gcvt+0x156>
 8004a46:	b9df      	cbnz	r7, 8004a80 <_gcvt+0x170>
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	e780      	b.n	8004950 <_gcvt+0x40>
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	f101 31ff 	add.w	r1, r1, #4294967295
 8004a54:	dcc9      	bgt.n	80049ea <_gcvt+0xda>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d0d0      	beq.n	80049fc <_gcvt+0xec>
 8004a5a:	9505      	str	r5, [sp, #20]
 8004a5c:	e7ce      	b.n	80049fc <_gcvt+0xec>
 8004a5e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8004a62:	2501      	movs	r5, #1
 8004a64:	e7db      	b.n	8004a1e <_gcvt+0x10e>
 8004a66:	f803 0b01 	strb.w	r0, [r3], #1
 8004a6a:	3a01      	subs	r2, #1
 8004a6c:	e7e6      	b.n	8004a3c <_gcvt+0x12c>
 8004a6e:	f801 5b01 	strb.w	r5, [r1], #1
 8004a72:	1a60      	subs	r0, r4, r1
 8004a74:	2800      	cmp	r0, #0
 8004a76:	dcfa      	bgt.n	8004a6e <_gcvt+0x15e>
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	bfa8      	it	ge
 8004a7c:	189b      	addge	r3, r3, r2
 8004a7e:	e7e3      	b.n	8004a48 <_gcvt+0x138>
 8004a80:	4619      	mov	r1, r3
 8004a82:	189c      	adds	r4, r3, r2
 8004a84:	2530      	movs	r5, #48	; 0x30
 8004a86:	e7f4      	b.n	8004a72 <_gcvt+0x162>
 8004a88:	eb1c432d 	.word	0xeb1c432d
 8004a8c:	3f1a36e2 	.word	0x3f1a36e2

08004a90 <_Balloc>:
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a94:	4604      	mov	r4, r0
 8004a96:	460d      	mov	r5, r1
 8004a98:	b976      	cbnz	r6, 8004ab8 <_Balloc+0x28>
 8004a9a:	2010      	movs	r0, #16
 8004a9c:	f001 fdd6 	bl	800664c <malloc>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6260      	str	r0, [r4, #36]	; 0x24
 8004aa4:	b920      	cbnz	r0, 8004ab0 <_Balloc+0x20>
 8004aa6:	4b18      	ldr	r3, [pc, #96]	; (8004b08 <_Balloc+0x78>)
 8004aa8:	4818      	ldr	r0, [pc, #96]	; (8004b0c <_Balloc+0x7c>)
 8004aaa:	2166      	movs	r1, #102	; 0x66
 8004aac:	f000 ff24 	bl	80058f8 <__assert_func>
 8004ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ab4:	6006      	str	r6, [r0, #0]
 8004ab6:	60c6      	str	r6, [r0, #12]
 8004ab8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004aba:	68f3      	ldr	r3, [r6, #12]
 8004abc:	b183      	cbz	r3, 8004ae0 <_Balloc+0x50>
 8004abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ac6:	b9b8      	cbnz	r0, 8004af8 <_Balloc+0x68>
 8004ac8:	2101      	movs	r1, #1
 8004aca:	fa01 f605 	lsl.w	r6, r1, r5
 8004ace:	1d72      	adds	r2, r6, #5
 8004ad0:	0092      	lsls	r2, r2, #2
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f000 fb78 	bl	80051c8 <_calloc_r>
 8004ad8:	b160      	cbz	r0, 8004af4 <_Balloc+0x64>
 8004ada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004ade:	e00e      	b.n	8004afe <_Balloc+0x6e>
 8004ae0:	2221      	movs	r2, #33	; 0x21
 8004ae2:	2104      	movs	r1, #4
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f000 fb6f 	bl	80051c8 <_calloc_r>
 8004aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aec:	60f0      	str	r0, [r6, #12]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e4      	bne.n	8004abe <_Balloc+0x2e>
 8004af4:	2000      	movs	r0, #0
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	6802      	ldr	r2, [r0, #0]
 8004afa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004afe:	2300      	movs	r3, #0
 8004b00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b04:	e7f7      	b.n	8004af6 <_Balloc+0x66>
 8004b06:	bf00      	nop
 8004b08:	0800721c 	.word	0x0800721c
 8004b0c:	08007233 	.word	0x08007233

08004b10 <_Bfree>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004b14:	4605      	mov	r5, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	b976      	cbnz	r6, 8004b38 <_Bfree+0x28>
 8004b1a:	2010      	movs	r0, #16
 8004b1c:	f001 fd96 	bl	800664c <malloc>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6268      	str	r0, [r5, #36]	; 0x24
 8004b24:	b920      	cbnz	r0, 8004b30 <_Bfree+0x20>
 8004b26:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <_Bfree+0x3c>)
 8004b28:	4809      	ldr	r0, [pc, #36]	; (8004b50 <_Bfree+0x40>)
 8004b2a:	218a      	movs	r1, #138	; 0x8a
 8004b2c:	f000 fee4 	bl	80058f8 <__assert_func>
 8004b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b34:	6006      	str	r6, [r0, #0]
 8004b36:	60c6      	str	r6, [r0, #12]
 8004b38:	b13c      	cbz	r4, 8004b4a <_Bfree+0x3a>
 8004b3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b3c:	6862      	ldr	r2, [r4, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b44:	6021      	str	r1, [r4, #0]
 8004b46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}
 8004b4c:	0800721c 	.word	0x0800721c
 8004b50:	08007233 	.word	0x08007233

08004b54 <__multadd>:
 8004b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b58:	690e      	ldr	r6, [r1, #16]
 8004b5a:	4607      	mov	r7, r0
 8004b5c:	4698      	mov	r8, r3
 8004b5e:	460c      	mov	r4, r1
 8004b60:	f101 0014 	add.w	r0, r1, #20
 8004b64:	2300      	movs	r3, #0
 8004b66:	6805      	ldr	r5, [r0, #0]
 8004b68:	b2a9      	uxth	r1, r5
 8004b6a:	fb02 8101 	mla	r1, r2, r1, r8
 8004b6e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004b72:	0c2d      	lsrs	r5, r5, #16
 8004b74:	fb02 c505 	mla	r5, r2, r5, ip
 8004b78:	b289      	uxth	r1, r1
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004b80:	429e      	cmp	r6, r3
 8004b82:	f840 1b04 	str.w	r1, [r0], #4
 8004b86:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004b8a:	dcec      	bgt.n	8004b66 <__multadd+0x12>
 8004b8c:	f1b8 0f00 	cmp.w	r8, #0
 8004b90:	d022      	beq.n	8004bd8 <__multadd+0x84>
 8004b92:	68a3      	ldr	r3, [r4, #8]
 8004b94:	42b3      	cmp	r3, r6
 8004b96:	dc19      	bgt.n	8004bcc <__multadd+0x78>
 8004b98:	6861      	ldr	r1, [r4, #4]
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	3101      	adds	r1, #1
 8004b9e:	f7ff ff77 	bl	8004a90 <_Balloc>
 8004ba2:	4605      	mov	r5, r0
 8004ba4:	b928      	cbnz	r0, 8004bb2 <__multadd+0x5e>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <__multadd+0x8c>)
 8004baa:	480e      	ldr	r0, [pc, #56]	; (8004be4 <__multadd+0x90>)
 8004bac:	21b5      	movs	r1, #181	; 0xb5
 8004bae:	f000 fea3 	bl	80058f8 <__assert_func>
 8004bb2:	6922      	ldr	r2, [r4, #16]
 8004bb4:	3202      	adds	r2, #2
 8004bb6:	f104 010c 	add.w	r1, r4, #12
 8004bba:	0092      	lsls	r2, r2, #2
 8004bbc:	300c      	adds	r0, #12
 8004bbe:	f001 fd4d 	bl	800665c <memcpy>
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	f7ff ffa3 	bl	8004b10 <_Bfree>
 8004bca:	462c      	mov	r4, r5
 8004bcc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004bd0:	3601      	adds	r6, #1
 8004bd2:	f8c3 8014 	str.w	r8, [r3, #20]
 8004bd6:	6126      	str	r6, [r4, #16]
 8004bd8:	4620      	mov	r0, r4
 8004bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bde:	bf00      	nop
 8004be0:	08007293 	.word	0x08007293
 8004be4:	08007233 	.word	0x08007233

08004be8 <__hi0bits>:
 8004be8:	0c03      	lsrs	r3, r0, #16
 8004bea:	041b      	lsls	r3, r3, #16
 8004bec:	b9d3      	cbnz	r3, 8004c24 <__hi0bits+0x3c>
 8004bee:	0400      	lsls	r0, r0, #16
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004bf6:	bf04      	itt	eq
 8004bf8:	0200      	lsleq	r0, r0, #8
 8004bfa:	3308      	addeq	r3, #8
 8004bfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004c00:	bf04      	itt	eq
 8004c02:	0100      	lsleq	r0, r0, #4
 8004c04:	3304      	addeq	r3, #4
 8004c06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004c0a:	bf04      	itt	eq
 8004c0c:	0080      	lsleq	r0, r0, #2
 8004c0e:	3302      	addeq	r3, #2
 8004c10:	2800      	cmp	r0, #0
 8004c12:	db05      	blt.n	8004c20 <__hi0bits+0x38>
 8004c14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004c18:	f103 0301 	add.w	r3, r3, #1
 8004c1c:	bf08      	it	eq
 8004c1e:	2320      	moveq	r3, #32
 8004c20:	4618      	mov	r0, r3
 8004c22:	4770      	bx	lr
 8004c24:	2300      	movs	r3, #0
 8004c26:	e7e4      	b.n	8004bf2 <__hi0bits+0xa>

08004c28 <__lo0bits>:
 8004c28:	6803      	ldr	r3, [r0, #0]
 8004c2a:	f013 0207 	ands.w	r2, r3, #7
 8004c2e:	4601      	mov	r1, r0
 8004c30:	d00b      	beq.n	8004c4a <__lo0bits+0x22>
 8004c32:	07da      	lsls	r2, r3, #31
 8004c34:	d424      	bmi.n	8004c80 <__lo0bits+0x58>
 8004c36:	0798      	lsls	r0, r3, #30
 8004c38:	bf49      	itett	mi
 8004c3a:	085b      	lsrmi	r3, r3, #1
 8004c3c:	089b      	lsrpl	r3, r3, #2
 8004c3e:	2001      	movmi	r0, #1
 8004c40:	600b      	strmi	r3, [r1, #0]
 8004c42:	bf5c      	itt	pl
 8004c44:	600b      	strpl	r3, [r1, #0]
 8004c46:	2002      	movpl	r0, #2
 8004c48:	4770      	bx	lr
 8004c4a:	b298      	uxth	r0, r3
 8004c4c:	b9b0      	cbnz	r0, 8004c7c <__lo0bits+0x54>
 8004c4e:	0c1b      	lsrs	r3, r3, #16
 8004c50:	2010      	movs	r0, #16
 8004c52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004c56:	bf04      	itt	eq
 8004c58:	0a1b      	lsreq	r3, r3, #8
 8004c5a:	3008      	addeq	r0, #8
 8004c5c:	071a      	lsls	r2, r3, #28
 8004c5e:	bf04      	itt	eq
 8004c60:	091b      	lsreq	r3, r3, #4
 8004c62:	3004      	addeq	r0, #4
 8004c64:	079a      	lsls	r2, r3, #30
 8004c66:	bf04      	itt	eq
 8004c68:	089b      	lsreq	r3, r3, #2
 8004c6a:	3002      	addeq	r0, #2
 8004c6c:	07da      	lsls	r2, r3, #31
 8004c6e:	d403      	bmi.n	8004c78 <__lo0bits+0x50>
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	f100 0001 	add.w	r0, r0, #1
 8004c76:	d005      	beq.n	8004c84 <__lo0bits+0x5c>
 8004c78:	600b      	str	r3, [r1, #0]
 8004c7a:	4770      	bx	lr
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	e7e8      	b.n	8004c52 <__lo0bits+0x2a>
 8004c80:	2000      	movs	r0, #0
 8004c82:	4770      	bx	lr
 8004c84:	2020      	movs	r0, #32
 8004c86:	4770      	bx	lr

08004c88 <__i2b>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	f7ff feff 	bl	8004a90 <_Balloc>
 8004c92:	4602      	mov	r2, r0
 8004c94:	b928      	cbnz	r0, 8004ca2 <__i2b+0x1a>
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <__i2b+0x24>)
 8004c98:	4805      	ldr	r0, [pc, #20]	; (8004cb0 <__i2b+0x28>)
 8004c9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004c9e:	f000 fe2b 	bl	80058f8 <__assert_func>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	6144      	str	r4, [r0, #20]
 8004ca6:	6103      	str	r3, [r0, #16]
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	bf00      	nop
 8004cac:	08007293 	.word	0x08007293
 8004cb0:	08007233 	.word	0x08007233

08004cb4 <__multiply>:
 8004cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	4614      	mov	r4, r2
 8004cba:	690a      	ldr	r2, [r1, #16]
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	bfb8      	it	lt
 8004cc2:	460b      	movlt	r3, r1
 8004cc4:	460d      	mov	r5, r1
 8004cc6:	bfbc      	itt	lt
 8004cc8:	4625      	movlt	r5, r4
 8004cca:	461c      	movlt	r4, r3
 8004ccc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004cd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004cd4:	68ab      	ldr	r3, [r5, #8]
 8004cd6:	6869      	ldr	r1, [r5, #4]
 8004cd8:	eb0a 0709 	add.w	r7, sl, r9
 8004cdc:	42bb      	cmp	r3, r7
 8004cde:	b085      	sub	sp, #20
 8004ce0:	bfb8      	it	lt
 8004ce2:	3101      	addlt	r1, #1
 8004ce4:	f7ff fed4 	bl	8004a90 <_Balloc>
 8004ce8:	b930      	cbnz	r0, 8004cf8 <__multiply+0x44>
 8004cea:	4602      	mov	r2, r0
 8004cec:	4b42      	ldr	r3, [pc, #264]	; (8004df8 <__multiply+0x144>)
 8004cee:	4843      	ldr	r0, [pc, #268]	; (8004dfc <__multiply+0x148>)
 8004cf0:	f240 115d 	movw	r1, #349	; 0x15d
 8004cf4:	f000 fe00 	bl	80058f8 <__assert_func>
 8004cf8:	f100 0614 	add.w	r6, r0, #20
 8004cfc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004d00:	4633      	mov	r3, r6
 8004d02:	2200      	movs	r2, #0
 8004d04:	4543      	cmp	r3, r8
 8004d06:	d31e      	bcc.n	8004d46 <__multiply+0x92>
 8004d08:	f105 0c14 	add.w	ip, r5, #20
 8004d0c:	f104 0314 	add.w	r3, r4, #20
 8004d10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004d14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004d18:	9202      	str	r2, [sp, #8]
 8004d1a:	ebac 0205 	sub.w	r2, ip, r5
 8004d1e:	3a15      	subs	r2, #21
 8004d20:	f022 0203 	bic.w	r2, r2, #3
 8004d24:	3204      	adds	r2, #4
 8004d26:	f105 0115 	add.w	r1, r5, #21
 8004d2a:	458c      	cmp	ip, r1
 8004d2c:	bf38      	it	cc
 8004d2e:	2204      	movcc	r2, #4
 8004d30:	9201      	str	r2, [sp, #4]
 8004d32:	9a02      	ldr	r2, [sp, #8]
 8004d34:	9303      	str	r3, [sp, #12]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d808      	bhi.n	8004d4c <__multiply+0x98>
 8004d3a:	2f00      	cmp	r7, #0
 8004d3c:	dc55      	bgt.n	8004dea <__multiply+0x136>
 8004d3e:	6107      	str	r7, [r0, #16]
 8004d40:	b005      	add	sp, #20
 8004d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d46:	f843 2b04 	str.w	r2, [r3], #4
 8004d4a:	e7db      	b.n	8004d04 <__multiply+0x50>
 8004d4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8004d50:	f1ba 0f00 	cmp.w	sl, #0
 8004d54:	d020      	beq.n	8004d98 <__multiply+0xe4>
 8004d56:	f105 0e14 	add.w	lr, r5, #20
 8004d5a:	46b1      	mov	r9, r6
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004d62:	f8d9 b000 	ldr.w	fp, [r9]
 8004d66:	b2a1      	uxth	r1, r4
 8004d68:	fa1f fb8b 	uxth.w	fp, fp
 8004d6c:	fb0a b101 	mla	r1, sl, r1, fp
 8004d70:	4411      	add	r1, r2
 8004d72:	f8d9 2000 	ldr.w	r2, [r9]
 8004d76:	0c24      	lsrs	r4, r4, #16
 8004d78:	0c12      	lsrs	r2, r2, #16
 8004d7a:	fb0a 2404 	mla	r4, sl, r4, r2
 8004d7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004d82:	b289      	uxth	r1, r1
 8004d84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004d88:	45f4      	cmp	ip, lr
 8004d8a:	f849 1b04 	str.w	r1, [r9], #4
 8004d8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004d92:	d8e4      	bhi.n	8004d5e <__multiply+0xaa>
 8004d94:	9901      	ldr	r1, [sp, #4]
 8004d96:	5072      	str	r2, [r6, r1]
 8004d98:	9a03      	ldr	r2, [sp, #12]
 8004d9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	f1b9 0f00 	cmp.w	r9, #0
 8004da4:	d01f      	beq.n	8004de6 <__multiply+0x132>
 8004da6:	6834      	ldr	r4, [r6, #0]
 8004da8:	f105 0114 	add.w	r1, r5, #20
 8004dac:	46b6      	mov	lr, r6
 8004dae:	f04f 0a00 	mov.w	sl, #0
 8004db2:	880a      	ldrh	r2, [r1, #0]
 8004db4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004db8:	fb09 b202 	mla	r2, r9, r2, fp
 8004dbc:	4492      	add	sl, r2
 8004dbe:	b2a4      	uxth	r4, r4
 8004dc0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004dc4:	f84e 4b04 	str.w	r4, [lr], #4
 8004dc8:	f851 4b04 	ldr.w	r4, [r1], #4
 8004dcc:	f8be 2000 	ldrh.w	r2, [lr]
 8004dd0:	0c24      	lsrs	r4, r4, #16
 8004dd2:	fb09 2404 	mla	r4, r9, r4, r2
 8004dd6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004dda:	458c      	cmp	ip, r1
 8004ddc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004de0:	d8e7      	bhi.n	8004db2 <__multiply+0xfe>
 8004de2:	9a01      	ldr	r2, [sp, #4]
 8004de4:	50b4      	str	r4, [r6, r2]
 8004de6:	3604      	adds	r6, #4
 8004de8:	e7a3      	b.n	8004d32 <__multiply+0x7e>
 8004dea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1a5      	bne.n	8004d3e <__multiply+0x8a>
 8004df2:	3f01      	subs	r7, #1
 8004df4:	e7a1      	b.n	8004d3a <__multiply+0x86>
 8004df6:	bf00      	nop
 8004df8:	08007293 	.word	0x08007293
 8004dfc:	08007233 	.word	0x08007233

08004e00 <__pow5mult>:
 8004e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e04:	4615      	mov	r5, r2
 8004e06:	f012 0203 	ands.w	r2, r2, #3
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	460f      	mov	r7, r1
 8004e0e:	d007      	beq.n	8004e20 <__pow5mult+0x20>
 8004e10:	4c25      	ldr	r4, [pc, #148]	; (8004ea8 <__pow5mult+0xa8>)
 8004e12:	3a01      	subs	r2, #1
 8004e14:	2300      	movs	r3, #0
 8004e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e1a:	f7ff fe9b 	bl	8004b54 <__multadd>
 8004e1e:	4607      	mov	r7, r0
 8004e20:	10ad      	asrs	r5, r5, #2
 8004e22:	d03d      	beq.n	8004ea0 <__pow5mult+0xa0>
 8004e24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004e26:	b97c      	cbnz	r4, 8004e48 <__pow5mult+0x48>
 8004e28:	2010      	movs	r0, #16
 8004e2a:	f001 fc0f 	bl	800664c <malloc>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	6270      	str	r0, [r6, #36]	; 0x24
 8004e32:	b928      	cbnz	r0, 8004e40 <__pow5mult+0x40>
 8004e34:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <__pow5mult+0xac>)
 8004e36:	481e      	ldr	r0, [pc, #120]	; (8004eb0 <__pow5mult+0xb0>)
 8004e38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004e3c:	f000 fd5c 	bl	80058f8 <__assert_func>
 8004e40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e44:	6004      	str	r4, [r0, #0]
 8004e46:	60c4      	str	r4, [r0, #12]
 8004e48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004e4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e50:	b94c      	cbnz	r4, 8004e66 <__pow5mult+0x66>
 8004e52:	f240 2171 	movw	r1, #625	; 0x271
 8004e56:	4630      	mov	r0, r6
 8004e58:	f7ff ff16 	bl	8004c88 <__i2b>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e62:	4604      	mov	r4, r0
 8004e64:	6003      	str	r3, [r0, #0]
 8004e66:	f04f 0900 	mov.w	r9, #0
 8004e6a:	07eb      	lsls	r3, r5, #31
 8004e6c:	d50a      	bpl.n	8004e84 <__pow5mult+0x84>
 8004e6e:	4639      	mov	r1, r7
 8004e70:	4622      	mov	r2, r4
 8004e72:	4630      	mov	r0, r6
 8004e74:	f7ff ff1e 	bl	8004cb4 <__multiply>
 8004e78:	4639      	mov	r1, r7
 8004e7a:	4680      	mov	r8, r0
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f7ff fe47 	bl	8004b10 <_Bfree>
 8004e82:	4647      	mov	r7, r8
 8004e84:	106d      	asrs	r5, r5, #1
 8004e86:	d00b      	beq.n	8004ea0 <__pow5mult+0xa0>
 8004e88:	6820      	ldr	r0, [r4, #0]
 8004e8a:	b938      	cbnz	r0, 8004e9c <__pow5mult+0x9c>
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	4621      	mov	r1, r4
 8004e90:	4630      	mov	r0, r6
 8004e92:	f7ff ff0f 	bl	8004cb4 <__multiply>
 8004e96:	6020      	str	r0, [r4, #0]
 8004e98:	f8c0 9000 	str.w	r9, [r0]
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	e7e4      	b.n	8004e6a <__pow5mult+0x6a>
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ea6:	bf00      	nop
 8004ea8:	08007398 	.word	0x08007398
 8004eac:	0800721c 	.word	0x0800721c
 8004eb0:	08007233 	.word	0x08007233

08004eb4 <__lshift>:
 8004eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	460c      	mov	r4, r1
 8004eba:	6849      	ldr	r1, [r1, #4]
 8004ebc:	6923      	ldr	r3, [r4, #16]
 8004ebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ec2:	68a3      	ldr	r3, [r4, #8]
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	4691      	mov	r9, r2
 8004ec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ecc:	f108 0601 	add.w	r6, r8, #1
 8004ed0:	42b3      	cmp	r3, r6
 8004ed2:	db0b      	blt.n	8004eec <__lshift+0x38>
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	f7ff fddb 	bl	8004a90 <_Balloc>
 8004eda:	4605      	mov	r5, r0
 8004edc:	b948      	cbnz	r0, 8004ef2 <__lshift+0x3e>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	4b28      	ldr	r3, [pc, #160]	; (8004f84 <__lshift+0xd0>)
 8004ee2:	4829      	ldr	r0, [pc, #164]	; (8004f88 <__lshift+0xd4>)
 8004ee4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004ee8:	f000 fd06 	bl	80058f8 <__assert_func>
 8004eec:	3101      	adds	r1, #1
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	e7ee      	b.n	8004ed0 <__lshift+0x1c>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f100 0114 	add.w	r1, r0, #20
 8004ef8:	f100 0210 	add.w	r2, r0, #16
 8004efc:	4618      	mov	r0, r3
 8004efe:	4553      	cmp	r3, sl
 8004f00:	db33      	blt.n	8004f6a <__lshift+0xb6>
 8004f02:	6920      	ldr	r0, [r4, #16]
 8004f04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f08:	f104 0314 	add.w	r3, r4, #20
 8004f0c:	f019 091f 	ands.w	r9, r9, #31
 8004f10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f18:	d02b      	beq.n	8004f72 <__lshift+0xbe>
 8004f1a:	f1c9 0e20 	rsb	lr, r9, #32
 8004f1e:	468a      	mov	sl, r1
 8004f20:	2200      	movs	r2, #0
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	fa00 f009 	lsl.w	r0, r0, r9
 8004f28:	4302      	orrs	r2, r0
 8004f2a:	f84a 2b04 	str.w	r2, [sl], #4
 8004f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f32:	459c      	cmp	ip, r3
 8004f34:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f38:	d8f3      	bhi.n	8004f22 <__lshift+0x6e>
 8004f3a:	ebac 0304 	sub.w	r3, ip, r4
 8004f3e:	3b15      	subs	r3, #21
 8004f40:	f023 0303 	bic.w	r3, r3, #3
 8004f44:	3304      	adds	r3, #4
 8004f46:	f104 0015 	add.w	r0, r4, #21
 8004f4a:	4584      	cmp	ip, r0
 8004f4c:	bf38      	it	cc
 8004f4e:	2304      	movcc	r3, #4
 8004f50:	50ca      	str	r2, [r1, r3]
 8004f52:	b10a      	cbz	r2, 8004f58 <__lshift+0xa4>
 8004f54:	f108 0602 	add.w	r6, r8, #2
 8004f58:	3e01      	subs	r6, #1
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	612e      	str	r6, [r5, #16]
 8004f5e:	4621      	mov	r1, r4
 8004f60:	f7ff fdd6 	bl	8004b10 <_Bfree>
 8004f64:	4628      	mov	r0, r5
 8004f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f6e:	3301      	adds	r3, #1
 8004f70:	e7c5      	b.n	8004efe <__lshift+0x4a>
 8004f72:	3904      	subs	r1, #4
 8004f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f78:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f7c:	459c      	cmp	ip, r3
 8004f7e:	d8f9      	bhi.n	8004f74 <__lshift+0xc0>
 8004f80:	e7ea      	b.n	8004f58 <__lshift+0xa4>
 8004f82:	bf00      	nop
 8004f84:	08007293 	.word	0x08007293
 8004f88:	08007233 	.word	0x08007233

08004f8c <__mcmp>:
 8004f8c:	b530      	push	{r4, r5, lr}
 8004f8e:	6902      	ldr	r2, [r0, #16]
 8004f90:	690c      	ldr	r4, [r1, #16]
 8004f92:	1b12      	subs	r2, r2, r4
 8004f94:	d10e      	bne.n	8004fb4 <__mcmp+0x28>
 8004f96:	f100 0314 	add.w	r3, r0, #20
 8004f9a:	3114      	adds	r1, #20
 8004f9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004fa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004fa4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004fa8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004fac:	42a5      	cmp	r5, r4
 8004fae:	d003      	beq.n	8004fb8 <__mcmp+0x2c>
 8004fb0:	d305      	bcc.n	8004fbe <__mcmp+0x32>
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	bd30      	pop	{r4, r5, pc}
 8004fb8:	4283      	cmp	r3, r0
 8004fba:	d3f3      	bcc.n	8004fa4 <__mcmp+0x18>
 8004fbc:	e7fa      	b.n	8004fb4 <__mcmp+0x28>
 8004fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc2:	e7f7      	b.n	8004fb4 <__mcmp+0x28>

08004fc4 <__mdiff>:
 8004fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	460c      	mov	r4, r1
 8004fca:	4606      	mov	r6, r0
 8004fcc:	4611      	mov	r1, r2
 8004fce:	4620      	mov	r0, r4
 8004fd0:	4617      	mov	r7, r2
 8004fd2:	f7ff ffdb 	bl	8004f8c <__mcmp>
 8004fd6:	1e05      	subs	r5, r0, #0
 8004fd8:	d110      	bne.n	8004ffc <__mdiff+0x38>
 8004fda:	4629      	mov	r1, r5
 8004fdc:	4630      	mov	r0, r6
 8004fde:	f7ff fd57 	bl	8004a90 <_Balloc>
 8004fe2:	b930      	cbnz	r0, 8004ff2 <__mdiff+0x2e>
 8004fe4:	4b39      	ldr	r3, [pc, #228]	; (80050cc <__mdiff+0x108>)
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	f240 2132 	movw	r1, #562	; 0x232
 8004fec:	4838      	ldr	r0, [pc, #224]	; (80050d0 <__mdiff+0x10c>)
 8004fee:	f000 fc83 	bl	80058f8 <__assert_func>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004ff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffc:	bfa4      	itt	ge
 8004ffe:	463b      	movge	r3, r7
 8005000:	4627      	movge	r7, r4
 8005002:	4630      	mov	r0, r6
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	bfa6      	itte	ge
 8005008:	461c      	movge	r4, r3
 800500a:	2500      	movge	r5, #0
 800500c:	2501      	movlt	r5, #1
 800500e:	f7ff fd3f 	bl	8004a90 <_Balloc>
 8005012:	b920      	cbnz	r0, 800501e <__mdiff+0x5a>
 8005014:	4b2d      	ldr	r3, [pc, #180]	; (80050cc <__mdiff+0x108>)
 8005016:	4602      	mov	r2, r0
 8005018:	f44f 7110 	mov.w	r1, #576	; 0x240
 800501c:	e7e6      	b.n	8004fec <__mdiff+0x28>
 800501e:	693e      	ldr	r6, [r7, #16]
 8005020:	60c5      	str	r5, [r0, #12]
 8005022:	6925      	ldr	r5, [r4, #16]
 8005024:	f107 0114 	add.w	r1, r7, #20
 8005028:	f104 0914 	add.w	r9, r4, #20
 800502c:	f100 0e14 	add.w	lr, r0, #20
 8005030:	f107 0210 	add.w	r2, r7, #16
 8005034:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005038:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800503c:	46f2      	mov	sl, lr
 800503e:	2700      	movs	r7, #0
 8005040:	f859 3b04 	ldr.w	r3, [r9], #4
 8005044:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005048:	fa1f f883 	uxth.w	r8, r3
 800504c:	fa17 f78b 	uxtah	r7, r7, fp
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	eba7 0808 	sub.w	r8, r7, r8
 8005056:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800505a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800505e:	fa1f f888 	uxth.w	r8, r8
 8005062:	141f      	asrs	r7, r3, #16
 8005064:	454d      	cmp	r5, r9
 8005066:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800506a:	f84a 3b04 	str.w	r3, [sl], #4
 800506e:	d8e7      	bhi.n	8005040 <__mdiff+0x7c>
 8005070:	1b2b      	subs	r3, r5, r4
 8005072:	3b15      	subs	r3, #21
 8005074:	f023 0303 	bic.w	r3, r3, #3
 8005078:	3304      	adds	r3, #4
 800507a:	3415      	adds	r4, #21
 800507c:	42a5      	cmp	r5, r4
 800507e:	bf38      	it	cc
 8005080:	2304      	movcc	r3, #4
 8005082:	4419      	add	r1, r3
 8005084:	4473      	add	r3, lr
 8005086:	469e      	mov	lr, r3
 8005088:	460d      	mov	r5, r1
 800508a:	4565      	cmp	r5, ip
 800508c:	d30e      	bcc.n	80050ac <__mdiff+0xe8>
 800508e:	f10c 0203 	add.w	r2, ip, #3
 8005092:	1a52      	subs	r2, r2, r1
 8005094:	f022 0203 	bic.w	r2, r2, #3
 8005098:	3903      	subs	r1, #3
 800509a:	458c      	cmp	ip, r1
 800509c:	bf38      	it	cc
 800509e:	2200      	movcc	r2, #0
 80050a0:	441a      	add	r2, r3
 80050a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80050a6:	b17b      	cbz	r3, 80050c8 <__mdiff+0x104>
 80050a8:	6106      	str	r6, [r0, #16]
 80050aa:	e7a5      	b.n	8004ff8 <__mdiff+0x34>
 80050ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80050b0:	fa17 f488 	uxtah	r4, r7, r8
 80050b4:	1422      	asrs	r2, r4, #16
 80050b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80050ba:	b2a4      	uxth	r4, r4
 80050bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80050c0:	f84e 4b04 	str.w	r4, [lr], #4
 80050c4:	1417      	asrs	r7, r2, #16
 80050c6:	e7e0      	b.n	800508a <__mdiff+0xc6>
 80050c8:	3e01      	subs	r6, #1
 80050ca:	e7ea      	b.n	80050a2 <__mdiff+0xde>
 80050cc:	08007293 	.word	0x08007293
 80050d0:	08007233 	.word	0x08007233

080050d4 <__d2b>:
 80050d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050d8:	4689      	mov	r9, r1
 80050da:	2101      	movs	r1, #1
 80050dc:	ec57 6b10 	vmov	r6, r7, d0
 80050e0:	4690      	mov	r8, r2
 80050e2:	f7ff fcd5 	bl	8004a90 <_Balloc>
 80050e6:	4604      	mov	r4, r0
 80050e8:	b930      	cbnz	r0, 80050f8 <__d2b+0x24>
 80050ea:	4602      	mov	r2, r0
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <__d2b+0xb0>)
 80050ee:	4826      	ldr	r0, [pc, #152]	; (8005188 <__d2b+0xb4>)
 80050f0:	f240 310a 	movw	r1, #778	; 0x30a
 80050f4:	f000 fc00 	bl	80058f8 <__assert_func>
 80050f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80050fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005100:	bb35      	cbnz	r5, 8005150 <__d2b+0x7c>
 8005102:	2e00      	cmp	r6, #0
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	d028      	beq.n	800515a <__d2b+0x86>
 8005108:	4668      	mov	r0, sp
 800510a:	9600      	str	r6, [sp, #0]
 800510c:	f7ff fd8c 	bl	8004c28 <__lo0bits>
 8005110:	9900      	ldr	r1, [sp, #0]
 8005112:	b300      	cbz	r0, 8005156 <__d2b+0x82>
 8005114:	9a01      	ldr	r2, [sp, #4]
 8005116:	f1c0 0320 	rsb	r3, r0, #32
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	430b      	orrs	r3, r1
 8005120:	40c2      	lsrs	r2, r0
 8005122:	6163      	str	r3, [r4, #20]
 8005124:	9201      	str	r2, [sp, #4]
 8005126:	9b01      	ldr	r3, [sp, #4]
 8005128:	61a3      	str	r3, [r4, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	bf14      	ite	ne
 800512e:	2202      	movne	r2, #2
 8005130:	2201      	moveq	r2, #1
 8005132:	6122      	str	r2, [r4, #16]
 8005134:	b1d5      	cbz	r5, 800516c <__d2b+0x98>
 8005136:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800513a:	4405      	add	r5, r0
 800513c:	f8c9 5000 	str.w	r5, [r9]
 8005140:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005144:	f8c8 0000 	str.w	r0, [r8]
 8005148:	4620      	mov	r0, r4
 800514a:	b003      	add	sp, #12
 800514c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005154:	e7d5      	b.n	8005102 <__d2b+0x2e>
 8005156:	6161      	str	r1, [r4, #20]
 8005158:	e7e5      	b.n	8005126 <__d2b+0x52>
 800515a:	a801      	add	r0, sp, #4
 800515c:	f7ff fd64 	bl	8004c28 <__lo0bits>
 8005160:	9b01      	ldr	r3, [sp, #4]
 8005162:	6163      	str	r3, [r4, #20]
 8005164:	2201      	movs	r2, #1
 8005166:	6122      	str	r2, [r4, #16]
 8005168:	3020      	adds	r0, #32
 800516a:	e7e3      	b.n	8005134 <__d2b+0x60>
 800516c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005170:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005174:	f8c9 0000 	str.w	r0, [r9]
 8005178:	6918      	ldr	r0, [r3, #16]
 800517a:	f7ff fd35 	bl	8004be8 <__hi0bits>
 800517e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005182:	e7df      	b.n	8005144 <__d2b+0x70>
 8005184:	08007293 	.word	0x08007293
 8005188:	08007233 	.word	0x08007233

0800518c <_mprec_log10>:
 800518c:	2817      	cmp	r0, #23
 800518e:	b5d0      	push	{r4, r6, r7, lr}
 8005190:	4604      	mov	r4, r0
 8005192:	dc07      	bgt.n	80051a4 <_mprec_log10+0x18>
 8005194:	4809      	ldr	r0, [pc, #36]	; (80051bc <_mprec_log10+0x30>)
 8005196:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800519a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800519e:	ec41 0b10 	vmov	d0, r0, r1
 80051a2:	bdd0      	pop	{r4, r6, r7, pc}
 80051a4:	4906      	ldr	r1, [pc, #24]	; (80051c0 <_mprec_log10+0x34>)
 80051a6:	4f07      	ldr	r7, [pc, #28]	; (80051c4 <_mprec_log10+0x38>)
 80051a8:	2000      	movs	r0, #0
 80051aa:	2600      	movs	r6, #0
 80051ac:	4632      	mov	r2, r6
 80051ae:	463b      	mov	r3, r7
 80051b0:	f7fb fa22 	bl	80005f8 <__aeabi_dmul>
 80051b4:	3c01      	subs	r4, #1
 80051b6:	d1f9      	bne.n	80051ac <_mprec_log10+0x20>
 80051b8:	e7f1      	b.n	800519e <_mprec_log10+0x12>
 80051ba:	bf00      	nop
 80051bc:	080072d0 	.word	0x080072d0
 80051c0:	3ff00000 	.word	0x3ff00000
 80051c4:	40240000 	.word	0x40240000

080051c8 <_calloc_r>:
 80051c8:	b513      	push	{r0, r1, r4, lr}
 80051ca:	434a      	muls	r2, r1
 80051cc:	4611      	mov	r1, r2
 80051ce:	9201      	str	r2, [sp, #4]
 80051d0:	f000 f80a 	bl	80051e8 <_malloc_r>
 80051d4:	4604      	mov	r4, r0
 80051d6:	b118      	cbz	r0, 80051e0 <_calloc_r+0x18>
 80051d8:	9a01      	ldr	r2, [sp, #4]
 80051da:	2100      	movs	r1, #0
 80051dc:	f7ff faf6 	bl	80047cc <memset>
 80051e0:	4620      	mov	r0, r4
 80051e2:	b002      	add	sp, #8
 80051e4:	bd10      	pop	{r4, pc}
	...

080051e8 <_malloc_r>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	1ccd      	adds	r5, r1, #3
 80051ec:	f025 0503 	bic.w	r5, r5, #3
 80051f0:	3508      	adds	r5, #8
 80051f2:	2d0c      	cmp	r5, #12
 80051f4:	bf38      	it	cc
 80051f6:	250c      	movcc	r5, #12
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	4606      	mov	r6, r0
 80051fc:	db01      	blt.n	8005202 <_malloc_r+0x1a>
 80051fe:	42a9      	cmp	r1, r5
 8005200:	d903      	bls.n	800520a <_malloc_r+0x22>
 8005202:	230c      	movs	r3, #12
 8005204:	6033      	str	r3, [r6, #0]
 8005206:	2000      	movs	r0, #0
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520a:	f001 fa4f 	bl	80066ac <__malloc_lock>
 800520e:	4921      	ldr	r1, [pc, #132]	; (8005294 <_malloc_r+0xac>)
 8005210:	680a      	ldr	r2, [r1, #0]
 8005212:	4614      	mov	r4, r2
 8005214:	b99c      	cbnz	r4, 800523e <_malloc_r+0x56>
 8005216:	4f20      	ldr	r7, [pc, #128]	; (8005298 <_malloc_r+0xb0>)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	b923      	cbnz	r3, 8005226 <_malloc_r+0x3e>
 800521c:	4621      	mov	r1, r4
 800521e:	4630      	mov	r0, r6
 8005220:	f000 fb52 	bl	80058c8 <_sbrk_r>
 8005224:	6038      	str	r0, [r7, #0]
 8005226:	4629      	mov	r1, r5
 8005228:	4630      	mov	r0, r6
 800522a:	f000 fb4d 	bl	80058c8 <_sbrk_r>
 800522e:	1c43      	adds	r3, r0, #1
 8005230:	d123      	bne.n	800527a <_malloc_r+0x92>
 8005232:	230c      	movs	r3, #12
 8005234:	6033      	str	r3, [r6, #0]
 8005236:	4630      	mov	r0, r6
 8005238:	f001 fa3e 	bl	80066b8 <__malloc_unlock>
 800523c:	e7e3      	b.n	8005206 <_malloc_r+0x1e>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	1b5b      	subs	r3, r3, r5
 8005242:	d417      	bmi.n	8005274 <_malloc_r+0x8c>
 8005244:	2b0b      	cmp	r3, #11
 8005246:	d903      	bls.n	8005250 <_malloc_r+0x68>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	441c      	add	r4, r3
 800524c:	6025      	str	r5, [r4, #0]
 800524e:	e004      	b.n	800525a <_malloc_r+0x72>
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	42a2      	cmp	r2, r4
 8005254:	bf0c      	ite	eq
 8005256:	600b      	streq	r3, [r1, #0]
 8005258:	6053      	strne	r3, [r2, #4]
 800525a:	4630      	mov	r0, r6
 800525c:	f001 fa2c 	bl	80066b8 <__malloc_unlock>
 8005260:	f104 000b 	add.w	r0, r4, #11
 8005264:	1d23      	adds	r3, r4, #4
 8005266:	f020 0007 	bic.w	r0, r0, #7
 800526a:	1ac2      	subs	r2, r0, r3
 800526c:	d0cc      	beq.n	8005208 <_malloc_r+0x20>
 800526e:	1a1b      	subs	r3, r3, r0
 8005270:	50a3      	str	r3, [r4, r2]
 8005272:	e7c9      	b.n	8005208 <_malloc_r+0x20>
 8005274:	4622      	mov	r2, r4
 8005276:	6864      	ldr	r4, [r4, #4]
 8005278:	e7cc      	b.n	8005214 <_malloc_r+0x2c>
 800527a:	1cc4      	adds	r4, r0, #3
 800527c:	f024 0403 	bic.w	r4, r4, #3
 8005280:	42a0      	cmp	r0, r4
 8005282:	d0e3      	beq.n	800524c <_malloc_r+0x64>
 8005284:	1a21      	subs	r1, r4, r0
 8005286:	4630      	mov	r0, r6
 8005288:	f000 fb1e 	bl	80058c8 <_sbrk_r>
 800528c:	3001      	adds	r0, #1
 800528e:	d1dd      	bne.n	800524c <_malloc_r+0x64>
 8005290:	e7cf      	b.n	8005232 <_malloc_r+0x4a>
 8005292:	bf00      	nop
 8005294:	20000098 	.word	0x20000098
 8005298:	2000009c 	.word	0x2000009c

0800529c <_realloc_r>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	4607      	mov	r7, r0
 80052a0:	4614      	mov	r4, r2
 80052a2:	460e      	mov	r6, r1
 80052a4:	b921      	cbnz	r1, 80052b0 <_realloc_r+0x14>
 80052a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052aa:	4611      	mov	r1, r2
 80052ac:	f7ff bf9c 	b.w	80051e8 <_malloc_r>
 80052b0:	b922      	cbnz	r2, 80052bc <_realloc_r+0x20>
 80052b2:	f001 fa07 	bl	80066c4 <_free_r>
 80052b6:	4625      	mov	r5, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052bc:	f001 fa52 	bl	8006764 <_malloc_usable_size_r>
 80052c0:	42a0      	cmp	r0, r4
 80052c2:	d20f      	bcs.n	80052e4 <_realloc_r+0x48>
 80052c4:	4621      	mov	r1, r4
 80052c6:	4638      	mov	r0, r7
 80052c8:	f7ff ff8e 	bl	80051e8 <_malloc_r>
 80052cc:	4605      	mov	r5, r0
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d0f2      	beq.n	80052b8 <_realloc_r+0x1c>
 80052d2:	4631      	mov	r1, r6
 80052d4:	4622      	mov	r2, r4
 80052d6:	f001 f9c1 	bl	800665c <memcpy>
 80052da:	4631      	mov	r1, r6
 80052dc:	4638      	mov	r0, r7
 80052de:	f001 f9f1 	bl	80066c4 <_free_r>
 80052e2:	e7e9      	b.n	80052b8 <_realloc_r+0x1c>
 80052e4:	4635      	mov	r5, r6
 80052e6:	e7e7      	b.n	80052b8 <_realloc_r+0x1c>

080052e8 <__ssputs_r>:
 80052e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	688e      	ldr	r6, [r1, #8]
 80052ee:	429e      	cmp	r6, r3
 80052f0:	4682      	mov	sl, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	4690      	mov	r8, r2
 80052f6:	461f      	mov	r7, r3
 80052f8:	d838      	bhi.n	800536c <__ssputs_r+0x84>
 80052fa:	898a      	ldrh	r2, [r1, #12]
 80052fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005300:	d032      	beq.n	8005368 <__ssputs_r+0x80>
 8005302:	6825      	ldr	r5, [r4, #0]
 8005304:	6909      	ldr	r1, [r1, #16]
 8005306:	eba5 0901 	sub.w	r9, r5, r1
 800530a:	6965      	ldr	r5, [r4, #20]
 800530c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005314:	3301      	adds	r3, #1
 8005316:	444b      	add	r3, r9
 8005318:	106d      	asrs	r5, r5, #1
 800531a:	429d      	cmp	r5, r3
 800531c:	bf38      	it	cc
 800531e:	461d      	movcc	r5, r3
 8005320:	0553      	lsls	r3, r2, #21
 8005322:	d531      	bpl.n	8005388 <__ssputs_r+0xa0>
 8005324:	4629      	mov	r1, r5
 8005326:	f7ff ff5f 	bl	80051e8 <_malloc_r>
 800532a:	4606      	mov	r6, r0
 800532c:	b950      	cbnz	r0, 8005344 <__ssputs_r+0x5c>
 800532e:	230c      	movs	r3, #12
 8005330:	f8ca 3000 	str.w	r3, [sl]
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005344:	6921      	ldr	r1, [r4, #16]
 8005346:	464a      	mov	r2, r9
 8005348:	f001 f988 	bl	800665c <memcpy>
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005356:	81a3      	strh	r3, [r4, #12]
 8005358:	6126      	str	r6, [r4, #16]
 800535a:	6165      	str	r5, [r4, #20]
 800535c:	444e      	add	r6, r9
 800535e:	eba5 0509 	sub.w	r5, r5, r9
 8005362:	6026      	str	r6, [r4, #0]
 8005364:	60a5      	str	r5, [r4, #8]
 8005366:	463e      	mov	r6, r7
 8005368:	42be      	cmp	r6, r7
 800536a:	d900      	bls.n	800536e <__ssputs_r+0x86>
 800536c:	463e      	mov	r6, r7
 800536e:	4632      	mov	r2, r6
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	4641      	mov	r1, r8
 8005374:	f001 f980 	bl	8006678 <memmove>
 8005378:	68a3      	ldr	r3, [r4, #8]
 800537a:	6822      	ldr	r2, [r4, #0]
 800537c:	1b9b      	subs	r3, r3, r6
 800537e:	4432      	add	r2, r6
 8005380:	60a3      	str	r3, [r4, #8]
 8005382:	6022      	str	r2, [r4, #0]
 8005384:	2000      	movs	r0, #0
 8005386:	e7db      	b.n	8005340 <__ssputs_r+0x58>
 8005388:	462a      	mov	r2, r5
 800538a:	f7ff ff87 	bl	800529c <_realloc_r>
 800538e:	4606      	mov	r6, r0
 8005390:	2800      	cmp	r0, #0
 8005392:	d1e1      	bne.n	8005358 <__ssputs_r+0x70>
 8005394:	6921      	ldr	r1, [r4, #16]
 8005396:	4650      	mov	r0, sl
 8005398:	f001 f994 	bl	80066c4 <_free_r>
 800539c:	e7c7      	b.n	800532e <__ssputs_r+0x46>
	...

080053a0 <_svfiprintf_r>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	4698      	mov	r8, r3
 80053a6:	898b      	ldrh	r3, [r1, #12]
 80053a8:	061b      	lsls	r3, r3, #24
 80053aa:	b09d      	sub	sp, #116	; 0x74
 80053ac:	4607      	mov	r7, r0
 80053ae:	460d      	mov	r5, r1
 80053b0:	4614      	mov	r4, r2
 80053b2:	d50e      	bpl.n	80053d2 <_svfiprintf_r+0x32>
 80053b4:	690b      	ldr	r3, [r1, #16]
 80053b6:	b963      	cbnz	r3, 80053d2 <_svfiprintf_r+0x32>
 80053b8:	2140      	movs	r1, #64	; 0x40
 80053ba:	f7ff ff15 	bl	80051e8 <_malloc_r>
 80053be:	6028      	str	r0, [r5, #0]
 80053c0:	6128      	str	r0, [r5, #16]
 80053c2:	b920      	cbnz	r0, 80053ce <_svfiprintf_r+0x2e>
 80053c4:	230c      	movs	r3, #12
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	e0d1      	b.n	8005572 <_svfiprintf_r+0x1d2>
 80053ce:	2340      	movs	r3, #64	; 0x40
 80053d0:	616b      	str	r3, [r5, #20]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9309      	str	r3, [sp, #36]	; 0x24
 80053d6:	2320      	movs	r3, #32
 80053d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80053e0:	2330      	movs	r3, #48	; 0x30
 80053e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800558c <_svfiprintf_r+0x1ec>
 80053e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053ea:	f04f 0901 	mov.w	r9, #1
 80053ee:	4623      	mov	r3, r4
 80053f0:	469a      	mov	sl, r3
 80053f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053f6:	b10a      	cbz	r2, 80053fc <_svfiprintf_r+0x5c>
 80053f8:	2a25      	cmp	r2, #37	; 0x25
 80053fa:	d1f9      	bne.n	80053f0 <_svfiprintf_r+0x50>
 80053fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005400:	d00b      	beq.n	800541a <_svfiprintf_r+0x7a>
 8005402:	465b      	mov	r3, fp
 8005404:	4622      	mov	r2, r4
 8005406:	4629      	mov	r1, r5
 8005408:	4638      	mov	r0, r7
 800540a:	f7ff ff6d 	bl	80052e8 <__ssputs_r>
 800540e:	3001      	adds	r0, #1
 8005410:	f000 80aa 	beq.w	8005568 <_svfiprintf_r+0x1c8>
 8005414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005416:	445a      	add	r2, fp
 8005418:	9209      	str	r2, [sp, #36]	; 0x24
 800541a:	f89a 3000 	ldrb.w	r3, [sl]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80a2 	beq.w	8005568 <_svfiprintf_r+0x1c8>
 8005424:	2300      	movs	r3, #0
 8005426:	f04f 32ff 	mov.w	r2, #4294967295
 800542a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800542e:	f10a 0a01 	add.w	sl, sl, #1
 8005432:	9304      	str	r3, [sp, #16]
 8005434:	9307      	str	r3, [sp, #28]
 8005436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800543a:	931a      	str	r3, [sp, #104]	; 0x68
 800543c:	4654      	mov	r4, sl
 800543e:	2205      	movs	r2, #5
 8005440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005444:	4851      	ldr	r0, [pc, #324]	; (800558c <_svfiprintf_r+0x1ec>)
 8005446:	f7fa fecb 	bl	80001e0 <memchr>
 800544a:	9a04      	ldr	r2, [sp, #16]
 800544c:	b9d8      	cbnz	r0, 8005486 <_svfiprintf_r+0xe6>
 800544e:	06d0      	lsls	r0, r2, #27
 8005450:	bf44      	itt	mi
 8005452:	2320      	movmi	r3, #32
 8005454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005458:	0711      	lsls	r1, r2, #28
 800545a:	bf44      	itt	mi
 800545c:	232b      	movmi	r3, #43	; 0x2b
 800545e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005462:	f89a 3000 	ldrb.w	r3, [sl]
 8005466:	2b2a      	cmp	r3, #42	; 0x2a
 8005468:	d015      	beq.n	8005496 <_svfiprintf_r+0xf6>
 800546a:	9a07      	ldr	r2, [sp, #28]
 800546c:	4654      	mov	r4, sl
 800546e:	2000      	movs	r0, #0
 8005470:	f04f 0c0a 	mov.w	ip, #10
 8005474:	4621      	mov	r1, r4
 8005476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800547a:	3b30      	subs	r3, #48	; 0x30
 800547c:	2b09      	cmp	r3, #9
 800547e:	d94e      	bls.n	800551e <_svfiprintf_r+0x17e>
 8005480:	b1b0      	cbz	r0, 80054b0 <_svfiprintf_r+0x110>
 8005482:	9207      	str	r2, [sp, #28]
 8005484:	e014      	b.n	80054b0 <_svfiprintf_r+0x110>
 8005486:	eba0 0308 	sub.w	r3, r0, r8
 800548a:	fa09 f303 	lsl.w	r3, r9, r3
 800548e:	4313      	orrs	r3, r2
 8005490:	9304      	str	r3, [sp, #16]
 8005492:	46a2      	mov	sl, r4
 8005494:	e7d2      	b.n	800543c <_svfiprintf_r+0x9c>
 8005496:	9b03      	ldr	r3, [sp, #12]
 8005498:	1d19      	adds	r1, r3, #4
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	9103      	str	r1, [sp, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bfbb      	ittet	lt
 80054a2:	425b      	neglt	r3, r3
 80054a4:	f042 0202 	orrlt.w	r2, r2, #2
 80054a8:	9307      	strge	r3, [sp, #28]
 80054aa:	9307      	strlt	r3, [sp, #28]
 80054ac:	bfb8      	it	lt
 80054ae:	9204      	strlt	r2, [sp, #16]
 80054b0:	7823      	ldrb	r3, [r4, #0]
 80054b2:	2b2e      	cmp	r3, #46	; 0x2e
 80054b4:	d10c      	bne.n	80054d0 <_svfiprintf_r+0x130>
 80054b6:	7863      	ldrb	r3, [r4, #1]
 80054b8:	2b2a      	cmp	r3, #42	; 0x2a
 80054ba:	d135      	bne.n	8005528 <_svfiprintf_r+0x188>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	1d1a      	adds	r2, r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	9203      	str	r2, [sp, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bfb8      	it	lt
 80054c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80054cc:	3402      	adds	r4, #2
 80054ce:	9305      	str	r3, [sp, #20]
 80054d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800559c <_svfiprintf_r+0x1fc>
 80054d4:	7821      	ldrb	r1, [r4, #0]
 80054d6:	2203      	movs	r2, #3
 80054d8:	4650      	mov	r0, sl
 80054da:	f7fa fe81 	bl	80001e0 <memchr>
 80054de:	b140      	cbz	r0, 80054f2 <_svfiprintf_r+0x152>
 80054e0:	2340      	movs	r3, #64	; 0x40
 80054e2:	eba0 000a 	sub.w	r0, r0, sl
 80054e6:	fa03 f000 	lsl.w	r0, r3, r0
 80054ea:	9b04      	ldr	r3, [sp, #16]
 80054ec:	4303      	orrs	r3, r0
 80054ee:	3401      	adds	r4, #1
 80054f0:	9304      	str	r3, [sp, #16]
 80054f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f6:	4826      	ldr	r0, [pc, #152]	; (8005590 <_svfiprintf_r+0x1f0>)
 80054f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054fc:	2206      	movs	r2, #6
 80054fe:	f7fa fe6f 	bl	80001e0 <memchr>
 8005502:	2800      	cmp	r0, #0
 8005504:	d038      	beq.n	8005578 <_svfiprintf_r+0x1d8>
 8005506:	4b23      	ldr	r3, [pc, #140]	; (8005594 <_svfiprintf_r+0x1f4>)
 8005508:	bb1b      	cbnz	r3, 8005552 <_svfiprintf_r+0x1b2>
 800550a:	9b03      	ldr	r3, [sp, #12]
 800550c:	3307      	adds	r3, #7
 800550e:	f023 0307 	bic.w	r3, r3, #7
 8005512:	3308      	adds	r3, #8
 8005514:	9303      	str	r3, [sp, #12]
 8005516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005518:	4433      	add	r3, r6
 800551a:	9309      	str	r3, [sp, #36]	; 0x24
 800551c:	e767      	b.n	80053ee <_svfiprintf_r+0x4e>
 800551e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005522:	460c      	mov	r4, r1
 8005524:	2001      	movs	r0, #1
 8005526:	e7a5      	b.n	8005474 <_svfiprintf_r+0xd4>
 8005528:	2300      	movs	r3, #0
 800552a:	3401      	adds	r4, #1
 800552c:	9305      	str	r3, [sp, #20]
 800552e:	4619      	mov	r1, r3
 8005530:	f04f 0c0a 	mov.w	ip, #10
 8005534:	4620      	mov	r0, r4
 8005536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800553a:	3a30      	subs	r2, #48	; 0x30
 800553c:	2a09      	cmp	r2, #9
 800553e:	d903      	bls.n	8005548 <_svfiprintf_r+0x1a8>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0c5      	beq.n	80054d0 <_svfiprintf_r+0x130>
 8005544:	9105      	str	r1, [sp, #20]
 8005546:	e7c3      	b.n	80054d0 <_svfiprintf_r+0x130>
 8005548:	fb0c 2101 	mla	r1, ip, r1, r2
 800554c:	4604      	mov	r4, r0
 800554e:	2301      	movs	r3, #1
 8005550:	e7f0      	b.n	8005534 <_svfiprintf_r+0x194>
 8005552:	ab03      	add	r3, sp, #12
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	462a      	mov	r2, r5
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <_svfiprintf_r+0x1f8>)
 800555a:	a904      	add	r1, sp, #16
 800555c:	4638      	mov	r0, r7
 800555e:	f3af 8000 	nop.w
 8005562:	1c42      	adds	r2, r0, #1
 8005564:	4606      	mov	r6, r0
 8005566:	d1d6      	bne.n	8005516 <_svfiprintf_r+0x176>
 8005568:	89ab      	ldrh	r3, [r5, #12]
 800556a:	065b      	lsls	r3, r3, #25
 800556c:	f53f af2c 	bmi.w	80053c8 <_svfiprintf_r+0x28>
 8005570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005572:	b01d      	add	sp, #116	; 0x74
 8005574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005578:	ab03      	add	r3, sp, #12
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	462a      	mov	r2, r5
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <_svfiprintf_r+0x1f8>)
 8005580:	a904      	add	r1, sp, #16
 8005582:	4638      	mov	r0, r7
 8005584:	f000 f87a 	bl	800567c <_printf_i>
 8005588:	e7eb      	b.n	8005562 <_svfiprintf_r+0x1c2>
 800558a:	bf00      	nop
 800558c:	080073a4 	.word	0x080073a4
 8005590:	080073ae 	.word	0x080073ae
 8005594:	00000000 	.word	0x00000000
 8005598:	080052e9 	.word	0x080052e9
 800559c:	080073aa 	.word	0x080073aa

080055a0 <_printf_common>:
 80055a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a4:	4616      	mov	r6, r2
 80055a6:	4699      	mov	r9, r3
 80055a8:	688a      	ldr	r2, [r1, #8]
 80055aa:	690b      	ldr	r3, [r1, #16]
 80055ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bfb8      	it	lt
 80055b4:	4613      	movlt	r3, r2
 80055b6:	6033      	str	r3, [r6, #0]
 80055b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055bc:	4607      	mov	r7, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	b10a      	cbz	r2, 80055c6 <_printf_common+0x26>
 80055c2:	3301      	adds	r3, #1
 80055c4:	6033      	str	r3, [r6, #0]
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	0699      	lsls	r1, r3, #26
 80055ca:	bf42      	ittt	mi
 80055cc:	6833      	ldrmi	r3, [r6, #0]
 80055ce:	3302      	addmi	r3, #2
 80055d0:	6033      	strmi	r3, [r6, #0]
 80055d2:	6825      	ldr	r5, [r4, #0]
 80055d4:	f015 0506 	ands.w	r5, r5, #6
 80055d8:	d106      	bne.n	80055e8 <_printf_common+0x48>
 80055da:	f104 0a19 	add.w	sl, r4, #25
 80055de:	68e3      	ldr	r3, [r4, #12]
 80055e0:	6832      	ldr	r2, [r6, #0]
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	42ab      	cmp	r3, r5
 80055e6:	dc26      	bgt.n	8005636 <_printf_common+0x96>
 80055e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055ec:	1e13      	subs	r3, r2, #0
 80055ee:	6822      	ldr	r2, [r4, #0]
 80055f0:	bf18      	it	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	0692      	lsls	r2, r2, #26
 80055f6:	d42b      	bmi.n	8005650 <_printf_common+0xb0>
 80055f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055fc:	4649      	mov	r1, r9
 80055fe:	4638      	mov	r0, r7
 8005600:	47c0      	blx	r8
 8005602:	3001      	adds	r0, #1
 8005604:	d01e      	beq.n	8005644 <_printf_common+0xa4>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	68e5      	ldr	r5, [r4, #12]
 800560a:	6832      	ldr	r2, [r6, #0]
 800560c:	f003 0306 	and.w	r3, r3, #6
 8005610:	2b04      	cmp	r3, #4
 8005612:	bf08      	it	eq
 8005614:	1aad      	subeq	r5, r5, r2
 8005616:	68a3      	ldr	r3, [r4, #8]
 8005618:	6922      	ldr	r2, [r4, #16]
 800561a:	bf0c      	ite	eq
 800561c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005620:	2500      	movne	r5, #0
 8005622:	4293      	cmp	r3, r2
 8005624:	bfc4      	itt	gt
 8005626:	1a9b      	subgt	r3, r3, r2
 8005628:	18ed      	addgt	r5, r5, r3
 800562a:	2600      	movs	r6, #0
 800562c:	341a      	adds	r4, #26
 800562e:	42b5      	cmp	r5, r6
 8005630:	d11a      	bne.n	8005668 <_printf_common+0xc8>
 8005632:	2000      	movs	r0, #0
 8005634:	e008      	b.n	8005648 <_printf_common+0xa8>
 8005636:	2301      	movs	r3, #1
 8005638:	4652      	mov	r2, sl
 800563a:	4649      	mov	r1, r9
 800563c:	4638      	mov	r0, r7
 800563e:	47c0      	blx	r8
 8005640:	3001      	adds	r0, #1
 8005642:	d103      	bne.n	800564c <_printf_common+0xac>
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564c:	3501      	adds	r5, #1
 800564e:	e7c6      	b.n	80055de <_printf_common+0x3e>
 8005650:	18e1      	adds	r1, r4, r3
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	2030      	movs	r0, #48	; 0x30
 8005656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800565a:	4422      	add	r2, r4
 800565c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005664:	3302      	adds	r3, #2
 8005666:	e7c7      	b.n	80055f8 <_printf_common+0x58>
 8005668:	2301      	movs	r3, #1
 800566a:	4622      	mov	r2, r4
 800566c:	4649      	mov	r1, r9
 800566e:	4638      	mov	r0, r7
 8005670:	47c0      	blx	r8
 8005672:	3001      	adds	r0, #1
 8005674:	d0e6      	beq.n	8005644 <_printf_common+0xa4>
 8005676:	3601      	adds	r6, #1
 8005678:	e7d9      	b.n	800562e <_printf_common+0x8e>
	...

0800567c <_printf_i>:
 800567c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005680:	460c      	mov	r4, r1
 8005682:	4691      	mov	r9, r2
 8005684:	7e27      	ldrb	r7, [r4, #24]
 8005686:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005688:	2f78      	cmp	r7, #120	; 0x78
 800568a:	4680      	mov	r8, r0
 800568c:	469a      	mov	sl, r3
 800568e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005692:	d807      	bhi.n	80056a4 <_printf_i+0x28>
 8005694:	2f62      	cmp	r7, #98	; 0x62
 8005696:	d80a      	bhi.n	80056ae <_printf_i+0x32>
 8005698:	2f00      	cmp	r7, #0
 800569a:	f000 80d8 	beq.w	800584e <_printf_i+0x1d2>
 800569e:	2f58      	cmp	r7, #88	; 0x58
 80056a0:	f000 80a3 	beq.w	80057ea <_printf_i+0x16e>
 80056a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056ac:	e03a      	b.n	8005724 <_printf_i+0xa8>
 80056ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056b2:	2b15      	cmp	r3, #21
 80056b4:	d8f6      	bhi.n	80056a4 <_printf_i+0x28>
 80056b6:	a001      	add	r0, pc, #4	; (adr r0, 80056bc <_printf_i+0x40>)
 80056b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056bc:	08005715 	.word	0x08005715
 80056c0:	08005729 	.word	0x08005729
 80056c4:	080056a5 	.word	0x080056a5
 80056c8:	080056a5 	.word	0x080056a5
 80056cc:	080056a5 	.word	0x080056a5
 80056d0:	080056a5 	.word	0x080056a5
 80056d4:	08005729 	.word	0x08005729
 80056d8:	080056a5 	.word	0x080056a5
 80056dc:	080056a5 	.word	0x080056a5
 80056e0:	080056a5 	.word	0x080056a5
 80056e4:	080056a5 	.word	0x080056a5
 80056e8:	08005835 	.word	0x08005835
 80056ec:	08005759 	.word	0x08005759
 80056f0:	08005817 	.word	0x08005817
 80056f4:	080056a5 	.word	0x080056a5
 80056f8:	080056a5 	.word	0x080056a5
 80056fc:	08005857 	.word	0x08005857
 8005700:	080056a5 	.word	0x080056a5
 8005704:	08005759 	.word	0x08005759
 8005708:	080056a5 	.word	0x080056a5
 800570c:	080056a5 	.word	0x080056a5
 8005710:	0800581f 	.word	0x0800581f
 8005714:	680b      	ldr	r3, [r1, #0]
 8005716:	1d1a      	adds	r2, r3, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	600a      	str	r2, [r1, #0]
 800571c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005724:	2301      	movs	r3, #1
 8005726:	e0a3      	b.n	8005870 <_printf_i+0x1f4>
 8005728:	6825      	ldr	r5, [r4, #0]
 800572a:	6808      	ldr	r0, [r1, #0]
 800572c:	062e      	lsls	r6, r5, #24
 800572e:	f100 0304 	add.w	r3, r0, #4
 8005732:	d50a      	bpl.n	800574a <_printf_i+0xce>
 8005734:	6805      	ldr	r5, [r0, #0]
 8005736:	600b      	str	r3, [r1, #0]
 8005738:	2d00      	cmp	r5, #0
 800573a:	da03      	bge.n	8005744 <_printf_i+0xc8>
 800573c:	232d      	movs	r3, #45	; 0x2d
 800573e:	426d      	negs	r5, r5
 8005740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005744:	485e      	ldr	r0, [pc, #376]	; (80058c0 <_printf_i+0x244>)
 8005746:	230a      	movs	r3, #10
 8005748:	e019      	b.n	800577e <_printf_i+0x102>
 800574a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800574e:	6805      	ldr	r5, [r0, #0]
 8005750:	600b      	str	r3, [r1, #0]
 8005752:	bf18      	it	ne
 8005754:	b22d      	sxthne	r5, r5
 8005756:	e7ef      	b.n	8005738 <_printf_i+0xbc>
 8005758:	680b      	ldr	r3, [r1, #0]
 800575a:	6825      	ldr	r5, [r4, #0]
 800575c:	1d18      	adds	r0, r3, #4
 800575e:	6008      	str	r0, [r1, #0]
 8005760:	0628      	lsls	r0, r5, #24
 8005762:	d501      	bpl.n	8005768 <_printf_i+0xec>
 8005764:	681d      	ldr	r5, [r3, #0]
 8005766:	e002      	b.n	800576e <_printf_i+0xf2>
 8005768:	0669      	lsls	r1, r5, #25
 800576a:	d5fb      	bpl.n	8005764 <_printf_i+0xe8>
 800576c:	881d      	ldrh	r5, [r3, #0]
 800576e:	4854      	ldr	r0, [pc, #336]	; (80058c0 <_printf_i+0x244>)
 8005770:	2f6f      	cmp	r7, #111	; 0x6f
 8005772:	bf0c      	ite	eq
 8005774:	2308      	moveq	r3, #8
 8005776:	230a      	movne	r3, #10
 8005778:	2100      	movs	r1, #0
 800577a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800577e:	6866      	ldr	r6, [r4, #4]
 8005780:	60a6      	str	r6, [r4, #8]
 8005782:	2e00      	cmp	r6, #0
 8005784:	bfa2      	ittt	ge
 8005786:	6821      	ldrge	r1, [r4, #0]
 8005788:	f021 0104 	bicge.w	r1, r1, #4
 800578c:	6021      	strge	r1, [r4, #0]
 800578e:	b90d      	cbnz	r5, 8005794 <_printf_i+0x118>
 8005790:	2e00      	cmp	r6, #0
 8005792:	d04d      	beq.n	8005830 <_printf_i+0x1b4>
 8005794:	4616      	mov	r6, r2
 8005796:	fbb5 f1f3 	udiv	r1, r5, r3
 800579a:	fb03 5711 	mls	r7, r3, r1, r5
 800579e:	5dc7      	ldrb	r7, [r0, r7]
 80057a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057a4:	462f      	mov	r7, r5
 80057a6:	42bb      	cmp	r3, r7
 80057a8:	460d      	mov	r5, r1
 80057aa:	d9f4      	bls.n	8005796 <_printf_i+0x11a>
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d10b      	bne.n	80057c8 <_printf_i+0x14c>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	07df      	lsls	r7, r3, #31
 80057b4:	d508      	bpl.n	80057c8 <_printf_i+0x14c>
 80057b6:	6923      	ldr	r3, [r4, #16]
 80057b8:	6861      	ldr	r1, [r4, #4]
 80057ba:	4299      	cmp	r1, r3
 80057bc:	bfde      	ittt	le
 80057be:	2330      	movle	r3, #48	; 0x30
 80057c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057c8:	1b92      	subs	r2, r2, r6
 80057ca:	6122      	str	r2, [r4, #16]
 80057cc:	f8cd a000 	str.w	sl, [sp]
 80057d0:	464b      	mov	r3, r9
 80057d2:	aa03      	add	r2, sp, #12
 80057d4:	4621      	mov	r1, r4
 80057d6:	4640      	mov	r0, r8
 80057d8:	f7ff fee2 	bl	80055a0 <_printf_common>
 80057dc:	3001      	adds	r0, #1
 80057de:	d14c      	bne.n	800587a <_printf_i+0x1fe>
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	b004      	add	sp, #16
 80057e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ea:	4835      	ldr	r0, [pc, #212]	; (80058c0 <_printf_i+0x244>)
 80057ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	680e      	ldr	r6, [r1, #0]
 80057f4:	061f      	lsls	r7, r3, #24
 80057f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80057fa:	600e      	str	r6, [r1, #0]
 80057fc:	d514      	bpl.n	8005828 <_printf_i+0x1ac>
 80057fe:	07d9      	lsls	r1, r3, #31
 8005800:	bf44      	itt	mi
 8005802:	f043 0320 	orrmi.w	r3, r3, #32
 8005806:	6023      	strmi	r3, [r4, #0]
 8005808:	b91d      	cbnz	r5, 8005812 <_printf_i+0x196>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	f023 0320 	bic.w	r3, r3, #32
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	2310      	movs	r3, #16
 8005814:	e7b0      	b.n	8005778 <_printf_i+0xfc>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	f043 0320 	orr.w	r3, r3, #32
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	2378      	movs	r3, #120	; 0x78
 8005820:	4828      	ldr	r0, [pc, #160]	; (80058c4 <_printf_i+0x248>)
 8005822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005826:	e7e3      	b.n	80057f0 <_printf_i+0x174>
 8005828:	065e      	lsls	r6, r3, #25
 800582a:	bf48      	it	mi
 800582c:	b2ad      	uxthmi	r5, r5
 800582e:	e7e6      	b.n	80057fe <_printf_i+0x182>
 8005830:	4616      	mov	r6, r2
 8005832:	e7bb      	b.n	80057ac <_printf_i+0x130>
 8005834:	680b      	ldr	r3, [r1, #0]
 8005836:	6826      	ldr	r6, [r4, #0]
 8005838:	6960      	ldr	r0, [r4, #20]
 800583a:	1d1d      	adds	r5, r3, #4
 800583c:	600d      	str	r5, [r1, #0]
 800583e:	0635      	lsls	r5, r6, #24
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	d501      	bpl.n	8005848 <_printf_i+0x1cc>
 8005844:	6018      	str	r0, [r3, #0]
 8005846:	e002      	b.n	800584e <_printf_i+0x1d2>
 8005848:	0671      	lsls	r1, r6, #25
 800584a:	d5fb      	bpl.n	8005844 <_printf_i+0x1c8>
 800584c:	8018      	strh	r0, [r3, #0]
 800584e:	2300      	movs	r3, #0
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	4616      	mov	r6, r2
 8005854:	e7ba      	b.n	80057cc <_printf_i+0x150>
 8005856:	680b      	ldr	r3, [r1, #0]
 8005858:	1d1a      	adds	r2, r3, #4
 800585a:	600a      	str	r2, [r1, #0]
 800585c:	681e      	ldr	r6, [r3, #0]
 800585e:	6862      	ldr	r2, [r4, #4]
 8005860:	2100      	movs	r1, #0
 8005862:	4630      	mov	r0, r6
 8005864:	f7fa fcbc 	bl	80001e0 <memchr>
 8005868:	b108      	cbz	r0, 800586e <_printf_i+0x1f2>
 800586a:	1b80      	subs	r0, r0, r6
 800586c:	6060      	str	r0, [r4, #4]
 800586e:	6863      	ldr	r3, [r4, #4]
 8005870:	6123      	str	r3, [r4, #16]
 8005872:	2300      	movs	r3, #0
 8005874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005878:	e7a8      	b.n	80057cc <_printf_i+0x150>
 800587a:	6923      	ldr	r3, [r4, #16]
 800587c:	4632      	mov	r2, r6
 800587e:	4649      	mov	r1, r9
 8005880:	4640      	mov	r0, r8
 8005882:	47d0      	blx	sl
 8005884:	3001      	adds	r0, #1
 8005886:	d0ab      	beq.n	80057e0 <_printf_i+0x164>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	079b      	lsls	r3, r3, #30
 800588c:	d413      	bmi.n	80058b6 <_printf_i+0x23a>
 800588e:	68e0      	ldr	r0, [r4, #12]
 8005890:	9b03      	ldr	r3, [sp, #12]
 8005892:	4298      	cmp	r0, r3
 8005894:	bfb8      	it	lt
 8005896:	4618      	movlt	r0, r3
 8005898:	e7a4      	b.n	80057e4 <_printf_i+0x168>
 800589a:	2301      	movs	r3, #1
 800589c:	4632      	mov	r2, r6
 800589e:	4649      	mov	r1, r9
 80058a0:	4640      	mov	r0, r8
 80058a2:	47d0      	blx	sl
 80058a4:	3001      	adds	r0, #1
 80058a6:	d09b      	beq.n	80057e0 <_printf_i+0x164>
 80058a8:	3501      	adds	r5, #1
 80058aa:	68e3      	ldr	r3, [r4, #12]
 80058ac:	9903      	ldr	r1, [sp, #12]
 80058ae:	1a5b      	subs	r3, r3, r1
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	dcf2      	bgt.n	800589a <_printf_i+0x21e>
 80058b4:	e7eb      	b.n	800588e <_printf_i+0x212>
 80058b6:	2500      	movs	r5, #0
 80058b8:	f104 0619 	add.w	r6, r4, #25
 80058bc:	e7f5      	b.n	80058aa <_printf_i+0x22e>
 80058be:	bf00      	nop
 80058c0:	080073b5 	.word	0x080073b5
 80058c4:	080073c6 	.word	0x080073c6

080058c8 <_sbrk_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d06      	ldr	r5, [pc, #24]	; (80058e4 <_sbrk_r+0x1c>)
 80058cc:	2300      	movs	r3, #0
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	f7fc fa1a 	bl	8001d0c <_sbrk>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_sbrk_r+0x1a>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_sbrk_r+0x1a>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	200001e0 	.word	0x200001e0

080058e8 <strcpy>:
 80058e8:	4603      	mov	r3, r0
 80058ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ee:	f803 2b01 	strb.w	r2, [r3], #1
 80058f2:	2a00      	cmp	r2, #0
 80058f4:	d1f9      	bne.n	80058ea <strcpy+0x2>
 80058f6:	4770      	bx	lr

080058f8 <__assert_func>:
 80058f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058fa:	4614      	mov	r4, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <__assert_func+0x2c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4605      	mov	r5, r0
 8005904:	68d8      	ldr	r0, [r3, #12]
 8005906:	b14c      	cbz	r4, 800591c <__assert_func+0x24>
 8005908:	4b07      	ldr	r3, [pc, #28]	; (8005928 <__assert_func+0x30>)
 800590a:	9100      	str	r1, [sp, #0]
 800590c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005910:	4906      	ldr	r1, [pc, #24]	; (800592c <__assert_func+0x34>)
 8005912:	462b      	mov	r3, r5
 8005914:	f000 fe88 	bl	8006628 <fiprintf>
 8005918:	f001 f946 	bl	8006ba8 <abort>
 800591c:	4b04      	ldr	r3, [pc, #16]	; (8005930 <__assert_func+0x38>)
 800591e:	461c      	mov	r4, r3
 8005920:	e7f3      	b.n	800590a <__assert_func+0x12>
 8005922:	bf00      	nop
 8005924:	2000000c 	.word	0x2000000c
 8005928:	080073d7 	.word	0x080073d7
 800592c:	080073e4 	.word	0x080073e4
 8005930:	08007412 	.word	0x08007412

08005934 <quorem>:
 8005934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	6903      	ldr	r3, [r0, #16]
 800593a:	690c      	ldr	r4, [r1, #16]
 800593c:	42a3      	cmp	r3, r4
 800593e:	4607      	mov	r7, r0
 8005940:	f2c0 8081 	blt.w	8005a46 <quorem+0x112>
 8005944:	3c01      	subs	r4, #1
 8005946:	f101 0814 	add.w	r8, r1, #20
 800594a:	f100 0514 	add.w	r5, r0, #20
 800594e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005952:	9301      	str	r3, [sp, #4]
 8005954:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005958:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800595c:	3301      	adds	r3, #1
 800595e:	429a      	cmp	r2, r3
 8005960:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005964:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005968:	fbb2 f6f3 	udiv	r6, r2, r3
 800596c:	d331      	bcc.n	80059d2 <quorem+0x9e>
 800596e:	f04f 0e00 	mov.w	lr, #0
 8005972:	4640      	mov	r0, r8
 8005974:	46ac      	mov	ip, r5
 8005976:	46f2      	mov	sl, lr
 8005978:	f850 2b04 	ldr.w	r2, [r0], #4
 800597c:	b293      	uxth	r3, r2
 800597e:	fb06 e303 	mla	r3, r6, r3, lr
 8005982:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005986:	b29b      	uxth	r3, r3
 8005988:	ebaa 0303 	sub.w	r3, sl, r3
 800598c:	0c12      	lsrs	r2, r2, #16
 800598e:	f8dc a000 	ldr.w	sl, [ip]
 8005992:	fb06 e202 	mla	r2, r6, r2, lr
 8005996:	fa13 f38a 	uxtah	r3, r3, sl
 800599a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800599e:	fa1f fa82 	uxth.w	sl, r2
 80059a2:	f8dc 2000 	ldr.w	r2, [ip]
 80059a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80059aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059b4:	4581      	cmp	r9, r0
 80059b6:	f84c 3b04 	str.w	r3, [ip], #4
 80059ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059be:	d2db      	bcs.n	8005978 <quorem+0x44>
 80059c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80059c4:	b92b      	cbnz	r3, 80059d2 <quorem+0x9e>
 80059c6:	9b01      	ldr	r3, [sp, #4]
 80059c8:	3b04      	subs	r3, #4
 80059ca:	429d      	cmp	r5, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	d32e      	bcc.n	8005a2e <quorem+0xfa>
 80059d0:	613c      	str	r4, [r7, #16]
 80059d2:	4638      	mov	r0, r7
 80059d4:	f7ff fada 	bl	8004f8c <__mcmp>
 80059d8:	2800      	cmp	r0, #0
 80059da:	db24      	blt.n	8005a26 <quorem+0xf2>
 80059dc:	3601      	adds	r6, #1
 80059de:	4628      	mov	r0, r5
 80059e0:	f04f 0c00 	mov.w	ip, #0
 80059e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80059e8:	f8d0 e000 	ldr.w	lr, [r0]
 80059ec:	b293      	uxth	r3, r2
 80059ee:	ebac 0303 	sub.w	r3, ip, r3
 80059f2:	0c12      	lsrs	r2, r2, #16
 80059f4:	fa13 f38e 	uxtah	r3, r3, lr
 80059f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a06:	45c1      	cmp	r9, r8
 8005a08:	f840 3b04 	str.w	r3, [r0], #4
 8005a0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a10:	d2e8      	bcs.n	80059e4 <quorem+0xb0>
 8005a12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a1a:	b922      	cbnz	r2, 8005a26 <quorem+0xf2>
 8005a1c:	3b04      	subs	r3, #4
 8005a1e:	429d      	cmp	r5, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	d30a      	bcc.n	8005a3a <quorem+0x106>
 8005a24:	613c      	str	r4, [r7, #16]
 8005a26:	4630      	mov	r0, r6
 8005a28:	b003      	add	sp, #12
 8005a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	3b04      	subs	r3, #4
 8005a32:	2a00      	cmp	r2, #0
 8005a34:	d1cc      	bne.n	80059d0 <quorem+0x9c>
 8005a36:	3c01      	subs	r4, #1
 8005a38:	e7c7      	b.n	80059ca <quorem+0x96>
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	3b04      	subs	r3, #4
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	d1f0      	bne.n	8005a24 <quorem+0xf0>
 8005a42:	3c01      	subs	r4, #1
 8005a44:	e7eb      	b.n	8005a1e <quorem+0xea>
 8005a46:	2000      	movs	r0, #0
 8005a48:	e7ee      	b.n	8005a28 <quorem+0xf4>
 8005a4a:	0000      	movs	r0, r0
 8005a4c:	0000      	movs	r0, r0
	...

08005a50 <_dtoa_r>:
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	ed2d 8b02 	vpush	{d8}
 8005a58:	ec57 6b10 	vmov	r6, r7, d0
 8005a5c:	b095      	sub	sp, #84	; 0x54
 8005a5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a64:	9105      	str	r1, [sp, #20]
 8005a66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a70:	b975      	cbnz	r5, 8005a90 <_dtoa_r+0x40>
 8005a72:	2010      	movs	r0, #16
 8005a74:	f000 fdea 	bl	800664c <malloc>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	6260      	str	r0, [r4, #36]	; 0x24
 8005a7c:	b920      	cbnz	r0, 8005a88 <_dtoa_r+0x38>
 8005a7e:	4bb2      	ldr	r3, [pc, #712]	; (8005d48 <_dtoa_r+0x2f8>)
 8005a80:	21ea      	movs	r1, #234	; 0xea
 8005a82:	48b2      	ldr	r0, [pc, #712]	; (8005d4c <_dtoa_r+0x2fc>)
 8005a84:	f7ff ff38 	bl	80058f8 <__assert_func>
 8005a88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a8c:	6005      	str	r5, [r0, #0]
 8005a8e:	60c5      	str	r5, [r0, #12]
 8005a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	b151      	cbz	r1, 8005aac <_dtoa_r+0x5c>
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	604a      	str	r2, [r1, #4]
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4093      	lsls	r3, r2
 8005a9e:	608b      	str	r3, [r1, #8]
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f7ff f835 	bl	8004b10 <_Bfree>
 8005aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	1e3b      	subs	r3, r7, #0
 8005aae:	bfb9      	ittee	lt
 8005ab0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ab4:	9303      	strlt	r3, [sp, #12]
 8005ab6:	2300      	movge	r3, #0
 8005ab8:	f8c8 3000 	strge.w	r3, [r8]
 8005abc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005ac0:	4ba3      	ldr	r3, [pc, #652]	; (8005d50 <_dtoa_r+0x300>)
 8005ac2:	bfbc      	itt	lt
 8005ac4:	2201      	movlt	r2, #1
 8005ac6:	f8c8 2000 	strlt.w	r2, [r8]
 8005aca:	ea33 0309 	bics.w	r3, r3, r9
 8005ace:	d11b      	bne.n	8005b08 <_dtoa_r+0xb8>
 8005ad0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ad2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005adc:	4333      	orrs	r3, r6
 8005ade:	f000 857a 	beq.w	80065d6 <_dtoa_r+0xb86>
 8005ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ae4:	b963      	cbnz	r3, 8005b00 <_dtoa_r+0xb0>
 8005ae6:	4b9b      	ldr	r3, [pc, #620]	; (8005d54 <_dtoa_r+0x304>)
 8005ae8:	e024      	b.n	8005b34 <_dtoa_r+0xe4>
 8005aea:	4b9b      	ldr	r3, [pc, #620]	; (8005d58 <_dtoa_r+0x308>)
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	3308      	adds	r3, #8
 8005af0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	9800      	ldr	r0, [sp, #0]
 8005af6:	b015      	add	sp, #84	; 0x54
 8005af8:	ecbd 8b02 	vpop	{d8}
 8005afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b00:	4b94      	ldr	r3, [pc, #592]	; (8005d54 <_dtoa_r+0x304>)
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	3303      	adds	r3, #3
 8005b06:	e7f3      	b.n	8005af0 <_dtoa_r+0xa0>
 8005b08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	ec51 0b17 	vmov	r0, r1, d7
 8005b12:	2300      	movs	r3, #0
 8005b14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005b18:	f7fa ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b1c:	4680      	mov	r8, r0
 8005b1e:	b158      	cbz	r0, 8005b38 <_dtoa_r+0xe8>
 8005b20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b22:	2301      	movs	r3, #1
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8551 	beq.w	80065d0 <_dtoa_r+0xb80>
 8005b2e:	488b      	ldr	r0, [pc, #556]	; (8005d5c <_dtoa_r+0x30c>)
 8005b30:	6018      	str	r0, [r3, #0]
 8005b32:	1e43      	subs	r3, r0, #1
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	e7dd      	b.n	8005af4 <_dtoa_r+0xa4>
 8005b38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005b3c:	aa12      	add	r2, sp, #72	; 0x48
 8005b3e:	a913      	add	r1, sp, #76	; 0x4c
 8005b40:	4620      	mov	r0, r4
 8005b42:	f7ff fac7 	bl	80050d4 <__d2b>
 8005b46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b4a:	4683      	mov	fp, r0
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	d07c      	beq.n	8005c4a <_dtoa_r+0x1fa>
 8005b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005b5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b6a:	4b7d      	ldr	r3, [pc, #500]	; (8005d60 <_dtoa_r+0x310>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4630      	mov	r0, r6
 8005b70:	4639      	mov	r1, r7
 8005b72:	f7fa fb89 	bl	8000288 <__aeabi_dsub>
 8005b76:	a36e      	add	r3, pc, #440	; (adr r3, 8005d30 <_dtoa_r+0x2e0>)
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f7fa fd3c 	bl	80005f8 <__aeabi_dmul>
 8005b80:	a36d      	add	r3, pc, #436	; (adr r3, 8005d38 <_dtoa_r+0x2e8>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fb81 	bl	800028c <__adddf3>
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	460f      	mov	r7, r1
 8005b90:	f7fa fcc8 	bl	8000524 <__aeabi_i2d>
 8005b94:	a36a      	add	r3, pc, #424	; (adr r3, 8005d40 <_dtoa_r+0x2f0>)
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f7fa fd2d 	bl	80005f8 <__aeabi_dmul>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	f7fa fb71 	bl	800028c <__adddf3>
 8005baa:	4606      	mov	r6, r0
 8005bac:	460f      	mov	r7, r1
 8005bae:	f7fa ffbd 	bl	8000b2c <__aeabi_d2iz>
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	4682      	mov	sl, r0
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	4630      	mov	r0, r6
 8005bba:	4639      	mov	r1, r7
 8005bbc:	f7fa ff8e 	bl	8000adc <__aeabi_dcmplt>
 8005bc0:	b148      	cbz	r0, 8005bd6 <_dtoa_r+0x186>
 8005bc2:	4650      	mov	r0, sl
 8005bc4:	f7fa fcae 	bl	8000524 <__aeabi_i2d>
 8005bc8:	4632      	mov	r2, r6
 8005bca:	463b      	mov	r3, r7
 8005bcc:	f7fa ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bd0:	b908      	cbnz	r0, 8005bd6 <_dtoa_r+0x186>
 8005bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bd6:	f1ba 0f16 	cmp.w	sl, #22
 8005bda:	d854      	bhi.n	8005c86 <_dtoa_r+0x236>
 8005bdc:	4b61      	ldr	r3, [pc, #388]	; (8005d64 <_dtoa_r+0x314>)
 8005bde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bea:	f7fa ff77 	bl	8000adc <__aeabi_dcmplt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d04b      	beq.n	8005c8a <_dtoa_r+0x23a>
 8005bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8005bfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bfc:	1b5d      	subs	r5, r3, r5
 8005bfe:	1e6b      	subs	r3, r5, #1
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	bf43      	ittte	mi
 8005c04:	2300      	movmi	r3, #0
 8005c06:	f1c5 0801 	rsbmi	r8, r5, #1
 8005c0a:	9304      	strmi	r3, [sp, #16]
 8005c0c:	f04f 0800 	movpl.w	r8, #0
 8005c10:	f1ba 0f00 	cmp.w	sl, #0
 8005c14:	db3b      	blt.n	8005c8e <_dtoa_r+0x23e>
 8005c16:	9b04      	ldr	r3, [sp, #16]
 8005c18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005c1c:	4453      	add	r3, sl
 8005c1e:	9304      	str	r3, [sp, #16]
 8005c20:	2300      	movs	r3, #0
 8005c22:	9306      	str	r3, [sp, #24]
 8005c24:	9b05      	ldr	r3, [sp, #20]
 8005c26:	2b09      	cmp	r3, #9
 8005c28:	d869      	bhi.n	8005cfe <_dtoa_r+0x2ae>
 8005c2a:	2b05      	cmp	r3, #5
 8005c2c:	bfc4      	itt	gt
 8005c2e:	3b04      	subgt	r3, #4
 8005c30:	9305      	strgt	r3, [sp, #20]
 8005c32:	9b05      	ldr	r3, [sp, #20]
 8005c34:	f1a3 0302 	sub.w	r3, r3, #2
 8005c38:	bfcc      	ite	gt
 8005c3a:	2500      	movgt	r5, #0
 8005c3c:	2501      	movle	r5, #1
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d869      	bhi.n	8005d16 <_dtoa_r+0x2c6>
 8005c42:	e8df f003 	tbb	[pc, r3]
 8005c46:	4e2c      	.short	0x4e2c
 8005c48:	5a4c      	.short	0x5a4c
 8005c4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005c4e:	441d      	add	r5, r3
 8005c50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	bfc1      	itttt	gt
 8005c58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c60:	fa09 f303 	lslgt.w	r3, r9, r3
 8005c64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c68:	bfda      	itte	le
 8005c6a:	f1c3 0320 	rsble	r3, r3, #32
 8005c6e:	fa06 f003 	lslle.w	r0, r6, r3
 8005c72:	4318      	orrgt	r0, r3
 8005c74:	f7fa fc46 	bl	8000504 <__aeabi_ui2d>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c80:	3d01      	subs	r5, #1
 8005c82:	9310      	str	r3, [sp, #64]	; 0x40
 8005c84:	e771      	b.n	8005b6a <_dtoa_r+0x11a>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e7b6      	b.n	8005bf8 <_dtoa_r+0x1a8>
 8005c8a:	900e      	str	r0, [sp, #56]	; 0x38
 8005c8c:	e7b5      	b.n	8005bfa <_dtoa_r+0x1aa>
 8005c8e:	f1ca 0300 	rsb	r3, sl, #0
 8005c92:	9306      	str	r3, [sp, #24]
 8005c94:	2300      	movs	r3, #0
 8005c96:	eba8 080a 	sub.w	r8, r8, sl
 8005c9a:	930d      	str	r3, [sp, #52]	; 0x34
 8005c9c:	e7c2      	b.n	8005c24 <_dtoa_r+0x1d4>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	9308      	str	r3, [sp, #32]
 8005ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dc39      	bgt.n	8005d1c <_dtoa_r+0x2cc>
 8005ca8:	f04f 0901 	mov.w	r9, #1
 8005cac:	f8cd 9004 	str.w	r9, [sp, #4]
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005cb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005cb8:	2200      	movs	r2, #0
 8005cba:	6042      	str	r2, [r0, #4]
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	f102 0614 	add.w	r6, r2, #20
 8005cc2:	429e      	cmp	r6, r3
 8005cc4:	6841      	ldr	r1, [r0, #4]
 8005cc6:	d92f      	bls.n	8005d28 <_dtoa_r+0x2d8>
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f7fe fee1 	bl	8004a90 <_Balloc>
 8005cce:	9000      	str	r0, [sp, #0]
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d14b      	bne.n	8005d6c <_dtoa_r+0x31c>
 8005cd4:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <_dtoa_r+0x318>)
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005cdc:	e6d1      	b.n	8005a82 <_dtoa_r+0x32>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e7de      	b.n	8005ca0 <_dtoa_r+0x250>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	9308      	str	r3, [sp, #32]
 8005ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce8:	eb0a 0903 	add.w	r9, sl, r3
 8005cec:	f109 0301 	add.w	r3, r9, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	bfb8      	it	lt
 8005cf6:	2301      	movlt	r3, #1
 8005cf8:	e7dd      	b.n	8005cb6 <_dtoa_r+0x266>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e7f2      	b.n	8005ce4 <_dtoa_r+0x294>
 8005cfe:	2501      	movs	r5, #1
 8005d00:	2300      	movs	r3, #0
 8005d02:	9305      	str	r3, [sp, #20]
 8005d04:	9508      	str	r5, [sp, #32]
 8005d06:	f04f 39ff 	mov.w	r9, #4294967295
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d10:	2312      	movs	r3, #18
 8005d12:	9209      	str	r2, [sp, #36]	; 0x24
 8005d14:	e7cf      	b.n	8005cb6 <_dtoa_r+0x266>
 8005d16:	2301      	movs	r3, #1
 8005d18:	9308      	str	r3, [sp, #32]
 8005d1a:	e7f4      	b.n	8005d06 <_dtoa_r+0x2b6>
 8005d1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005d20:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d24:	464b      	mov	r3, r9
 8005d26:	e7c6      	b.n	8005cb6 <_dtoa_r+0x266>
 8005d28:	3101      	adds	r1, #1
 8005d2a:	6041      	str	r1, [r0, #4]
 8005d2c:	0052      	lsls	r2, r2, #1
 8005d2e:	e7c6      	b.n	8005cbe <_dtoa_r+0x26e>
 8005d30:	636f4361 	.word	0x636f4361
 8005d34:	3fd287a7 	.word	0x3fd287a7
 8005d38:	8b60c8b3 	.word	0x8b60c8b3
 8005d3c:	3fc68a28 	.word	0x3fc68a28
 8005d40:	509f79fb 	.word	0x509f79fb
 8005d44:	3fd34413 	.word	0x3fd34413
 8005d48:	0800721c 	.word	0x0800721c
 8005d4c:	08007422 	.word	0x08007422
 8005d50:	7ff00000 	.word	0x7ff00000
 8005d54:	0800741c 	.word	0x0800741c
 8005d58:	08007413 	.word	0x08007413
 8005d5c:	08007421 	.word	0x08007421
 8005d60:	3ff80000 	.word	0x3ff80000
 8005d64:	080072d0 	.word	0x080072d0
 8005d68:	08007293 	.word	0x08007293
 8005d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d6e:	9a00      	ldr	r2, [sp, #0]
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	9b01      	ldr	r3, [sp, #4]
 8005d74:	2b0e      	cmp	r3, #14
 8005d76:	f200 80ad 	bhi.w	8005ed4 <_dtoa_r+0x484>
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	f000 80aa 	beq.w	8005ed4 <_dtoa_r+0x484>
 8005d80:	f1ba 0f00 	cmp.w	sl, #0
 8005d84:	dd36      	ble.n	8005df4 <_dtoa_r+0x3a4>
 8005d86:	4ac3      	ldr	r2, [pc, #780]	; (8006094 <_dtoa_r+0x644>)
 8005d88:	f00a 030f 	and.w	r3, sl, #15
 8005d8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d90:	ed93 7b00 	vldr	d7, [r3]
 8005d94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005d98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005d9c:	eeb0 8a47 	vmov.f32	s16, s14
 8005da0:	eef0 8a67 	vmov.f32	s17, s15
 8005da4:	d016      	beq.n	8005dd4 <_dtoa_r+0x384>
 8005da6:	4bbc      	ldr	r3, [pc, #752]	; (8006098 <_dtoa_r+0x648>)
 8005da8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005db0:	f7fa fd4c 	bl	800084c <__aeabi_ddiv>
 8005db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005db8:	f007 070f 	and.w	r7, r7, #15
 8005dbc:	2503      	movs	r5, #3
 8005dbe:	4eb6      	ldr	r6, [pc, #728]	; (8006098 <_dtoa_r+0x648>)
 8005dc0:	b957      	cbnz	r7, 8005dd8 <_dtoa_r+0x388>
 8005dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dc6:	ec53 2b18 	vmov	r2, r3, d8
 8005dca:	f7fa fd3f 	bl	800084c <__aeabi_ddiv>
 8005dce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dd2:	e029      	b.n	8005e28 <_dtoa_r+0x3d8>
 8005dd4:	2502      	movs	r5, #2
 8005dd6:	e7f2      	b.n	8005dbe <_dtoa_r+0x36e>
 8005dd8:	07f9      	lsls	r1, r7, #31
 8005dda:	d508      	bpl.n	8005dee <_dtoa_r+0x39e>
 8005ddc:	ec51 0b18 	vmov	r0, r1, d8
 8005de0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005de4:	f7fa fc08 	bl	80005f8 <__aeabi_dmul>
 8005de8:	ec41 0b18 	vmov	d8, r0, r1
 8005dec:	3501      	adds	r5, #1
 8005dee:	107f      	asrs	r7, r7, #1
 8005df0:	3608      	adds	r6, #8
 8005df2:	e7e5      	b.n	8005dc0 <_dtoa_r+0x370>
 8005df4:	f000 80a6 	beq.w	8005f44 <_dtoa_r+0x4f4>
 8005df8:	f1ca 0600 	rsb	r6, sl, #0
 8005dfc:	4ba5      	ldr	r3, [pc, #660]	; (8006094 <_dtoa_r+0x644>)
 8005dfe:	4fa6      	ldr	r7, [pc, #664]	; (8006098 <_dtoa_r+0x648>)
 8005e00:	f006 020f 	and.w	r2, r6, #15
 8005e04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e10:	f7fa fbf2 	bl	80005f8 <__aeabi_dmul>
 8005e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e18:	1136      	asrs	r6, r6, #4
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	2502      	movs	r5, #2
 8005e1e:	2e00      	cmp	r6, #0
 8005e20:	f040 8085 	bne.w	8005f2e <_dtoa_r+0x4de>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1d2      	bne.n	8005dce <_dtoa_r+0x37e>
 8005e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 808c 	beq.w	8005f48 <_dtoa_r+0x4f8>
 8005e30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e34:	4b99      	ldr	r3, [pc, #612]	; (800609c <_dtoa_r+0x64c>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	4630      	mov	r0, r6
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	f7fa fe4e 	bl	8000adc <__aeabi_dcmplt>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	f000 8081 	beq.w	8005f48 <_dtoa_r+0x4f8>
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d07d      	beq.n	8005f48 <_dtoa_r+0x4f8>
 8005e4c:	f1b9 0f00 	cmp.w	r9, #0
 8005e50:	dd3c      	ble.n	8005ecc <_dtoa_r+0x47c>
 8005e52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005e56:	9307      	str	r3, [sp, #28]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4b91      	ldr	r3, [pc, #580]	; (80060a0 <_dtoa_r+0x650>)
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	4639      	mov	r1, r7
 8005e60:	f7fa fbca 	bl	80005f8 <__aeabi_dmul>
 8005e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e68:	3501      	adds	r5, #1
 8005e6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005e6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e72:	4628      	mov	r0, r5
 8005e74:	f7fa fb56 	bl	8000524 <__aeabi_i2d>
 8005e78:	4632      	mov	r2, r6
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	f7fa fbbc 	bl	80005f8 <__aeabi_dmul>
 8005e80:	4b88      	ldr	r3, [pc, #544]	; (80060a4 <_dtoa_r+0x654>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	f7fa fa02 	bl	800028c <__adddf3>
 8005e88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e90:	9303      	str	r3, [sp, #12]
 8005e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d15c      	bne.n	8005f52 <_dtoa_r+0x502>
 8005e98:	4b83      	ldr	r3, [pc, #524]	; (80060a8 <_dtoa_r+0x658>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	f7fa f9f2 	bl	8000288 <__aeabi_dsub>
 8005ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	460f      	mov	r7, r1
 8005eac:	f7fa fe34 	bl	8000b18 <__aeabi_dcmpgt>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	f040 8296 	bne.w	80063e2 <_dtoa_r+0x992>
 8005eb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	f7fa fe0b 	bl	8000adc <__aeabi_dcmplt>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f040 8288 	bne.w	80063dc <_dtoa_r+0x98c>
 8005ecc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ed0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ed4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f2c0 8158 	blt.w	800618c <_dtoa_r+0x73c>
 8005edc:	f1ba 0f0e 	cmp.w	sl, #14
 8005ee0:	f300 8154 	bgt.w	800618c <_dtoa_r+0x73c>
 8005ee4:	4b6b      	ldr	r3, [pc, #428]	; (8006094 <_dtoa_r+0x644>)
 8005ee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005eea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f280 80e3 	bge.w	80060bc <_dtoa_r+0x66c>
 8005ef6:	9b01      	ldr	r3, [sp, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f300 80df 	bgt.w	80060bc <_dtoa_r+0x66c>
 8005efe:	f040 826d 	bne.w	80063dc <_dtoa_r+0x98c>
 8005f02:	4b69      	ldr	r3, [pc, #420]	; (80060a8 <_dtoa_r+0x658>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	4640      	mov	r0, r8
 8005f08:	4649      	mov	r1, r9
 8005f0a:	f7fa fb75 	bl	80005f8 <__aeabi_dmul>
 8005f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f12:	f7fa fdf7 	bl	8000b04 <__aeabi_dcmpge>
 8005f16:	9e01      	ldr	r6, [sp, #4]
 8005f18:	4637      	mov	r7, r6
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	f040 8243 	bne.w	80063a6 <_dtoa_r+0x956>
 8005f20:	9d00      	ldr	r5, [sp, #0]
 8005f22:	2331      	movs	r3, #49	; 0x31
 8005f24:	f805 3b01 	strb.w	r3, [r5], #1
 8005f28:	f10a 0a01 	add.w	sl, sl, #1
 8005f2c:	e23f      	b.n	80063ae <_dtoa_r+0x95e>
 8005f2e:	07f2      	lsls	r2, r6, #31
 8005f30:	d505      	bpl.n	8005f3e <_dtoa_r+0x4ee>
 8005f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f36:	f7fa fb5f 	bl	80005f8 <__aeabi_dmul>
 8005f3a:	3501      	adds	r5, #1
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	1076      	asrs	r6, r6, #1
 8005f40:	3708      	adds	r7, #8
 8005f42:	e76c      	b.n	8005e1e <_dtoa_r+0x3ce>
 8005f44:	2502      	movs	r5, #2
 8005f46:	e76f      	b.n	8005e28 <_dtoa_r+0x3d8>
 8005f48:	9b01      	ldr	r3, [sp, #4]
 8005f4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8005f50:	e78d      	b.n	8005e6e <_dtoa_r+0x41e>
 8005f52:	9900      	ldr	r1, [sp, #0]
 8005f54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005f56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f58:	4b4e      	ldr	r3, [pc, #312]	; (8006094 <_dtoa_r+0x644>)
 8005f5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f5e:	4401      	add	r1, r0
 8005f60:	9102      	str	r1, [sp, #8]
 8005f62:	9908      	ldr	r1, [sp, #32]
 8005f64:	eeb0 8a47 	vmov.f32	s16, s14
 8005f68:	eef0 8a67 	vmov.f32	s17, s15
 8005f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f74:	2900      	cmp	r1, #0
 8005f76:	d045      	beq.n	8006004 <_dtoa_r+0x5b4>
 8005f78:	494c      	ldr	r1, [pc, #304]	; (80060ac <_dtoa_r+0x65c>)
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	f7fa fc66 	bl	800084c <__aeabi_ddiv>
 8005f80:	ec53 2b18 	vmov	r2, r3, d8
 8005f84:	f7fa f980 	bl	8000288 <__aeabi_dsub>
 8005f88:	9d00      	ldr	r5, [sp, #0]
 8005f8a:	ec41 0b18 	vmov	d8, r0, r1
 8005f8e:	4639      	mov	r1, r7
 8005f90:	4630      	mov	r0, r6
 8005f92:	f7fa fdcb 	bl	8000b2c <__aeabi_d2iz>
 8005f96:	900c      	str	r0, [sp, #48]	; 0x30
 8005f98:	f7fa fac4 	bl	8000524 <__aeabi_i2d>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	f7fa f970 	bl	8000288 <__aeabi_dsub>
 8005fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005faa:	3330      	adds	r3, #48	; 0x30
 8005fac:	f805 3b01 	strb.w	r3, [r5], #1
 8005fb0:	ec53 2b18 	vmov	r2, r3, d8
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	460f      	mov	r7, r1
 8005fb8:	f7fa fd90 	bl	8000adc <__aeabi_dcmplt>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d165      	bne.n	800608c <_dtoa_r+0x63c>
 8005fc0:	4632      	mov	r2, r6
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	4935      	ldr	r1, [pc, #212]	; (800609c <_dtoa_r+0x64c>)
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	f7fa f95e 	bl	8000288 <__aeabi_dsub>
 8005fcc:	ec53 2b18 	vmov	r2, r3, d8
 8005fd0:	f7fa fd84 	bl	8000adc <__aeabi_dcmplt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	f040 80b9 	bne.w	800614c <_dtoa_r+0x6fc>
 8005fda:	9b02      	ldr	r3, [sp, #8]
 8005fdc:	429d      	cmp	r5, r3
 8005fde:	f43f af75 	beq.w	8005ecc <_dtoa_r+0x47c>
 8005fe2:	4b2f      	ldr	r3, [pc, #188]	; (80060a0 <_dtoa_r+0x650>)
 8005fe4:	ec51 0b18 	vmov	r0, r1, d8
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f7fa fb05 	bl	80005f8 <__aeabi_dmul>
 8005fee:	4b2c      	ldr	r3, [pc, #176]	; (80060a0 <_dtoa_r+0x650>)
 8005ff0:	ec41 0b18 	vmov	d8, r0, r1
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	f7fa fafd 	bl	80005f8 <__aeabi_dmul>
 8005ffe:	4606      	mov	r6, r0
 8006000:	460f      	mov	r7, r1
 8006002:	e7c4      	b.n	8005f8e <_dtoa_r+0x53e>
 8006004:	ec51 0b17 	vmov	r0, r1, d7
 8006008:	f7fa faf6 	bl	80005f8 <__aeabi_dmul>
 800600c:	9b02      	ldr	r3, [sp, #8]
 800600e:	9d00      	ldr	r5, [sp, #0]
 8006010:	930c      	str	r3, [sp, #48]	; 0x30
 8006012:	ec41 0b18 	vmov	d8, r0, r1
 8006016:	4639      	mov	r1, r7
 8006018:	4630      	mov	r0, r6
 800601a:	f7fa fd87 	bl	8000b2c <__aeabi_d2iz>
 800601e:	9011      	str	r0, [sp, #68]	; 0x44
 8006020:	f7fa fa80 	bl	8000524 <__aeabi_i2d>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4630      	mov	r0, r6
 800602a:	4639      	mov	r1, r7
 800602c:	f7fa f92c 	bl	8000288 <__aeabi_dsub>
 8006030:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006032:	3330      	adds	r3, #48	; 0x30
 8006034:	f805 3b01 	strb.w	r3, [r5], #1
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	429d      	cmp	r5, r3
 800603c:	4606      	mov	r6, r0
 800603e:	460f      	mov	r7, r1
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	d134      	bne.n	80060b0 <_dtoa_r+0x660>
 8006046:	4b19      	ldr	r3, [pc, #100]	; (80060ac <_dtoa_r+0x65c>)
 8006048:	ec51 0b18 	vmov	r0, r1, d8
 800604c:	f7fa f91e 	bl	800028c <__adddf3>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4630      	mov	r0, r6
 8006056:	4639      	mov	r1, r7
 8006058:	f7fa fd5e 	bl	8000b18 <__aeabi_dcmpgt>
 800605c:	2800      	cmp	r0, #0
 800605e:	d175      	bne.n	800614c <_dtoa_r+0x6fc>
 8006060:	ec53 2b18 	vmov	r2, r3, d8
 8006064:	4911      	ldr	r1, [pc, #68]	; (80060ac <_dtoa_r+0x65c>)
 8006066:	2000      	movs	r0, #0
 8006068:	f7fa f90e 	bl	8000288 <__aeabi_dsub>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4630      	mov	r0, r6
 8006072:	4639      	mov	r1, r7
 8006074:	f7fa fd32 	bl	8000adc <__aeabi_dcmplt>
 8006078:	2800      	cmp	r0, #0
 800607a:	f43f af27 	beq.w	8005ecc <_dtoa_r+0x47c>
 800607e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006080:	1e6b      	subs	r3, r5, #1
 8006082:	930c      	str	r3, [sp, #48]	; 0x30
 8006084:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006088:	2b30      	cmp	r3, #48	; 0x30
 800608a:	d0f8      	beq.n	800607e <_dtoa_r+0x62e>
 800608c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006090:	e04a      	b.n	8006128 <_dtoa_r+0x6d8>
 8006092:	bf00      	nop
 8006094:	080072d0 	.word	0x080072d0
 8006098:	080072a8 	.word	0x080072a8
 800609c:	3ff00000 	.word	0x3ff00000
 80060a0:	40240000 	.word	0x40240000
 80060a4:	401c0000 	.word	0x401c0000
 80060a8:	40140000 	.word	0x40140000
 80060ac:	3fe00000 	.word	0x3fe00000
 80060b0:	4baf      	ldr	r3, [pc, #700]	; (8006370 <_dtoa_r+0x920>)
 80060b2:	f7fa faa1 	bl	80005f8 <__aeabi_dmul>
 80060b6:	4606      	mov	r6, r0
 80060b8:	460f      	mov	r7, r1
 80060ba:	e7ac      	b.n	8006016 <_dtoa_r+0x5c6>
 80060bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060c0:	9d00      	ldr	r5, [sp, #0]
 80060c2:	4642      	mov	r2, r8
 80060c4:	464b      	mov	r3, r9
 80060c6:	4630      	mov	r0, r6
 80060c8:	4639      	mov	r1, r7
 80060ca:	f7fa fbbf 	bl	800084c <__aeabi_ddiv>
 80060ce:	f7fa fd2d 	bl	8000b2c <__aeabi_d2iz>
 80060d2:	9002      	str	r0, [sp, #8]
 80060d4:	f7fa fa26 	bl	8000524 <__aeabi_i2d>
 80060d8:	4642      	mov	r2, r8
 80060da:	464b      	mov	r3, r9
 80060dc:	f7fa fa8c 	bl	80005f8 <__aeabi_dmul>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4630      	mov	r0, r6
 80060e6:	4639      	mov	r1, r7
 80060e8:	f7fa f8ce 	bl	8000288 <__aeabi_dsub>
 80060ec:	9e02      	ldr	r6, [sp, #8]
 80060ee:	9f01      	ldr	r7, [sp, #4]
 80060f0:	3630      	adds	r6, #48	; 0x30
 80060f2:	f805 6b01 	strb.w	r6, [r5], #1
 80060f6:	9e00      	ldr	r6, [sp, #0]
 80060f8:	1bae      	subs	r6, r5, r6
 80060fa:	42b7      	cmp	r7, r6
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	d137      	bne.n	8006172 <_dtoa_r+0x722>
 8006102:	f7fa f8c3 	bl	800028c <__adddf3>
 8006106:	4642      	mov	r2, r8
 8006108:	464b      	mov	r3, r9
 800610a:	4606      	mov	r6, r0
 800610c:	460f      	mov	r7, r1
 800610e:	f7fa fd03 	bl	8000b18 <__aeabi_dcmpgt>
 8006112:	b9c8      	cbnz	r0, 8006148 <_dtoa_r+0x6f8>
 8006114:	4642      	mov	r2, r8
 8006116:	464b      	mov	r3, r9
 8006118:	4630      	mov	r0, r6
 800611a:	4639      	mov	r1, r7
 800611c:	f7fa fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006120:	b110      	cbz	r0, 8006128 <_dtoa_r+0x6d8>
 8006122:	9b02      	ldr	r3, [sp, #8]
 8006124:	07d9      	lsls	r1, r3, #31
 8006126:	d40f      	bmi.n	8006148 <_dtoa_r+0x6f8>
 8006128:	4620      	mov	r0, r4
 800612a:	4659      	mov	r1, fp
 800612c:	f7fe fcf0 	bl	8004b10 <_Bfree>
 8006130:	2300      	movs	r3, #0
 8006132:	702b      	strb	r3, [r5, #0]
 8006134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006136:	f10a 0001 	add.w	r0, sl, #1
 800613a:	6018      	str	r0, [r3, #0]
 800613c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800613e:	2b00      	cmp	r3, #0
 8006140:	f43f acd8 	beq.w	8005af4 <_dtoa_r+0xa4>
 8006144:	601d      	str	r5, [r3, #0]
 8006146:	e4d5      	b.n	8005af4 <_dtoa_r+0xa4>
 8006148:	f8cd a01c 	str.w	sl, [sp, #28]
 800614c:	462b      	mov	r3, r5
 800614e:	461d      	mov	r5, r3
 8006150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006154:	2a39      	cmp	r2, #57	; 0x39
 8006156:	d108      	bne.n	800616a <_dtoa_r+0x71a>
 8006158:	9a00      	ldr	r2, [sp, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d1f7      	bne.n	800614e <_dtoa_r+0x6fe>
 800615e:	9a07      	ldr	r2, [sp, #28]
 8006160:	9900      	ldr	r1, [sp, #0]
 8006162:	3201      	adds	r2, #1
 8006164:	9207      	str	r2, [sp, #28]
 8006166:	2230      	movs	r2, #48	; 0x30
 8006168:	700a      	strb	r2, [r1, #0]
 800616a:	781a      	ldrb	r2, [r3, #0]
 800616c:	3201      	adds	r2, #1
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	e78c      	b.n	800608c <_dtoa_r+0x63c>
 8006172:	4b7f      	ldr	r3, [pc, #508]	; (8006370 <_dtoa_r+0x920>)
 8006174:	2200      	movs	r2, #0
 8006176:	f7fa fa3f 	bl	80005f8 <__aeabi_dmul>
 800617a:	2200      	movs	r2, #0
 800617c:	2300      	movs	r3, #0
 800617e:	4606      	mov	r6, r0
 8006180:	460f      	mov	r7, r1
 8006182:	f7fa fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006186:	2800      	cmp	r0, #0
 8006188:	d09b      	beq.n	80060c2 <_dtoa_r+0x672>
 800618a:	e7cd      	b.n	8006128 <_dtoa_r+0x6d8>
 800618c:	9a08      	ldr	r2, [sp, #32]
 800618e:	2a00      	cmp	r2, #0
 8006190:	f000 80c4 	beq.w	800631c <_dtoa_r+0x8cc>
 8006194:	9a05      	ldr	r2, [sp, #20]
 8006196:	2a01      	cmp	r2, #1
 8006198:	f300 80a8 	bgt.w	80062ec <_dtoa_r+0x89c>
 800619c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800619e:	2a00      	cmp	r2, #0
 80061a0:	f000 80a0 	beq.w	80062e4 <_dtoa_r+0x894>
 80061a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061a8:	9e06      	ldr	r6, [sp, #24]
 80061aa:	4645      	mov	r5, r8
 80061ac:	9a04      	ldr	r2, [sp, #16]
 80061ae:	2101      	movs	r1, #1
 80061b0:	441a      	add	r2, r3
 80061b2:	4620      	mov	r0, r4
 80061b4:	4498      	add	r8, r3
 80061b6:	9204      	str	r2, [sp, #16]
 80061b8:	f7fe fd66 	bl	8004c88 <__i2b>
 80061bc:	4607      	mov	r7, r0
 80061be:	2d00      	cmp	r5, #0
 80061c0:	dd0b      	ble.n	80061da <_dtoa_r+0x78a>
 80061c2:	9b04      	ldr	r3, [sp, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dd08      	ble.n	80061da <_dtoa_r+0x78a>
 80061c8:	42ab      	cmp	r3, r5
 80061ca:	9a04      	ldr	r2, [sp, #16]
 80061cc:	bfa8      	it	ge
 80061ce:	462b      	movge	r3, r5
 80061d0:	eba8 0803 	sub.w	r8, r8, r3
 80061d4:	1aed      	subs	r5, r5, r3
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	9304      	str	r3, [sp, #16]
 80061da:	9b06      	ldr	r3, [sp, #24]
 80061dc:	b1fb      	cbz	r3, 800621e <_dtoa_r+0x7ce>
 80061de:	9b08      	ldr	r3, [sp, #32]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 809f 	beq.w	8006324 <_dtoa_r+0x8d4>
 80061e6:	2e00      	cmp	r6, #0
 80061e8:	dd11      	ble.n	800620e <_dtoa_r+0x7be>
 80061ea:	4639      	mov	r1, r7
 80061ec:	4632      	mov	r2, r6
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7fe fe06 	bl	8004e00 <__pow5mult>
 80061f4:	465a      	mov	r2, fp
 80061f6:	4601      	mov	r1, r0
 80061f8:	4607      	mov	r7, r0
 80061fa:	4620      	mov	r0, r4
 80061fc:	f7fe fd5a 	bl	8004cb4 <__multiply>
 8006200:	4659      	mov	r1, fp
 8006202:	9007      	str	r0, [sp, #28]
 8006204:	4620      	mov	r0, r4
 8006206:	f7fe fc83 	bl	8004b10 <_Bfree>
 800620a:	9b07      	ldr	r3, [sp, #28]
 800620c:	469b      	mov	fp, r3
 800620e:	9b06      	ldr	r3, [sp, #24]
 8006210:	1b9a      	subs	r2, r3, r6
 8006212:	d004      	beq.n	800621e <_dtoa_r+0x7ce>
 8006214:	4659      	mov	r1, fp
 8006216:	4620      	mov	r0, r4
 8006218:	f7fe fdf2 	bl	8004e00 <__pow5mult>
 800621c:	4683      	mov	fp, r0
 800621e:	2101      	movs	r1, #1
 8006220:	4620      	mov	r0, r4
 8006222:	f7fe fd31 	bl	8004c88 <__i2b>
 8006226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006228:	2b00      	cmp	r3, #0
 800622a:	4606      	mov	r6, r0
 800622c:	dd7c      	ble.n	8006328 <_dtoa_r+0x8d8>
 800622e:	461a      	mov	r2, r3
 8006230:	4601      	mov	r1, r0
 8006232:	4620      	mov	r0, r4
 8006234:	f7fe fde4 	bl	8004e00 <__pow5mult>
 8006238:	9b05      	ldr	r3, [sp, #20]
 800623a:	2b01      	cmp	r3, #1
 800623c:	4606      	mov	r6, r0
 800623e:	dd76      	ble.n	800632e <_dtoa_r+0x8de>
 8006240:	2300      	movs	r3, #0
 8006242:	9306      	str	r3, [sp, #24]
 8006244:	6933      	ldr	r3, [r6, #16]
 8006246:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800624a:	6918      	ldr	r0, [r3, #16]
 800624c:	f7fe fccc 	bl	8004be8 <__hi0bits>
 8006250:	f1c0 0020 	rsb	r0, r0, #32
 8006254:	9b04      	ldr	r3, [sp, #16]
 8006256:	4418      	add	r0, r3
 8006258:	f010 001f 	ands.w	r0, r0, #31
 800625c:	f000 8086 	beq.w	800636c <_dtoa_r+0x91c>
 8006260:	f1c0 0320 	rsb	r3, r0, #32
 8006264:	2b04      	cmp	r3, #4
 8006266:	dd7f      	ble.n	8006368 <_dtoa_r+0x918>
 8006268:	f1c0 001c 	rsb	r0, r0, #28
 800626c:	9b04      	ldr	r3, [sp, #16]
 800626e:	4403      	add	r3, r0
 8006270:	4480      	add	r8, r0
 8006272:	4405      	add	r5, r0
 8006274:	9304      	str	r3, [sp, #16]
 8006276:	f1b8 0f00 	cmp.w	r8, #0
 800627a:	dd05      	ble.n	8006288 <_dtoa_r+0x838>
 800627c:	4659      	mov	r1, fp
 800627e:	4642      	mov	r2, r8
 8006280:	4620      	mov	r0, r4
 8006282:	f7fe fe17 	bl	8004eb4 <__lshift>
 8006286:	4683      	mov	fp, r0
 8006288:	9b04      	ldr	r3, [sp, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	dd05      	ble.n	800629a <_dtoa_r+0x84a>
 800628e:	4631      	mov	r1, r6
 8006290:	461a      	mov	r2, r3
 8006292:	4620      	mov	r0, r4
 8006294:	f7fe fe0e 	bl	8004eb4 <__lshift>
 8006298:	4606      	mov	r6, r0
 800629a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800629c:	2b00      	cmp	r3, #0
 800629e:	d069      	beq.n	8006374 <_dtoa_r+0x924>
 80062a0:	4631      	mov	r1, r6
 80062a2:	4658      	mov	r0, fp
 80062a4:	f7fe fe72 	bl	8004f8c <__mcmp>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	da63      	bge.n	8006374 <_dtoa_r+0x924>
 80062ac:	2300      	movs	r3, #0
 80062ae:	4659      	mov	r1, fp
 80062b0:	220a      	movs	r2, #10
 80062b2:	4620      	mov	r0, r4
 80062b4:	f7fe fc4e 	bl	8004b54 <__multadd>
 80062b8:	9b08      	ldr	r3, [sp, #32]
 80062ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062be:	4683      	mov	fp, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 818f 	beq.w	80065e4 <_dtoa_r+0xb94>
 80062c6:	4639      	mov	r1, r7
 80062c8:	2300      	movs	r3, #0
 80062ca:	220a      	movs	r2, #10
 80062cc:	4620      	mov	r0, r4
 80062ce:	f7fe fc41 	bl	8004b54 <__multadd>
 80062d2:	f1b9 0f00 	cmp.w	r9, #0
 80062d6:	4607      	mov	r7, r0
 80062d8:	f300 808e 	bgt.w	80063f8 <_dtoa_r+0x9a8>
 80062dc:	9b05      	ldr	r3, [sp, #20]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	dc50      	bgt.n	8006384 <_dtoa_r+0x934>
 80062e2:	e089      	b.n	80063f8 <_dtoa_r+0x9a8>
 80062e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062ea:	e75d      	b.n	80061a8 <_dtoa_r+0x758>
 80062ec:	9b01      	ldr	r3, [sp, #4]
 80062ee:	1e5e      	subs	r6, r3, #1
 80062f0:	9b06      	ldr	r3, [sp, #24]
 80062f2:	42b3      	cmp	r3, r6
 80062f4:	bfbf      	itttt	lt
 80062f6:	9b06      	ldrlt	r3, [sp, #24]
 80062f8:	9606      	strlt	r6, [sp, #24]
 80062fa:	1af2      	sublt	r2, r6, r3
 80062fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80062fe:	bfb6      	itet	lt
 8006300:	189b      	addlt	r3, r3, r2
 8006302:	1b9e      	subge	r6, r3, r6
 8006304:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006306:	9b01      	ldr	r3, [sp, #4]
 8006308:	bfb8      	it	lt
 800630a:	2600      	movlt	r6, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	bfb5      	itete	lt
 8006310:	eba8 0503 	sublt.w	r5, r8, r3
 8006314:	9b01      	ldrge	r3, [sp, #4]
 8006316:	2300      	movlt	r3, #0
 8006318:	4645      	movge	r5, r8
 800631a:	e747      	b.n	80061ac <_dtoa_r+0x75c>
 800631c:	9e06      	ldr	r6, [sp, #24]
 800631e:	9f08      	ldr	r7, [sp, #32]
 8006320:	4645      	mov	r5, r8
 8006322:	e74c      	b.n	80061be <_dtoa_r+0x76e>
 8006324:	9a06      	ldr	r2, [sp, #24]
 8006326:	e775      	b.n	8006214 <_dtoa_r+0x7c4>
 8006328:	9b05      	ldr	r3, [sp, #20]
 800632a:	2b01      	cmp	r3, #1
 800632c:	dc18      	bgt.n	8006360 <_dtoa_r+0x910>
 800632e:	9b02      	ldr	r3, [sp, #8]
 8006330:	b9b3      	cbnz	r3, 8006360 <_dtoa_r+0x910>
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006338:	b9a3      	cbnz	r3, 8006364 <_dtoa_r+0x914>
 800633a:	9b03      	ldr	r3, [sp, #12]
 800633c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006340:	0d1b      	lsrs	r3, r3, #20
 8006342:	051b      	lsls	r3, r3, #20
 8006344:	b12b      	cbz	r3, 8006352 <_dtoa_r+0x902>
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	3301      	adds	r3, #1
 800634a:	9304      	str	r3, [sp, #16]
 800634c:	f108 0801 	add.w	r8, r8, #1
 8006350:	2301      	movs	r3, #1
 8006352:	9306      	str	r3, [sp, #24]
 8006354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006356:	2b00      	cmp	r3, #0
 8006358:	f47f af74 	bne.w	8006244 <_dtoa_r+0x7f4>
 800635c:	2001      	movs	r0, #1
 800635e:	e779      	b.n	8006254 <_dtoa_r+0x804>
 8006360:	2300      	movs	r3, #0
 8006362:	e7f6      	b.n	8006352 <_dtoa_r+0x902>
 8006364:	9b02      	ldr	r3, [sp, #8]
 8006366:	e7f4      	b.n	8006352 <_dtoa_r+0x902>
 8006368:	d085      	beq.n	8006276 <_dtoa_r+0x826>
 800636a:	4618      	mov	r0, r3
 800636c:	301c      	adds	r0, #28
 800636e:	e77d      	b.n	800626c <_dtoa_r+0x81c>
 8006370:	40240000 	.word	0x40240000
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	dc38      	bgt.n	80063ec <_dtoa_r+0x99c>
 800637a:	9b05      	ldr	r3, [sp, #20]
 800637c:	2b02      	cmp	r3, #2
 800637e:	dd35      	ble.n	80063ec <_dtoa_r+0x99c>
 8006380:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006384:	f1b9 0f00 	cmp.w	r9, #0
 8006388:	d10d      	bne.n	80063a6 <_dtoa_r+0x956>
 800638a:	4631      	mov	r1, r6
 800638c:	464b      	mov	r3, r9
 800638e:	2205      	movs	r2, #5
 8006390:	4620      	mov	r0, r4
 8006392:	f7fe fbdf 	bl	8004b54 <__multadd>
 8006396:	4601      	mov	r1, r0
 8006398:	4606      	mov	r6, r0
 800639a:	4658      	mov	r0, fp
 800639c:	f7fe fdf6 	bl	8004f8c <__mcmp>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	f73f adbd 	bgt.w	8005f20 <_dtoa_r+0x4d0>
 80063a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a8:	9d00      	ldr	r5, [sp, #0]
 80063aa:	ea6f 0a03 	mvn.w	sl, r3
 80063ae:	f04f 0800 	mov.w	r8, #0
 80063b2:	4631      	mov	r1, r6
 80063b4:	4620      	mov	r0, r4
 80063b6:	f7fe fbab 	bl	8004b10 <_Bfree>
 80063ba:	2f00      	cmp	r7, #0
 80063bc:	f43f aeb4 	beq.w	8006128 <_dtoa_r+0x6d8>
 80063c0:	f1b8 0f00 	cmp.w	r8, #0
 80063c4:	d005      	beq.n	80063d2 <_dtoa_r+0x982>
 80063c6:	45b8      	cmp	r8, r7
 80063c8:	d003      	beq.n	80063d2 <_dtoa_r+0x982>
 80063ca:	4641      	mov	r1, r8
 80063cc:	4620      	mov	r0, r4
 80063ce:	f7fe fb9f 	bl	8004b10 <_Bfree>
 80063d2:	4639      	mov	r1, r7
 80063d4:	4620      	mov	r0, r4
 80063d6:	f7fe fb9b 	bl	8004b10 <_Bfree>
 80063da:	e6a5      	b.n	8006128 <_dtoa_r+0x6d8>
 80063dc:	2600      	movs	r6, #0
 80063de:	4637      	mov	r7, r6
 80063e0:	e7e1      	b.n	80063a6 <_dtoa_r+0x956>
 80063e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80063e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80063e8:	4637      	mov	r7, r6
 80063ea:	e599      	b.n	8005f20 <_dtoa_r+0x4d0>
 80063ec:	9b08      	ldr	r3, [sp, #32]
 80063ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 80fd 	beq.w	80065f2 <_dtoa_r+0xba2>
 80063f8:	2d00      	cmp	r5, #0
 80063fa:	dd05      	ble.n	8006408 <_dtoa_r+0x9b8>
 80063fc:	4639      	mov	r1, r7
 80063fe:	462a      	mov	r2, r5
 8006400:	4620      	mov	r0, r4
 8006402:	f7fe fd57 	bl	8004eb4 <__lshift>
 8006406:	4607      	mov	r7, r0
 8006408:	9b06      	ldr	r3, [sp, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d05c      	beq.n	80064c8 <_dtoa_r+0xa78>
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	4620      	mov	r0, r4
 8006412:	f7fe fb3d 	bl	8004a90 <_Balloc>
 8006416:	4605      	mov	r5, r0
 8006418:	b928      	cbnz	r0, 8006426 <_dtoa_r+0x9d6>
 800641a:	4b80      	ldr	r3, [pc, #512]	; (800661c <_dtoa_r+0xbcc>)
 800641c:	4602      	mov	r2, r0
 800641e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006422:	f7ff bb2e 	b.w	8005a82 <_dtoa_r+0x32>
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	3202      	adds	r2, #2
 800642a:	0092      	lsls	r2, r2, #2
 800642c:	f107 010c 	add.w	r1, r7, #12
 8006430:	300c      	adds	r0, #12
 8006432:	f000 f913 	bl	800665c <memcpy>
 8006436:	2201      	movs	r2, #1
 8006438:	4629      	mov	r1, r5
 800643a:	4620      	mov	r0, r4
 800643c:	f7fe fd3a 	bl	8004eb4 <__lshift>
 8006440:	9b00      	ldr	r3, [sp, #0]
 8006442:	3301      	adds	r3, #1
 8006444:	9301      	str	r3, [sp, #4]
 8006446:	9b00      	ldr	r3, [sp, #0]
 8006448:	444b      	add	r3, r9
 800644a:	9307      	str	r3, [sp, #28]
 800644c:	9b02      	ldr	r3, [sp, #8]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	46b8      	mov	r8, r7
 8006454:	9306      	str	r3, [sp, #24]
 8006456:	4607      	mov	r7, r0
 8006458:	9b01      	ldr	r3, [sp, #4]
 800645a:	4631      	mov	r1, r6
 800645c:	3b01      	subs	r3, #1
 800645e:	4658      	mov	r0, fp
 8006460:	9302      	str	r3, [sp, #8]
 8006462:	f7ff fa67 	bl	8005934 <quorem>
 8006466:	4603      	mov	r3, r0
 8006468:	3330      	adds	r3, #48	; 0x30
 800646a:	9004      	str	r0, [sp, #16]
 800646c:	4641      	mov	r1, r8
 800646e:	4658      	mov	r0, fp
 8006470:	9308      	str	r3, [sp, #32]
 8006472:	f7fe fd8b 	bl	8004f8c <__mcmp>
 8006476:	463a      	mov	r2, r7
 8006478:	4681      	mov	r9, r0
 800647a:	4631      	mov	r1, r6
 800647c:	4620      	mov	r0, r4
 800647e:	f7fe fda1 	bl	8004fc4 <__mdiff>
 8006482:	68c2      	ldr	r2, [r0, #12]
 8006484:	9b08      	ldr	r3, [sp, #32]
 8006486:	4605      	mov	r5, r0
 8006488:	bb02      	cbnz	r2, 80064cc <_dtoa_r+0xa7c>
 800648a:	4601      	mov	r1, r0
 800648c:	4658      	mov	r0, fp
 800648e:	f7fe fd7d 	bl	8004f8c <__mcmp>
 8006492:	9b08      	ldr	r3, [sp, #32]
 8006494:	4602      	mov	r2, r0
 8006496:	4629      	mov	r1, r5
 8006498:	4620      	mov	r0, r4
 800649a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800649e:	f7fe fb37 	bl	8004b10 <_Bfree>
 80064a2:	9b05      	ldr	r3, [sp, #20]
 80064a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064a6:	9d01      	ldr	r5, [sp, #4]
 80064a8:	ea43 0102 	orr.w	r1, r3, r2
 80064ac:	9b06      	ldr	r3, [sp, #24]
 80064ae:	430b      	orrs	r3, r1
 80064b0:	9b08      	ldr	r3, [sp, #32]
 80064b2:	d10d      	bne.n	80064d0 <_dtoa_r+0xa80>
 80064b4:	2b39      	cmp	r3, #57	; 0x39
 80064b6:	d029      	beq.n	800650c <_dtoa_r+0xabc>
 80064b8:	f1b9 0f00 	cmp.w	r9, #0
 80064bc:	dd01      	ble.n	80064c2 <_dtoa_r+0xa72>
 80064be:	9b04      	ldr	r3, [sp, #16]
 80064c0:	3331      	adds	r3, #49	; 0x31
 80064c2:	9a02      	ldr	r2, [sp, #8]
 80064c4:	7013      	strb	r3, [r2, #0]
 80064c6:	e774      	b.n	80063b2 <_dtoa_r+0x962>
 80064c8:	4638      	mov	r0, r7
 80064ca:	e7b9      	b.n	8006440 <_dtoa_r+0x9f0>
 80064cc:	2201      	movs	r2, #1
 80064ce:	e7e2      	b.n	8006496 <_dtoa_r+0xa46>
 80064d0:	f1b9 0f00 	cmp.w	r9, #0
 80064d4:	db06      	blt.n	80064e4 <_dtoa_r+0xa94>
 80064d6:	9905      	ldr	r1, [sp, #20]
 80064d8:	ea41 0909 	orr.w	r9, r1, r9
 80064dc:	9906      	ldr	r1, [sp, #24]
 80064de:	ea59 0101 	orrs.w	r1, r9, r1
 80064e2:	d120      	bne.n	8006526 <_dtoa_r+0xad6>
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	ddec      	ble.n	80064c2 <_dtoa_r+0xa72>
 80064e8:	4659      	mov	r1, fp
 80064ea:	2201      	movs	r2, #1
 80064ec:	4620      	mov	r0, r4
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	f7fe fce0 	bl	8004eb4 <__lshift>
 80064f4:	4631      	mov	r1, r6
 80064f6:	4683      	mov	fp, r0
 80064f8:	f7fe fd48 	bl	8004f8c <__mcmp>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	9b01      	ldr	r3, [sp, #4]
 8006500:	dc02      	bgt.n	8006508 <_dtoa_r+0xab8>
 8006502:	d1de      	bne.n	80064c2 <_dtoa_r+0xa72>
 8006504:	07da      	lsls	r2, r3, #31
 8006506:	d5dc      	bpl.n	80064c2 <_dtoa_r+0xa72>
 8006508:	2b39      	cmp	r3, #57	; 0x39
 800650a:	d1d8      	bne.n	80064be <_dtoa_r+0xa6e>
 800650c:	9a02      	ldr	r2, [sp, #8]
 800650e:	2339      	movs	r3, #57	; 0x39
 8006510:	7013      	strb	r3, [r2, #0]
 8006512:	462b      	mov	r3, r5
 8006514:	461d      	mov	r5, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800651c:	2a39      	cmp	r2, #57	; 0x39
 800651e:	d050      	beq.n	80065c2 <_dtoa_r+0xb72>
 8006520:	3201      	adds	r2, #1
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	e745      	b.n	80063b2 <_dtoa_r+0x962>
 8006526:	2a00      	cmp	r2, #0
 8006528:	dd03      	ble.n	8006532 <_dtoa_r+0xae2>
 800652a:	2b39      	cmp	r3, #57	; 0x39
 800652c:	d0ee      	beq.n	800650c <_dtoa_r+0xabc>
 800652e:	3301      	adds	r3, #1
 8006530:	e7c7      	b.n	80064c2 <_dtoa_r+0xa72>
 8006532:	9a01      	ldr	r2, [sp, #4]
 8006534:	9907      	ldr	r1, [sp, #28]
 8006536:	f802 3c01 	strb.w	r3, [r2, #-1]
 800653a:	428a      	cmp	r2, r1
 800653c:	d02a      	beq.n	8006594 <_dtoa_r+0xb44>
 800653e:	4659      	mov	r1, fp
 8006540:	2300      	movs	r3, #0
 8006542:	220a      	movs	r2, #10
 8006544:	4620      	mov	r0, r4
 8006546:	f7fe fb05 	bl	8004b54 <__multadd>
 800654a:	45b8      	cmp	r8, r7
 800654c:	4683      	mov	fp, r0
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	f04f 020a 	mov.w	r2, #10
 8006556:	4641      	mov	r1, r8
 8006558:	4620      	mov	r0, r4
 800655a:	d107      	bne.n	800656c <_dtoa_r+0xb1c>
 800655c:	f7fe fafa 	bl	8004b54 <__multadd>
 8006560:	4680      	mov	r8, r0
 8006562:	4607      	mov	r7, r0
 8006564:	9b01      	ldr	r3, [sp, #4]
 8006566:	3301      	adds	r3, #1
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	e775      	b.n	8006458 <_dtoa_r+0xa08>
 800656c:	f7fe faf2 	bl	8004b54 <__multadd>
 8006570:	4639      	mov	r1, r7
 8006572:	4680      	mov	r8, r0
 8006574:	2300      	movs	r3, #0
 8006576:	220a      	movs	r2, #10
 8006578:	4620      	mov	r0, r4
 800657a:	f7fe faeb 	bl	8004b54 <__multadd>
 800657e:	4607      	mov	r7, r0
 8006580:	e7f0      	b.n	8006564 <_dtoa_r+0xb14>
 8006582:	f1b9 0f00 	cmp.w	r9, #0
 8006586:	9a00      	ldr	r2, [sp, #0]
 8006588:	bfcc      	ite	gt
 800658a:	464d      	movgt	r5, r9
 800658c:	2501      	movle	r5, #1
 800658e:	4415      	add	r5, r2
 8006590:	f04f 0800 	mov.w	r8, #0
 8006594:	4659      	mov	r1, fp
 8006596:	2201      	movs	r2, #1
 8006598:	4620      	mov	r0, r4
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	f7fe fc8a 	bl	8004eb4 <__lshift>
 80065a0:	4631      	mov	r1, r6
 80065a2:	4683      	mov	fp, r0
 80065a4:	f7fe fcf2 	bl	8004f8c <__mcmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	dcb2      	bgt.n	8006512 <_dtoa_r+0xac2>
 80065ac:	d102      	bne.n	80065b4 <_dtoa_r+0xb64>
 80065ae:	9b01      	ldr	r3, [sp, #4]
 80065b0:	07db      	lsls	r3, r3, #31
 80065b2:	d4ae      	bmi.n	8006512 <_dtoa_r+0xac2>
 80065b4:	462b      	mov	r3, r5
 80065b6:	461d      	mov	r5, r3
 80065b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065bc:	2a30      	cmp	r2, #48	; 0x30
 80065be:	d0fa      	beq.n	80065b6 <_dtoa_r+0xb66>
 80065c0:	e6f7      	b.n	80063b2 <_dtoa_r+0x962>
 80065c2:	9a00      	ldr	r2, [sp, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d1a5      	bne.n	8006514 <_dtoa_r+0xac4>
 80065c8:	f10a 0a01 	add.w	sl, sl, #1
 80065cc:	2331      	movs	r3, #49	; 0x31
 80065ce:	e779      	b.n	80064c4 <_dtoa_r+0xa74>
 80065d0:	4b13      	ldr	r3, [pc, #76]	; (8006620 <_dtoa_r+0xbd0>)
 80065d2:	f7ff baaf 	b.w	8005b34 <_dtoa_r+0xe4>
 80065d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f47f aa86 	bne.w	8005aea <_dtoa_r+0x9a>
 80065de:	4b11      	ldr	r3, [pc, #68]	; (8006624 <_dtoa_r+0xbd4>)
 80065e0:	f7ff baa8 	b.w	8005b34 <_dtoa_r+0xe4>
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	dc03      	bgt.n	80065f2 <_dtoa_r+0xba2>
 80065ea:	9b05      	ldr	r3, [sp, #20]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	f73f aec9 	bgt.w	8006384 <_dtoa_r+0x934>
 80065f2:	9d00      	ldr	r5, [sp, #0]
 80065f4:	4631      	mov	r1, r6
 80065f6:	4658      	mov	r0, fp
 80065f8:	f7ff f99c 	bl	8005934 <quorem>
 80065fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006600:	f805 3b01 	strb.w	r3, [r5], #1
 8006604:	9a00      	ldr	r2, [sp, #0]
 8006606:	1aaa      	subs	r2, r5, r2
 8006608:	4591      	cmp	r9, r2
 800660a:	ddba      	ble.n	8006582 <_dtoa_r+0xb32>
 800660c:	4659      	mov	r1, fp
 800660e:	2300      	movs	r3, #0
 8006610:	220a      	movs	r2, #10
 8006612:	4620      	mov	r0, r4
 8006614:	f7fe fa9e 	bl	8004b54 <__multadd>
 8006618:	4683      	mov	fp, r0
 800661a:	e7eb      	b.n	80065f4 <_dtoa_r+0xba4>
 800661c:	08007293 	.word	0x08007293
 8006620:	08007420 	.word	0x08007420
 8006624:	08007413 	.word	0x08007413

08006628 <fiprintf>:
 8006628:	b40e      	push	{r1, r2, r3}
 800662a:	b503      	push	{r0, r1, lr}
 800662c:	4601      	mov	r1, r0
 800662e:	ab03      	add	r3, sp, #12
 8006630:	4805      	ldr	r0, [pc, #20]	; (8006648 <fiprintf+0x20>)
 8006632:	f853 2b04 	ldr.w	r2, [r3], #4
 8006636:	6800      	ldr	r0, [r0, #0]
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	f000 f8c5 	bl	80067c8 <_vfiprintf_r>
 800663e:	b002      	add	sp, #8
 8006640:	f85d eb04 	ldr.w	lr, [sp], #4
 8006644:	b003      	add	sp, #12
 8006646:	4770      	bx	lr
 8006648:	2000000c 	.word	0x2000000c

0800664c <malloc>:
 800664c:	4b02      	ldr	r3, [pc, #8]	; (8006658 <malloc+0xc>)
 800664e:	4601      	mov	r1, r0
 8006650:	6818      	ldr	r0, [r3, #0]
 8006652:	f7fe bdc9 	b.w	80051e8 <_malloc_r>
 8006656:	bf00      	nop
 8006658:	2000000c 	.word	0x2000000c

0800665c <memcpy>:
 800665c:	440a      	add	r2, r1
 800665e:	4291      	cmp	r1, r2
 8006660:	f100 33ff 	add.w	r3, r0, #4294967295
 8006664:	d100      	bne.n	8006668 <memcpy+0xc>
 8006666:	4770      	bx	lr
 8006668:	b510      	push	{r4, lr}
 800666a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800666e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006672:	4291      	cmp	r1, r2
 8006674:	d1f9      	bne.n	800666a <memcpy+0xe>
 8006676:	bd10      	pop	{r4, pc}

08006678 <memmove>:
 8006678:	4288      	cmp	r0, r1
 800667a:	b510      	push	{r4, lr}
 800667c:	eb01 0402 	add.w	r4, r1, r2
 8006680:	d902      	bls.n	8006688 <memmove+0x10>
 8006682:	4284      	cmp	r4, r0
 8006684:	4623      	mov	r3, r4
 8006686:	d807      	bhi.n	8006698 <memmove+0x20>
 8006688:	1e43      	subs	r3, r0, #1
 800668a:	42a1      	cmp	r1, r4
 800668c:	d008      	beq.n	80066a0 <memmove+0x28>
 800668e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006692:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006696:	e7f8      	b.n	800668a <memmove+0x12>
 8006698:	4402      	add	r2, r0
 800669a:	4601      	mov	r1, r0
 800669c:	428a      	cmp	r2, r1
 800669e:	d100      	bne.n	80066a2 <memmove+0x2a>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066aa:	e7f7      	b.n	800669c <memmove+0x24>

080066ac <__malloc_lock>:
 80066ac:	4801      	ldr	r0, [pc, #4]	; (80066b4 <__malloc_lock+0x8>)
 80066ae:	f000 bc3b 	b.w	8006f28 <__retarget_lock_acquire_recursive>
 80066b2:	bf00      	nop
 80066b4:	200001e8 	.word	0x200001e8

080066b8 <__malloc_unlock>:
 80066b8:	4801      	ldr	r0, [pc, #4]	; (80066c0 <__malloc_unlock+0x8>)
 80066ba:	f000 bc36 	b.w	8006f2a <__retarget_lock_release_recursive>
 80066be:	bf00      	nop
 80066c0:	200001e8 	.word	0x200001e8

080066c4 <_free_r>:
 80066c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066c6:	2900      	cmp	r1, #0
 80066c8:	d048      	beq.n	800675c <_free_r+0x98>
 80066ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066ce:	9001      	str	r0, [sp, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f1a1 0404 	sub.w	r4, r1, #4
 80066d6:	bfb8      	it	lt
 80066d8:	18e4      	addlt	r4, r4, r3
 80066da:	f7ff ffe7 	bl	80066ac <__malloc_lock>
 80066de:	4a20      	ldr	r2, [pc, #128]	; (8006760 <_free_r+0x9c>)
 80066e0:	9801      	ldr	r0, [sp, #4]
 80066e2:	6813      	ldr	r3, [r2, #0]
 80066e4:	4615      	mov	r5, r2
 80066e6:	b933      	cbnz	r3, 80066f6 <_free_r+0x32>
 80066e8:	6063      	str	r3, [r4, #4]
 80066ea:	6014      	str	r4, [r2, #0]
 80066ec:	b003      	add	sp, #12
 80066ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066f2:	f7ff bfe1 	b.w	80066b8 <__malloc_unlock>
 80066f6:	42a3      	cmp	r3, r4
 80066f8:	d90b      	bls.n	8006712 <_free_r+0x4e>
 80066fa:	6821      	ldr	r1, [r4, #0]
 80066fc:	1862      	adds	r2, r4, r1
 80066fe:	4293      	cmp	r3, r2
 8006700:	bf04      	itt	eq
 8006702:	681a      	ldreq	r2, [r3, #0]
 8006704:	685b      	ldreq	r3, [r3, #4]
 8006706:	6063      	str	r3, [r4, #4]
 8006708:	bf04      	itt	eq
 800670a:	1852      	addeq	r2, r2, r1
 800670c:	6022      	streq	r2, [r4, #0]
 800670e:	602c      	str	r4, [r5, #0]
 8006710:	e7ec      	b.n	80066ec <_free_r+0x28>
 8006712:	461a      	mov	r2, r3
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	b10b      	cbz	r3, 800671c <_free_r+0x58>
 8006718:	42a3      	cmp	r3, r4
 800671a:	d9fa      	bls.n	8006712 <_free_r+0x4e>
 800671c:	6811      	ldr	r1, [r2, #0]
 800671e:	1855      	adds	r5, r2, r1
 8006720:	42a5      	cmp	r5, r4
 8006722:	d10b      	bne.n	800673c <_free_r+0x78>
 8006724:	6824      	ldr	r4, [r4, #0]
 8006726:	4421      	add	r1, r4
 8006728:	1854      	adds	r4, r2, r1
 800672a:	42a3      	cmp	r3, r4
 800672c:	6011      	str	r1, [r2, #0]
 800672e:	d1dd      	bne.n	80066ec <_free_r+0x28>
 8006730:	681c      	ldr	r4, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	6053      	str	r3, [r2, #4]
 8006736:	4421      	add	r1, r4
 8006738:	6011      	str	r1, [r2, #0]
 800673a:	e7d7      	b.n	80066ec <_free_r+0x28>
 800673c:	d902      	bls.n	8006744 <_free_r+0x80>
 800673e:	230c      	movs	r3, #12
 8006740:	6003      	str	r3, [r0, #0]
 8006742:	e7d3      	b.n	80066ec <_free_r+0x28>
 8006744:	6825      	ldr	r5, [r4, #0]
 8006746:	1961      	adds	r1, r4, r5
 8006748:	428b      	cmp	r3, r1
 800674a:	bf04      	itt	eq
 800674c:	6819      	ldreq	r1, [r3, #0]
 800674e:	685b      	ldreq	r3, [r3, #4]
 8006750:	6063      	str	r3, [r4, #4]
 8006752:	bf04      	itt	eq
 8006754:	1949      	addeq	r1, r1, r5
 8006756:	6021      	streq	r1, [r4, #0]
 8006758:	6054      	str	r4, [r2, #4]
 800675a:	e7c7      	b.n	80066ec <_free_r+0x28>
 800675c:	b003      	add	sp, #12
 800675e:	bd30      	pop	{r4, r5, pc}
 8006760:	20000098 	.word	0x20000098

08006764 <_malloc_usable_size_r>:
 8006764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006768:	1f18      	subs	r0, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	bfbc      	itt	lt
 800676e:	580b      	ldrlt	r3, [r1, r0]
 8006770:	18c0      	addlt	r0, r0, r3
 8006772:	4770      	bx	lr

08006774 <__sfputc_r>:
 8006774:	6893      	ldr	r3, [r2, #8]
 8006776:	3b01      	subs	r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	b410      	push	{r4}
 800677c:	6093      	str	r3, [r2, #8]
 800677e:	da08      	bge.n	8006792 <__sfputc_r+0x1e>
 8006780:	6994      	ldr	r4, [r2, #24]
 8006782:	42a3      	cmp	r3, r4
 8006784:	db01      	blt.n	800678a <__sfputc_r+0x16>
 8006786:	290a      	cmp	r1, #10
 8006788:	d103      	bne.n	8006792 <__sfputc_r+0x1e>
 800678a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800678e:	f000 b94b 	b.w	8006a28 <__swbuf_r>
 8006792:	6813      	ldr	r3, [r2, #0]
 8006794:	1c58      	adds	r0, r3, #1
 8006796:	6010      	str	r0, [r2, #0]
 8006798:	7019      	strb	r1, [r3, #0]
 800679a:	4608      	mov	r0, r1
 800679c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <__sfputs_r>:
 80067a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a4:	4606      	mov	r6, r0
 80067a6:	460f      	mov	r7, r1
 80067a8:	4614      	mov	r4, r2
 80067aa:	18d5      	adds	r5, r2, r3
 80067ac:	42ac      	cmp	r4, r5
 80067ae:	d101      	bne.n	80067b4 <__sfputs_r+0x12>
 80067b0:	2000      	movs	r0, #0
 80067b2:	e007      	b.n	80067c4 <__sfputs_r+0x22>
 80067b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b8:	463a      	mov	r2, r7
 80067ba:	4630      	mov	r0, r6
 80067bc:	f7ff ffda 	bl	8006774 <__sfputc_r>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d1f3      	bne.n	80067ac <__sfputs_r+0xa>
 80067c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067c8 <_vfiprintf_r>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	460d      	mov	r5, r1
 80067ce:	b09d      	sub	sp, #116	; 0x74
 80067d0:	4614      	mov	r4, r2
 80067d2:	4698      	mov	r8, r3
 80067d4:	4606      	mov	r6, r0
 80067d6:	b118      	cbz	r0, 80067e0 <_vfiprintf_r+0x18>
 80067d8:	6983      	ldr	r3, [r0, #24]
 80067da:	b90b      	cbnz	r3, 80067e0 <_vfiprintf_r+0x18>
 80067dc:	f000 fb06 	bl	8006dec <__sinit>
 80067e0:	4b89      	ldr	r3, [pc, #548]	; (8006a08 <_vfiprintf_r+0x240>)
 80067e2:	429d      	cmp	r5, r3
 80067e4:	d11b      	bne.n	800681e <_vfiprintf_r+0x56>
 80067e6:	6875      	ldr	r5, [r6, #4]
 80067e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067ea:	07d9      	lsls	r1, r3, #31
 80067ec:	d405      	bmi.n	80067fa <_vfiprintf_r+0x32>
 80067ee:	89ab      	ldrh	r3, [r5, #12]
 80067f0:	059a      	lsls	r2, r3, #22
 80067f2:	d402      	bmi.n	80067fa <_vfiprintf_r+0x32>
 80067f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067f6:	f000 fb97 	bl	8006f28 <__retarget_lock_acquire_recursive>
 80067fa:	89ab      	ldrh	r3, [r5, #12]
 80067fc:	071b      	lsls	r3, r3, #28
 80067fe:	d501      	bpl.n	8006804 <_vfiprintf_r+0x3c>
 8006800:	692b      	ldr	r3, [r5, #16]
 8006802:	b9eb      	cbnz	r3, 8006840 <_vfiprintf_r+0x78>
 8006804:	4629      	mov	r1, r5
 8006806:	4630      	mov	r0, r6
 8006808:	f000 f960 	bl	8006acc <__swsetup_r>
 800680c:	b1c0      	cbz	r0, 8006840 <_vfiprintf_r+0x78>
 800680e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006810:	07dc      	lsls	r4, r3, #31
 8006812:	d50e      	bpl.n	8006832 <_vfiprintf_r+0x6a>
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	b01d      	add	sp, #116	; 0x74
 800681a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681e:	4b7b      	ldr	r3, [pc, #492]	; (8006a0c <_vfiprintf_r+0x244>)
 8006820:	429d      	cmp	r5, r3
 8006822:	d101      	bne.n	8006828 <_vfiprintf_r+0x60>
 8006824:	68b5      	ldr	r5, [r6, #8]
 8006826:	e7df      	b.n	80067e8 <_vfiprintf_r+0x20>
 8006828:	4b79      	ldr	r3, [pc, #484]	; (8006a10 <_vfiprintf_r+0x248>)
 800682a:	429d      	cmp	r5, r3
 800682c:	bf08      	it	eq
 800682e:	68f5      	ldreq	r5, [r6, #12]
 8006830:	e7da      	b.n	80067e8 <_vfiprintf_r+0x20>
 8006832:	89ab      	ldrh	r3, [r5, #12]
 8006834:	0598      	lsls	r0, r3, #22
 8006836:	d4ed      	bmi.n	8006814 <_vfiprintf_r+0x4c>
 8006838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800683a:	f000 fb76 	bl	8006f2a <__retarget_lock_release_recursive>
 800683e:	e7e9      	b.n	8006814 <_vfiprintf_r+0x4c>
 8006840:	2300      	movs	r3, #0
 8006842:	9309      	str	r3, [sp, #36]	; 0x24
 8006844:	2320      	movs	r3, #32
 8006846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800684a:	f8cd 800c 	str.w	r8, [sp, #12]
 800684e:	2330      	movs	r3, #48	; 0x30
 8006850:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a14 <_vfiprintf_r+0x24c>
 8006854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006858:	f04f 0901 	mov.w	r9, #1
 800685c:	4623      	mov	r3, r4
 800685e:	469a      	mov	sl, r3
 8006860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006864:	b10a      	cbz	r2, 800686a <_vfiprintf_r+0xa2>
 8006866:	2a25      	cmp	r2, #37	; 0x25
 8006868:	d1f9      	bne.n	800685e <_vfiprintf_r+0x96>
 800686a:	ebba 0b04 	subs.w	fp, sl, r4
 800686e:	d00b      	beq.n	8006888 <_vfiprintf_r+0xc0>
 8006870:	465b      	mov	r3, fp
 8006872:	4622      	mov	r2, r4
 8006874:	4629      	mov	r1, r5
 8006876:	4630      	mov	r0, r6
 8006878:	f7ff ff93 	bl	80067a2 <__sfputs_r>
 800687c:	3001      	adds	r0, #1
 800687e:	f000 80aa 	beq.w	80069d6 <_vfiprintf_r+0x20e>
 8006882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006884:	445a      	add	r2, fp
 8006886:	9209      	str	r2, [sp, #36]	; 0x24
 8006888:	f89a 3000 	ldrb.w	r3, [sl]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 80a2 	beq.w	80069d6 <_vfiprintf_r+0x20e>
 8006892:	2300      	movs	r3, #0
 8006894:	f04f 32ff 	mov.w	r2, #4294967295
 8006898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800689c:	f10a 0a01 	add.w	sl, sl, #1
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	9307      	str	r3, [sp, #28]
 80068a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068a8:	931a      	str	r3, [sp, #104]	; 0x68
 80068aa:	4654      	mov	r4, sl
 80068ac:	2205      	movs	r2, #5
 80068ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b2:	4858      	ldr	r0, [pc, #352]	; (8006a14 <_vfiprintf_r+0x24c>)
 80068b4:	f7f9 fc94 	bl	80001e0 <memchr>
 80068b8:	9a04      	ldr	r2, [sp, #16]
 80068ba:	b9d8      	cbnz	r0, 80068f4 <_vfiprintf_r+0x12c>
 80068bc:	06d1      	lsls	r1, r2, #27
 80068be:	bf44      	itt	mi
 80068c0:	2320      	movmi	r3, #32
 80068c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068c6:	0713      	lsls	r3, r2, #28
 80068c8:	bf44      	itt	mi
 80068ca:	232b      	movmi	r3, #43	; 0x2b
 80068cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d0:	f89a 3000 	ldrb.w	r3, [sl]
 80068d4:	2b2a      	cmp	r3, #42	; 0x2a
 80068d6:	d015      	beq.n	8006904 <_vfiprintf_r+0x13c>
 80068d8:	9a07      	ldr	r2, [sp, #28]
 80068da:	4654      	mov	r4, sl
 80068dc:	2000      	movs	r0, #0
 80068de:	f04f 0c0a 	mov.w	ip, #10
 80068e2:	4621      	mov	r1, r4
 80068e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068e8:	3b30      	subs	r3, #48	; 0x30
 80068ea:	2b09      	cmp	r3, #9
 80068ec:	d94e      	bls.n	800698c <_vfiprintf_r+0x1c4>
 80068ee:	b1b0      	cbz	r0, 800691e <_vfiprintf_r+0x156>
 80068f0:	9207      	str	r2, [sp, #28]
 80068f2:	e014      	b.n	800691e <_vfiprintf_r+0x156>
 80068f4:	eba0 0308 	sub.w	r3, r0, r8
 80068f8:	fa09 f303 	lsl.w	r3, r9, r3
 80068fc:	4313      	orrs	r3, r2
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	46a2      	mov	sl, r4
 8006902:	e7d2      	b.n	80068aa <_vfiprintf_r+0xe2>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	1d19      	adds	r1, r3, #4
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	9103      	str	r1, [sp, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	bfbb      	ittet	lt
 8006910:	425b      	neglt	r3, r3
 8006912:	f042 0202 	orrlt.w	r2, r2, #2
 8006916:	9307      	strge	r3, [sp, #28]
 8006918:	9307      	strlt	r3, [sp, #28]
 800691a:	bfb8      	it	lt
 800691c:	9204      	strlt	r2, [sp, #16]
 800691e:	7823      	ldrb	r3, [r4, #0]
 8006920:	2b2e      	cmp	r3, #46	; 0x2e
 8006922:	d10c      	bne.n	800693e <_vfiprintf_r+0x176>
 8006924:	7863      	ldrb	r3, [r4, #1]
 8006926:	2b2a      	cmp	r3, #42	; 0x2a
 8006928:	d135      	bne.n	8006996 <_vfiprintf_r+0x1ce>
 800692a:	9b03      	ldr	r3, [sp, #12]
 800692c:	1d1a      	adds	r2, r3, #4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	9203      	str	r2, [sp, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	bfb8      	it	lt
 8006936:	f04f 33ff 	movlt.w	r3, #4294967295
 800693a:	3402      	adds	r4, #2
 800693c:	9305      	str	r3, [sp, #20]
 800693e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a24 <_vfiprintf_r+0x25c>
 8006942:	7821      	ldrb	r1, [r4, #0]
 8006944:	2203      	movs	r2, #3
 8006946:	4650      	mov	r0, sl
 8006948:	f7f9 fc4a 	bl	80001e0 <memchr>
 800694c:	b140      	cbz	r0, 8006960 <_vfiprintf_r+0x198>
 800694e:	2340      	movs	r3, #64	; 0x40
 8006950:	eba0 000a 	sub.w	r0, r0, sl
 8006954:	fa03 f000 	lsl.w	r0, r3, r0
 8006958:	9b04      	ldr	r3, [sp, #16]
 800695a:	4303      	orrs	r3, r0
 800695c:	3401      	adds	r4, #1
 800695e:	9304      	str	r3, [sp, #16]
 8006960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006964:	482c      	ldr	r0, [pc, #176]	; (8006a18 <_vfiprintf_r+0x250>)
 8006966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800696a:	2206      	movs	r2, #6
 800696c:	f7f9 fc38 	bl	80001e0 <memchr>
 8006970:	2800      	cmp	r0, #0
 8006972:	d03f      	beq.n	80069f4 <_vfiprintf_r+0x22c>
 8006974:	4b29      	ldr	r3, [pc, #164]	; (8006a1c <_vfiprintf_r+0x254>)
 8006976:	bb1b      	cbnz	r3, 80069c0 <_vfiprintf_r+0x1f8>
 8006978:	9b03      	ldr	r3, [sp, #12]
 800697a:	3307      	adds	r3, #7
 800697c:	f023 0307 	bic.w	r3, r3, #7
 8006980:	3308      	adds	r3, #8
 8006982:	9303      	str	r3, [sp, #12]
 8006984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006986:	443b      	add	r3, r7
 8006988:	9309      	str	r3, [sp, #36]	; 0x24
 800698a:	e767      	b.n	800685c <_vfiprintf_r+0x94>
 800698c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006990:	460c      	mov	r4, r1
 8006992:	2001      	movs	r0, #1
 8006994:	e7a5      	b.n	80068e2 <_vfiprintf_r+0x11a>
 8006996:	2300      	movs	r3, #0
 8006998:	3401      	adds	r4, #1
 800699a:	9305      	str	r3, [sp, #20]
 800699c:	4619      	mov	r1, r3
 800699e:	f04f 0c0a 	mov.w	ip, #10
 80069a2:	4620      	mov	r0, r4
 80069a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069a8:	3a30      	subs	r2, #48	; 0x30
 80069aa:	2a09      	cmp	r2, #9
 80069ac:	d903      	bls.n	80069b6 <_vfiprintf_r+0x1ee>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0c5      	beq.n	800693e <_vfiprintf_r+0x176>
 80069b2:	9105      	str	r1, [sp, #20]
 80069b4:	e7c3      	b.n	800693e <_vfiprintf_r+0x176>
 80069b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80069ba:	4604      	mov	r4, r0
 80069bc:	2301      	movs	r3, #1
 80069be:	e7f0      	b.n	80069a2 <_vfiprintf_r+0x1da>
 80069c0:	ab03      	add	r3, sp, #12
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	462a      	mov	r2, r5
 80069c6:	4b16      	ldr	r3, [pc, #88]	; (8006a20 <_vfiprintf_r+0x258>)
 80069c8:	a904      	add	r1, sp, #16
 80069ca:	4630      	mov	r0, r6
 80069cc:	f3af 8000 	nop.w
 80069d0:	4607      	mov	r7, r0
 80069d2:	1c78      	adds	r0, r7, #1
 80069d4:	d1d6      	bne.n	8006984 <_vfiprintf_r+0x1bc>
 80069d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069d8:	07d9      	lsls	r1, r3, #31
 80069da:	d405      	bmi.n	80069e8 <_vfiprintf_r+0x220>
 80069dc:	89ab      	ldrh	r3, [r5, #12]
 80069de:	059a      	lsls	r2, r3, #22
 80069e0:	d402      	bmi.n	80069e8 <_vfiprintf_r+0x220>
 80069e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069e4:	f000 faa1 	bl	8006f2a <__retarget_lock_release_recursive>
 80069e8:	89ab      	ldrh	r3, [r5, #12]
 80069ea:	065b      	lsls	r3, r3, #25
 80069ec:	f53f af12 	bmi.w	8006814 <_vfiprintf_r+0x4c>
 80069f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069f2:	e711      	b.n	8006818 <_vfiprintf_r+0x50>
 80069f4:	ab03      	add	r3, sp, #12
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	462a      	mov	r2, r5
 80069fa:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <_vfiprintf_r+0x258>)
 80069fc:	a904      	add	r1, sp, #16
 80069fe:	4630      	mov	r0, r6
 8006a00:	f7fe fe3c 	bl	800567c <_printf_i>
 8006a04:	e7e4      	b.n	80069d0 <_vfiprintf_r+0x208>
 8006a06:	bf00      	nop
 8006a08:	080074a4 	.word	0x080074a4
 8006a0c:	080074c4 	.word	0x080074c4
 8006a10:	08007484 	.word	0x08007484
 8006a14:	080073a4 	.word	0x080073a4
 8006a18:	080073ae 	.word	0x080073ae
 8006a1c:	00000000 	.word	0x00000000
 8006a20:	080067a3 	.word	0x080067a3
 8006a24:	080073aa 	.word	0x080073aa

08006a28 <__swbuf_r>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	460e      	mov	r6, r1
 8006a2c:	4614      	mov	r4, r2
 8006a2e:	4605      	mov	r5, r0
 8006a30:	b118      	cbz	r0, 8006a3a <__swbuf_r+0x12>
 8006a32:	6983      	ldr	r3, [r0, #24]
 8006a34:	b90b      	cbnz	r3, 8006a3a <__swbuf_r+0x12>
 8006a36:	f000 f9d9 	bl	8006dec <__sinit>
 8006a3a:	4b21      	ldr	r3, [pc, #132]	; (8006ac0 <__swbuf_r+0x98>)
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	d12b      	bne.n	8006a98 <__swbuf_r+0x70>
 8006a40:	686c      	ldr	r4, [r5, #4]
 8006a42:	69a3      	ldr	r3, [r4, #24]
 8006a44:	60a3      	str	r3, [r4, #8]
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	071a      	lsls	r2, r3, #28
 8006a4a:	d52f      	bpl.n	8006aac <__swbuf_r+0x84>
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	b36b      	cbz	r3, 8006aac <__swbuf_r+0x84>
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	6820      	ldr	r0, [r4, #0]
 8006a54:	1ac0      	subs	r0, r0, r3
 8006a56:	6963      	ldr	r3, [r4, #20]
 8006a58:	b2f6      	uxtb	r6, r6
 8006a5a:	4283      	cmp	r3, r0
 8006a5c:	4637      	mov	r7, r6
 8006a5e:	dc04      	bgt.n	8006a6a <__swbuf_r+0x42>
 8006a60:	4621      	mov	r1, r4
 8006a62:	4628      	mov	r0, r5
 8006a64:	f000 f92e 	bl	8006cc4 <_fflush_r>
 8006a68:	bb30      	cbnz	r0, 8006ab8 <__swbuf_r+0x90>
 8006a6a:	68a3      	ldr	r3, [r4, #8]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	60a3      	str	r3, [r4, #8]
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	6022      	str	r2, [r4, #0]
 8006a76:	701e      	strb	r6, [r3, #0]
 8006a78:	6963      	ldr	r3, [r4, #20]
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	4283      	cmp	r3, r0
 8006a7e:	d004      	beq.n	8006a8a <__swbuf_r+0x62>
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	07db      	lsls	r3, r3, #31
 8006a84:	d506      	bpl.n	8006a94 <__swbuf_r+0x6c>
 8006a86:	2e0a      	cmp	r6, #10
 8006a88:	d104      	bne.n	8006a94 <__swbuf_r+0x6c>
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f000 f919 	bl	8006cc4 <_fflush_r>
 8006a92:	b988      	cbnz	r0, 8006ab8 <__swbuf_r+0x90>
 8006a94:	4638      	mov	r0, r7
 8006a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a98:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <__swbuf_r+0x9c>)
 8006a9a:	429c      	cmp	r4, r3
 8006a9c:	d101      	bne.n	8006aa2 <__swbuf_r+0x7a>
 8006a9e:	68ac      	ldr	r4, [r5, #8]
 8006aa0:	e7cf      	b.n	8006a42 <__swbuf_r+0x1a>
 8006aa2:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <__swbuf_r+0xa0>)
 8006aa4:	429c      	cmp	r4, r3
 8006aa6:	bf08      	it	eq
 8006aa8:	68ec      	ldreq	r4, [r5, #12]
 8006aaa:	e7ca      	b.n	8006a42 <__swbuf_r+0x1a>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 f80c 	bl	8006acc <__swsetup_r>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d0cb      	beq.n	8006a50 <__swbuf_r+0x28>
 8006ab8:	f04f 37ff 	mov.w	r7, #4294967295
 8006abc:	e7ea      	b.n	8006a94 <__swbuf_r+0x6c>
 8006abe:	bf00      	nop
 8006ac0:	080074a4 	.word	0x080074a4
 8006ac4:	080074c4 	.word	0x080074c4
 8006ac8:	08007484 	.word	0x08007484

08006acc <__swsetup_r>:
 8006acc:	4b32      	ldr	r3, [pc, #200]	; (8006b98 <__swsetup_r+0xcc>)
 8006ace:	b570      	push	{r4, r5, r6, lr}
 8006ad0:	681d      	ldr	r5, [r3, #0]
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	b125      	cbz	r5, 8006ae2 <__swsetup_r+0x16>
 8006ad8:	69ab      	ldr	r3, [r5, #24]
 8006ada:	b913      	cbnz	r3, 8006ae2 <__swsetup_r+0x16>
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 f985 	bl	8006dec <__sinit>
 8006ae2:	4b2e      	ldr	r3, [pc, #184]	; (8006b9c <__swsetup_r+0xd0>)
 8006ae4:	429c      	cmp	r4, r3
 8006ae6:	d10f      	bne.n	8006b08 <__swsetup_r+0x3c>
 8006ae8:	686c      	ldr	r4, [r5, #4]
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006af0:	0719      	lsls	r1, r3, #28
 8006af2:	d42c      	bmi.n	8006b4e <__swsetup_r+0x82>
 8006af4:	06dd      	lsls	r5, r3, #27
 8006af6:	d411      	bmi.n	8006b1c <__swsetup_r+0x50>
 8006af8:	2309      	movs	r3, #9
 8006afa:	6033      	str	r3, [r6, #0]
 8006afc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b00:	81a3      	strh	r3, [r4, #12]
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295
 8006b06:	e03e      	b.n	8006b86 <__swsetup_r+0xba>
 8006b08:	4b25      	ldr	r3, [pc, #148]	; (8006ba0 <__swsetup_r+0xd4>)
 8006b0a:	429c      	cmp	r4, r3
 8006b0c:	d101      	bne.n	8006b12 <__swsetup_r+0x46>
 8006b0e:	68ac      	ldr	r4, [r5, #8]
 8006b10:	e7eb      	b.n	8006aea <__swsetup_r+0x1e>
 8006b12:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <__swsetup_r+0xd8>)
 8006b14:	429c      	cmp	r4, r3
 8006b16:	bf08      	it	eq
 8006b18:	68ec      	ldreq	r4, [r5, #12]
 8006b1a:	e7e6      	b.n	8006aea <__swsetup_r+0x1e>
 8006b1c:	0758      	lsls	r0, r3, #29
 8006b1e:	d512      	bpl.n	8006b46 <__swsetup_r+0x7a>
 8006b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b22:	b141      	cbz	r1, 8006b36 <__swsetup_r+0x6a>
 8006b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b28:	4299      	cmp	r1, r3
 8006b2a:	d002      	beq.n	8006b32 <__swsetup_r+0x66>
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f7ff fdc9 	bl	80066c4 <_free_r>
 8006b32:	2300      	movs	r3, #0
 8006b34:	6363      	str	r3, [r4, #52]	; 0x34
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6063      	str	r3, [r4, #4]
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	f043 0308 	orr.w	r3, r3, #8
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	b94b      	cbnz	r3, 8006b66 <__swsetup_r+0x9a>
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5c:	d003      	beq.n	8006b66 <__swsetup_r+0x9a>
 8006b5e:	4621      	mov	r1, r4
 8006b60:	4630      	mov	r0, r6
 8006b62:	f000 fa07 	bl	8006f74 <__smakebuf_r>
 8006b66:	89a0      	ldrh	r0, [r4, #12]
 8006b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b6c:	f010 0301 	ands.w	r3, r0, #1
 8006b70:	d00a      	beq.n	8006b88 <__swsetup_r+0xbc>
 8006b72:	2300      	movs	r3, #0
 8006b74:	60a3      	str	r3, [r4, #8]
 8006b76:	6963      	ldr	r3, [r4, #20]
 8006b78:	425b      	negs	r3, r3
 8006b7a:	61a3      	str	r3, [r4, #24]
 8006b7c:	6923      	ldr	r3, [r4, #16]
 8006b7e:	b943      	cbnz	r3, 8006b92 <__swsetup_r+0xc6>
 8006b80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b84:	d1ba      	bne.n	8006afc <__swsetup_r+0x30>
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	0781      	lsls	r1, r0, #30
 8006b8a:	bf58      	it	pl
 8006b8c:	6963      	ldrpl	r3, [r4, #20]
 8006b8e:	60a3      	str	r3, [r4, #8]
 8006b90:	e7f4      	b.n	8006b7c <__swsetup_r+0xb0>
 8006b92:	2000      	movs	r0, #0
 8006b94:	e7f7      	b.n	8006b86 <__swsetup_r+0xba>
 8006b96:	bf00      	nop
 8006b98:	2000000c 	.word	0x2000000c
 8006b9c:	080074a4 	.word	0x080074a4
 8006ba0:	080074c4 	.word	0x080074c4
 8006ba4:	08007484 	.word	0x08007484

08006ba8 <abort>:
 8006ba8:	b508      	push	{r3, lr}
 8006baa:	2006      	movs	r0, #6
 8006bac:	f000 fa4a 	bl	8007044 <raise>
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	f7fb f833 	bl	8001c1c <_exit>
	...

08006bb8 <__sflush_r>:
 8006bb8:	898a      	ldrh	r2, [r1, #12]
 8006bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	0710      	lsls	r0, r2, #28
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	d458      	bmi.n	8006c78 <__sflush_r+0xc0>
 8006bc6:	684b      	ldr	r3, [r1, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dc05      	bgt.n	8006bd8 <__sflush_r+0x20>
 8006bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dc02      	bgt.n	8006bd8 <__sflush_r+0x20>
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bda:	2e00      	cmp	r6, #0
 8006bdc:	d0f9      	beq.n	8006bd2 <__sflush_r+0x1a>
 8006bde:	2300      	movs	r3, #0
 8006be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006be4:	682f      	ldr	r7, [r5, #0]
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	d032      	beq.n	8006c50 <__sflush_r+0x98>
 8006bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	075a      	lsls	r2, r3, #29
 8006bf0:	d505      	bpl.n	8006bfe <__sflush_r+0x46>
 8006bf2:	6863      	ldr	r3, [r4, #4]
 8006bf4:	1ac0      	subs	r0, r0, r3
 8006bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bf8:	b10b      	cbz	r3, 8006bfe <__sflush_r+0x46>
 8006bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bfc:	1ac0      	subs	r0, r0, r3
 8006bfe:	2300      	movs	r3, #0
 8006c00:	4602      	mov	r2, r0
 8006c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c04:	6a21      	ldr	r1, [r4, #32]
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b0      	blx	r6
 8006c0a:	1c43      	adds	r3, r0, #1
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	d106      	bne.n	8006c1e <__sflush_r+0x66>
 8006c10:	6829      	ldr	r1, [r5, #0]
 8006c12:	291d      	cmp	r1, #29
 8006c14:	d82c      	bhi.n	8006c70 <__sflush_r+0xb8>
 8006c16:	4a2a      	ldr	r2, [pc, #168]	; (8006cc0 <__sflush_r+0x108>)
 8006c18:	40ca      	lsrs	r2, r1
 8006c1a:	07d6      	lsls	r6, r2, #31
 8006c1c:	d528      	bpl.n	8006c70 <__sflush_r+0xb8>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	6062      	str	r2, [r4, #4]
 8006c22:	04d9      	lsls	r1, r3, #19
 8006c24:	6922      	ldr	r2, [r4, #16]
 8006c26:	6022      	str	r2, [r4, #0]
 8006c28:	d504      	bpl.n	8006c34 <__sflush_r+0x7c>
 8006c2a:	1c42      	adds	r2, r0, #1
 8006c2c:	d101      	bne.n	8006c32 <__sflush_r+0x7a>
 8006c2e:	682b      	ldr	r3, [r5, #0]
 8006c30:	b903      	cbnz	r3, 8006c34 <__sflush_r+0x7c>
 8006c32:	6560      	str	r0, [r4, #84]	; 0x54
 8006c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c36:	602f      	str	r7, [r5, #0]
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	d0ca      	beq.n	8006bd2 <__sflush_r+0x1a>
 8006c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c40:	4299      	cmp	r1, r3
 8006c42:	d002      	beq.n	8006c4a <__sflush_r+0x92>
 8006c44:	4628      	mov	r0, r5
 8006c46:	f7ff fd3d 	bl	80066c4 <_free_r>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006c4e:	e7c1      	b.n	8006bd4 <__sflush_r+0x1c>
 8006c50:	6a21      	ldr	r1, [r4, #32]
 8006c52:	2301      	movs	r3, #1
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b0      	blx	r6
 8006c58:	1c41      	adds	r1, r0, #1
 8006c5a:	d1c7      	bne.n	8006bec <__sflush_r+0x34>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0c4      	beq.n	8006bec <__sflush_r+0x34>
 8006c62:	2b1d      	cmp	r3, #29
 8006c64:	d001      	beq.n	8006c6a <__sflush_r+0xb2>
 8006c66:	2b16      	cmp	r3, #22
 8006c68:	d101      	bne.n	8006c6e <__sflush_r+0xb6>
 8006c6a:	602f      	str	r7, [r5, #0]
 8006c6c:	e7b1      	b.n	8006bd2 <__sflush_r+0x1a>
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	e7ad      	b.n	8006bd4 <__sflush_r+0x1c>
 8006c78:	690f      	ldr	r7, [r1, #16]
 8006c7a:	2f00      	cmp	r7, #0
 8006c7c:	d0a9      	beq.n	8006bd2 <__sflush_r+0x1a>
 8006c7e:	0793      	lsls	r3, r2, #30
 8006c80:	680e      	ldr	r6, [r1, #0]
 8006c82:	bf08      	it	eq
 8006c84:	694b      	ldreq	r3, [r1, #20]
 8006c86:	600f      	str	r7, [r1, #0]
 8006c88:	bf18      	it	ne
 8006c8a:	2300      	movne	r3, #0
 8006c8c:	eba6 0807 	sub.w	r8, r6, r7
 8006c90:	608b      	str	r3, [r1, #8]
 8006c92:	f1b8 0f00 	cmp.w	r8, #0
 8006c96:	dd9c      	ble.n	8006bd2 <__sflush_r+0x1a>
 8006c98:	6a21      	ldr	r1, [r4, #32]
 8006c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c9c:	4643      	mov	r3, r8
 8006c9e:	463a      	mov	r2, r7
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b0      	blx	r6
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	dc06      	bgt.n	8006cb6 <__sflush_r+0xfe>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	e78e      	b.n	8006bd4 <__sflush_r+0x1c>
 8006cb6:	4407      	add	r7, r0
 8006cb8:	eba8 0800 	sub.w	r8, r8, r0
 8006cbc:	e7e9      	b.n	8006c92 <__sflush_r+0xda>
 8006cbe:	bf00      	nop
 8006cc0:	20400001 	.word	0x20400001

08006cc4 <_fflush_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	690b      	ldr	r3, [r1, #16]
 8006cc8:	4605      	mov	r5, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	b913      	cbnz	r3, 8006cd4 <_fflush_r+0x10>
 8006cce:	2500      	movs	r5, #0
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	b118      	cbz	r0, 8006cde <_fflush_r+0x1a>
 8006cd6:	6983      	ldr	r3, [r0, #24]
 8006cd8:	b90b      	cbnz	r3, 8006cde <_fflush_r+0x1a>
 8006cda:	f000 f887 	bl	8006dec <__sinit>
 8006cde:	4b14      	ldr	r3, [pc, #80]	; (8006d30 <_fflush_r+0x6c>)
 8006ce0:	429c      	cmp	r4, r3
 8006ce2:	d11b      	bne.n	8006d1c <_fflush_r+0x58>
 8006ce4:	686c      	ldr	r4, [r5, #4]
 8006ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0ef      	beq.n	8006cce <_fflush_r+0xa>
 8006cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cf0:	07d0      	lsls	r0, r2, #31
 8006cf2:	d404      	bmi.n	8006cfe <_fflush_r+0x3a>
 8006cf4:	0599      	lsls	r1, r3, #22
 8006cf6:	d402      	bmi.n	8006cfe <_fflush_r+0x3a>
 8006cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cfa:	f000 f915 	bl	8006f28 <__retarget_lock_acquire_recursive>
 8006cfe:	4628      	mov	r0, r5
 8006d00:	4621      	mov	r1, r4
 8006d02:	f7ff ff59 	bl	8006bb8 <__sflush_r>
 8006d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d08:	07da      	lsls	r2, r3, #31
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	d4e0      	bmi.n	8006cd0 <_fflush_r+0xc>
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	059b      	lsls	r3, r3, #22
 8006d12:	d4dd      	bmi.n	8006cd0 <_fflush_r+0xc>
 8006d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d16:	f000 f908 	bl	8006f2a <__retarget_lock_release_recursive>
 8006d1a:	e7d9      	b.n	8006cd0 <_fflush_r+0xc>
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <_fflush_r+0x70>)
 8006d1e:	429c      	cmp	r4, r3
 8006d20:	d101      	bne.n	8006d26 <_fflush_r+0x62>
 8006d22:	68ac      	ldr	r4, [r5, #8]
 8006d24:	e7df      	b.n	8006ce6 <_fflush_r+0x22>
 8006d26:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <_fflush_r+0x74>)
 8006d28:	429c      	cmp	r4, r3
 8006d2a:	bf08      	it	eq
 8006d2c:	68ec      	ldreq	r4, [r5, #12]
 8006d2e:	e7da      	b.n	8006ce6 <_fflush_r+0x22>
 8006d30:	080074a4 	.word	0x080074a4
 8006d34:	080074c4 	.word	0x080074c4
 8006d38:	08007484 	.word	0x08007484

08006d3c <std>:
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	b510      	push	{r4, lr}
 8006d40:	4604      	mov	r4, r0
 8006d42:	e9c0 3300 	strd	r3, r3, [r0]
 8006d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d4a:	6083      	str	r3, [r0, #8]
 8006d4c:	8181      	strh	r1, [r0, #12]
 8006d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d50:	81c2      	strh	r2, [r0, #14]
 8006d52:	6183      	str	r3, [r0, #24]
 8006d54:	4619      	mov	r1, r3
 8006d56:	2208      	movs	r2, #8
 8006d58:	305c      	adds	r0, #92	; 0x5c
 8006d5a:	f7fd fd37 	bl	80047cc <memset>
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <std+0x38>)
 8006d60:	6263      	str	r3, [r4, #36]	; 0x24
 8006d62:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <std+0x3c>)
 8006d64:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d66:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <std+0x40>)
 8006d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d6a:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <std+0x44>)
 8006d6c:	6224      	str	r4, [r4, #32]
 8006d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	bf00      	nop
 8006d74:	0800707d 	.word	0x0800707d
 8006d78:	0800709f 	.word	0x0800709f
 8006d7c:	080070d7 	.word	0x080070d7
 8006d80:	080070fb 	.word	0x080070fb

08006d84 <_cleanup_r>:
 8006d84:	4901      	ldr	r1, [pc, #4]	; (8006d8c <_cleanup_r+0x8>)
 8006d86:	f000 b8af 	b.w	8006ee8 <_fwalk_reent>
 8006d8a:	bf00      	nop
 8006d8c:	08006cc5 	.word	0x08006cc5

08006d90 <__sfmoreglue>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	1e4a      	subs	r2, r1, #1
 8006d94:	2568      	movs	r5, #104	; 0x68
 8006d96:	4355      	muls	r5, r2
 8006d98:	460e      	mov	r6, r1
 8006d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d9e:	f7fe fa23 	bl	80051e8 <_malloc_r>
 8006da2:	4604      	mov	r4, r0
 8006da4:	b140      	cbz	r0, 8006db8 <__sfmoreglue+0x28>
 8006da6:	2100      	movs	r1, #0
 8006da8:	e9c0 1600 	strd	r1, r6, [r0]
 8006dac:	300c      	adds	r0, #12
 8006dae:	60a0      	str	r0, [r4, #8]
 8006db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006db4:	f7fd fd0a 	bl	80047cc <memset>
 8006db8:	4620      	mov	r0, r4
 8006dba:	bd70      	pop	{r4, r5, r6, pc}

08006dbc <__sfp_lock_acquire>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	; (8006dc4 <__sfp_lock_acquire+0x8>)
 8006dbe:	f000 b8b3 	b.w	8006f28 <__retarget_lock_acquire_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	200001ec 	.word	0x200001ec

08006dc8 <__sfp_lock_release>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	; (8006dd0 <__sfp_lock_release+0x8>)
 8006dca:	f000 b8ae 	b.w	8006f2a <__retarget_lock_release_recursive>
 8006dce:	bf00      	nop
 8006dd0:	200001ec 	.word	0x200001ec

08006dd4 <__sinit_lock_acquire>:
 8006dd4:	4801      	ldr	r0, [pc, #4]	; (8006ddc <__sinit_lock_acquire+0x8>)
 8006dd6:	f000 b8a7 	b.w	8006f28 <__retarget_lock_acquire_recursive>
 8006dda:	bf00      	nop
 8006ddc:	200001e7 	.word	0x200001e7

08006de0 <__sinit_lock_release>:
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <__sinit_lock_release+0x8>)
 8006de2:	f000 b8a2 	b.w	8006f2a <__retarget_lock_release_recursive>
 8006de6:	bf00      	nop
 8006de8:	200001e7 	.word	0x200001e7

08006dec <__sinit>:
 8006dec:	b510      	push	{r4, lr}
 8006dee:	4604      	mov	r4, r0
 8006df0:	f7ff fff0 	bl	8006dd4 <__sinit_lock_acquire>
 8006df4:	69a3      	ldr	r3, [r4, #24]
 8006df6:	b11b      	cbz	r3, 8006e00 <__sinit+0x14>
 8006df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dfc:	f7ff bff0 	b.w	8006de0 <__sinit_lock_release>
 8006e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e04:	6523      	str	r3, [r4, #80]	; 0x50
 8006e06:	4b13      	ldr	r3, [pc, #76]	; (8006e54 <__sinit+0x68>)
 8006e08:	4a13      	ldr	r2, [pc, #76]	; (8006e58 <__sinit+0x6c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e0e:	42a3      	cmp	r3, r4
 8006e10:	bf04      	itt	eq
 8006e12:	2301      	moveq	r3, #1
 8006e14:	61a3      	streq	r3, [r4, #24]
 8006e16:	4620      	mov	r0, r4
 8006e18:	f000 f820 	bl	8006e5c <__sfp>
 8006e1c:	6060      	str	r0, [r4, #4]
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 f81c 	bl	8006e5c <__sfp>
 8006e24:	60a0      	str	r0, [r4, #8]
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 f818 	bl	8006e5c <__sfp>
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	60e0      	str	r0, [r4, #12]
 8006e30:	2104      	movs	r1, #4
 8006e32:	6860      	ldr	r0, [r4, #4]
 8006e34:	f7ff ff82 	bl	8006d3c <std>
 8006e38:	68a0      	ldr	r0, [r4, #8]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	2109      	movs	r1, #9
 8006e3e:	f7ff ff7d 	bl	8006d3c <std>
 8006e42:	68e0      	ldr	r0, [r4, #12]
 8006e44:	2202      	movs	r2, #2
 8006e46:	2112      	movs	r1, #18
 8006e48:	f7ff ff78 	bl	8006d3c <std>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	61a3      	str	r3, [r4, #24]
 8006e50:	e7d2      	b.n	8006df8 <__sinit+0xc>
 8006e52:	bf00      	nop
 8006e54:	08007218 	.word	0x08007218
 8006e58:	08006d85 	.word	0x08006d85

08006e5c <__sfp>:
 8006e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5e:	4607      	mov	r7, r0
 8006e60:	f7ff ffac 	bl	8006dbc <__sfp_lock_acquire>
 8006e64:	4b1e      	ldr	r3, [pc, #120]	; (8006ee0 <__sfp+0x84>)
 8006e66:	681e      	ldr	r6, [r3, #0]
 8006e68:	69b3      	ldr	r3, [r6, #24]
 8006e6a:	b913      	cbnz	r3, 8006e72 <__sfp+0x16>
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	f7ff ffbd 	bl	8006dec <__sinit>
 8006e72:	3648      	adds	r6, #72	; 0x48
 8006e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	d503      	bpl.n	8006e84 <__sfp+0x28>
 8006e7c:	6833      	ldr	r3, [r6, #0]
 8006e7e:	b30b      	cbz	r3, 8006ec4 <__sfp+0x68>
 8006e80:	6836      	ldr	r6, [r6, #0]
 8006e82:	e7f7      	b.n	8006e74 <__sfp+0x18>
 8006e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e88:	b9d5      	cbnz	r5, 8006ec0 <__sfp+0x64>
 8006e8a:	4b16      	ldr	r3, [pc, #88]	; (8006ee4 <__sfp+0x88>)
 8006e8c:	60e3      	str	r3, [r4, #12]
 8006e8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e92:	6665      	str	r5, [r4, #100]	; 0x64
 8006e94:	f000 f847 	bl	8006f26 <__retarget_lock_init_recursive>
 8006e98:	f7ff ff96 	bl	8006dc8 <__sfp_lock_release>
 8006e9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ea4:	6025      	str	r5, [r4, #0]
 8006ea6:	61a5      	str	r5, [r4, #24]
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	4629      	mov	r1, r5
 8006eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006eb0:	f7fd fc8c 	bl	80047cc <memset>
 8006eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec0:	3468      	adds	r4, #104	; 0x68
 8006ec2:	e7d9      	b.n	8006e78 <__sfp+0x1c>
 8006ec4:	2104      	movs	r1, #4
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	f7ff ff62 	bl	8006d90 <__sfmoreglue>
 8006ecc:	4604      	mov	r4, r0
 8006ece:	6030      	str	r0, [r6, #0]
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d1d5      	bne.n	8006e80 <__sfp+0x24>
 8006ed4:	f7ff ff78 	bl	8006dc8 <__sfp_lock_release>
 8006ed8:	230c      	movs	r3, #12
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	e7ee      	b.n	8006ebc <__sfp+0x60>
 8006ede:	bf00      	nop
 8006ee0:	08007218 	.word	0x08007218
 8006ee4:	ffff0001 	.word	0xffff0001

08006ee8 <_fwalk_reent>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	4606      	mov	r6, r0
 8006eee:	4688      	mov	r8, r1
 8006ef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ef4:	2700      	movs	r7, #0
 8006ef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006efa:	f1b9 0901 	subs.w	r9, r9, #1
 8006efe:	d505      	bpl.n	8006f0c <_fwalk_reent+0x24>
 8006f00:	6824      	ldr	r4, [r4, #0]
 8006f02:	2c00      	cmp	r4, #0
 8006f04:	d1f7      	bne.n	8006ef6 <_fwalk_reent+0xe>
 8006f06:	4638      	mov	r0, r7
 8006f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0c:	89ab      	ldrh	r3, [r5, #12]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d907      	bls.n	8006f22 <_fwalk_reent+0x3a>
 8006f12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f16:	3301      	adds	r3, #1
 8006f18:	d003      	beq.n	8006f22 <_fwalk_reent+0x3a>
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	47c0      	blx	r8
 8006f20:	4307      	orrs	r7, r0
 8006f22:	3568      	adds	r5, #104	; 0x68
 8006f24:	e7e9      	b.n	8006efa <_fwalk_reent+0x12>

08006f26 <__retarget_lock_init_recursive>:
 8006f26:	4770      	bx	lr

08006f28 <__retarget_lock_acquire_recursive>:
 8006f28:	4770      	bx	lr

08006f2a <__retarget_lock_release_recursive>:
 8006f2a:	4770      	bx	lr

08006f2c <__swhatbuf_r>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	460e      	mov	r6, r1
 8006f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f34:	2900      	cmp	r1, #0
 8006f36:	b096      	sub	sp, #88	; 0x58
 8006f38:	4614      	mov	r4, r2
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	da07      	bge.n	8006f4e <__swhatbuf_r+0x22>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	89b3      	ldrh	r3, [r6, #12]
 8006f44:	061a      	lsls	r2, r3, #24
 8006f46:	d410      	bmi.n	8006f6a <__swhatbuf_r+0x3e>
 8006f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f4c:	e00e      	b.n	8006f6c <__swhatbuf_r+0x40>
 8006f4e:	466a      	mov	r2, sp
 8006f50:	f000 f8fa 	bl	8007148 <_fstat_r>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	dbf2      	blt.n	8006f3e <__swhatbuf_r+0x12>
 8006f58:	9a01      	ldr	r2, [sp, #4]
 8006f5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f62:	425a      	negs	r2, r3
 8006f64:	415a      	adcs	r2, r3
 8006f66:	602a      	str	r2, [r5, #0]
 8006f68:	e7ee      	b.n	8006f48 <__swhatbuf_r+0x1c>
 8006f6a:	2340      	movs	r3, #64	; 0x40
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	6023      	str	r3, [r4, #0]
 8006f70:	b016      	add	sp, #88	; 0x58
 8006f72:	bd70      	pop	{r4, r5, r6, pc}

08006f74 <__smakebuf_r>:
 8006f74:	898b      	ldrh	r3, [r1, #12]
 8006f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f78:	079d      	lsls	r5, r3, #30
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	d507      	bpl.n	8006f90 <__smakebuf_r+0x1c>
 8006f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	6123      	str	r3, [r4, #16]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	6163      	str	r3, [r4, #20]
 8006f8c:	b002      	add	sp, #8
 8006f8e:	bd70      	pop	{r4, r5, r6, pc}
 8006f90:	ab01      	add	r3, sp, #4
 8006f92:	466a      	mov	r2, sp
 8006f94:	f7ff ffca 	bl	8006f2c <__swhatbuf_r>
 8006f98:	9900      	ldr	r1, [sp, #0]
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f7fe f923 	bl	80051e8 <_malloc_r>
 8006fa2:	b948      	cbnz	r0, 8006fb8 <__smakebuf_r+0x44>
 8006fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa8:	059a      	lsls	r2, r3, #22
 8006faa:	d4ef      	bmi.n	8006f8c <__smakebuf_r+0x18>
 8006fac:	f023 0303 	bic.w	r3, r3, #3
 8006fb0:	f043 0302 	orr.w	r3, r3, #2
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	e7e3      	b.n	8006f80 <__smakebuf_r+0xc>
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <__smakebuf_r+0x7c>)
 8006fba:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	6020      	str	r0, [r4, #0]
 8006fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	9b00      	ldr	r3, [sp, #0]
 8006fc8:	6163      	str	r3, [r4, #20]
 8006fca:	9b01      	ldr	r3, [sp, #4]
 8006fcc:	6120      	str	r0, [r4, #16]
 8006fce:	b15b      	cbz	r3, 8006fe8 <__smakebuf_r+0x74>
 8006fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f000 f8c9 	bl	800716c <_isatty_r>
 8006fda:	b128      	cbz	r0, 8006fe8 <__smakebuf_r+0x74>
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	f023 0303 	bic.w	r3, r3, #3
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	89a0      	ldrh	r0, [r4, #12]
 8006fea:	4305      	orrs	r5, r0
 8006fec:	81a5      	strh	r5, [r4, #12]
 8006fee:	e7cd      	b.n	8006f8c <__smakebuf_r+0x18>
 8006ff0:	08006d85 	.word	0x08006d85

08006ff4 <_raise_r>:
 8006ff4:	291f      	cmp	r1, #31
 8006ff6:	b538      	push	{r3, r4, r5, lr}
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	d904      	bls.n	8007008 <_raise_r+0x14>
 8006ffe:	2316      	movs	r3, #22
 8007000:	6003      	str	r3, [r0, #0]
 8007002:	f04f 30ff 	mov.w	r0, #4294967295
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800700a:	b112      	cbz	r2, 8007012 <_raise_r+0x1e>
 800700c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007010:	b94b      	cbnz	r3, 8007026 <_raise_r+0x32>
 8007012:	4620      	mov	r0, r4
 8007014:	f000 f830 	bl	8007078 <_getpid_r>
 8007018:	462a      	mov	r2, r5
 800701a:	4601      	mov	r1, r0
 800701c:	4620      	mov	r0, r4
 800701e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007022:	f000 b817 	b.w	8007054 <_kill_r>
 8007026:	2b01      	cmp	r3, #1
 8007028:	d00a      	beq.n	8007040 <_raise_r+0x4c>
 800702a:	1c59      	adds	r1, r3, #1
 800702c:	d103      	bne.n	8007036 <_raise_r+0x42>
 800702e:	2316      	movs	r3, #22
 8007030:	6003      	str	r3, [r0, #0]
 8007032:	2001      	movs	r0, #1
 8007034:	e7e7      	b.n	8007006 <_raise_r+0x12>
 8007036:	2400      	movs	r4, #0
 8007038:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800703c:	4628      	mov	r0, r5
 800703e:	4798      	blx	r3
 8007040:	2000      	movs	r0, #0
 8007042:	e7e0      	b.n	8007006 <_raise_r+0x12>

08007044 <raise>:
 8007044:	4b02      	ldr	r3, [pc, #8]	; (8007050 <raise+0xc>)
 8007046:	4601      	mov	r1, r0
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	f7ff bfd3 	b.w	8006ff4 <_raise_r>
 800704e:	bf00      	nop
 8007050:	2000000c 	.word	0x2000000c

08007054 <_kill_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4d07      	ldr	r5, [pc, #28]	; (8007074 <_kill_r+0x20>)
 8007058:	2300      	movs	r3, #0
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	4611      	mov	r1, r2
 8007060:	602b      	str	r3, [r5, #0]
 8007062:	f7fa fdcb 	bl	8001bfc <_kill>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	d102      	bne.n	8007070 <_kill_r+0x1c>
 800706a:	682b      	ldr	r3, [r5, #0]
 800706c:	b103      	cbz	r3, 8007070 <_kill_r+0x1c>
 800706e:	6023      	str	r3, [r4, #0]
 8007070:	bd38      	pop	{r3, r4, r5, pc}
 8007072:	bf00      	nop
 8007074:	200001e0 	.word	0x200001e0

08007078 <_getpid_r>:
 8007078:	f7fa bdb8 	b.w	8001bec <_getpid>

0800707c <__sread>:
 800707c:	b510      	push	{r4, lr}
 800707e:	460c      	mov	r4, r1
 8007080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007084:	f000 f894 	bl	80071b0 <_read_r>
 8007088:	2800      	cmp	r0, #0
 800708a:	bfab      	itete	ge
 800708c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800708e:	89a3      	ldrhlt	r3, [r4, #12]
 8007090:	181b      	addge	r3, r3, r0
 8007092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007096:	bfac      	ite	ge
 8007098:	6563      	strge	r3, [r4, #84]	; 0x54
 800709a:	81a3      	strhlt	r3, [r4, #12]
 800709c:	bd10      	pop	{r4, pc}

0800709e <__swrite>:
 800709e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a2:	461f      	mov	r7, r3
 80070a4:	898b      	ldrh	r3, [r1, #12]
 80070a6:	05db      	lsls	r3, r3, #23
 80070a8:	4605      	mov	r5, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	4616      	mov	r6, r2
 80070ae:	d505      	bpl.n	80070bc <__swrite+0x1e>
 80070b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b4:	2302      	movs	r3, #2
 80070b6:	2200      	movs	r2, #0
 80070b8:	f000 f868 	bl	800718c <_lseek_r>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	4632      	mov	r2, r6
 80070ca:	463b      	mov	r3, r7
 80070cc:	4628      	mov	r0, r5
 80070ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070d2:	f000 b817 	b.w	8007104 <_write_r>

080070d6 <__sseek>:
 80070d6:	b510      	push	{r4, lr}
 80070d8:	460c      	mov	r4, r1
 80070da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070de:	f000 f855 	bl	800718c <_lseek_r>
 80070e2:	1c43      	adds	r3, r0, #1
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	bf15      	itete	ne
 80070e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80070ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070f2:	81a3      	strheq	r3, [r4, #12]
 80070f4:	bf18      	it	ne
 80070f6:	81a3      	strhne	r3, [r4, #12]
 80070f8:	bd10      	pop	{r4, pc}

080070fa <__sclose>:
 80070fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070fe:	f000 b813 	b.w	8007128 <_close_r>
	...

08007104 <_write_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d07      	ldr	r5, [pc, #28]	; (8007124 <_write_r+0x20>)
 8007108:	4604      	mov	r4, r0
 800710a:	4608      	mov	r0, r1
 800710c:	4611      	mov	r1, r2
 800710e:	2200      	movs	r2, #0
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f7fa fda9 	bl	8001c6a <_write>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_write_r+0x1e>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_write_r+0x1e>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	200001e0 	.word	0x200001e0

08007128 <_close_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d06      	ldr	r5, [pc, #24]	; (8007144 <_close_r+0x1c>)
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	f7fa fdb5 	bl	8001ca2 <_close>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_close_r+0x1a>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_close_r+0x1a>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	200001e0 	.word	0x200001e0

08007148 <_fstat_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d07      	ldr	r5, [pc, #28]	; (8007168 <_fstat_r+0x20>)
 800714c:	2300      	movs	r3, #0
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	f7fa fdb0 	bl	8001cba <_fstat>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	d102      	bne.n	8007164 <_fstat_r+0x1c>
 800715e:	682b      	ldr	r3, [r5, #0]
 8007160:	b103      	cbz	r3, 8007164 <_fstat_r+0x1c>
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	bd38      	pop	{r3, r4, r5, pc}
 8007166:	bf00      	nop
 8007168:	200001e0 	.word	0x200001e0

0800716c <_isatty_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d06      	ldr	r5, [pc, #24]	; (8007188 <_isatty_r+0x1c>)
 8007170:	2300      	movs	r3, #0
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	f7fa fdaf 	bl	8001cda <_isatty>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d102      	bne.n	8007186 <_isatty_r+0x1a>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	b103      	cbz	r3, 8007186 <_isatty_r+0x1a>
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	bd38      	pop	{r3, r4, r5, pc}
 8007188:	200001e0 	.word	0x200001e0

0800718c <_lseek_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4d07      	ldr	r5, [pc, #28]	; (80071ac <_lseek_r+0x20>)
 8007190:	4604      	mov	r4, r0
 8007192:	4608      	mov	r0, r1
 8007194:	4611      	mov	r1, r2
 8007196:	2200      	movs	r2, #0
 8007198:	602a      	str	r2, [r5, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	f7fa fda8 	bl	8001cf0 <_lseek>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d102      	bne.n	80071aa <_lseek_r+0x1e>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	b103      	cbz	r3, 80071aa <_lseek_r+0x1e>
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	200001e0 	.word	0x200001e0

080071b0 <_read_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4d07      	ldr	r5, [pc, #28]	; (80071d0 <_read_r+0x20>)
 80071b4:	4604      	mov	r4, r0
 80071b6:	4608      	mov	r0, r1
 80071b8:	4611      	mov	r1, r2
 80071ba:	2200      	movs	r2, #0
 80071bc:	602a      	str	r2, [r5, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	f7fa fd36 	bl	8001c30 <_read>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_read_r+0x1e>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_read_r+0x1e>
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	200001e0 	.word	0x200001e0

080071d4 <_init>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	bf00      	nop
 80071d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071da:	bc08      	pop	{r3}
 80071dc:	469e      	mov	lr, r3
 80071de:	4770      	bx	lr

080071e0 <_fini>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	bf00      	nop
 80071e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e6:	bc08      	pop	{r3}
 80071e8:	469e      	mov	lr, r3
 80071ea:	4770      	bx	lr
